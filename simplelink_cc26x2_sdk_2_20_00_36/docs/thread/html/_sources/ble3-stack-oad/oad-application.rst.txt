.. _oad-process:

OAD Application
===============

The application layer is responsible for plugging the OAD module. The OAD
profile and communication with the BLE-Stack is encapsulated inside the OAD
module.

The responsibilities of the application depend on which OAD solution is used.
In on-chip OAD, the user application is only responsible for plugging the OAD
reset service. The TI- provided persistent application is responsible for
plugging the OAD profile module that manages the download. In the case of
off-chip OAD, the user application is responsible for plugging the OAD module.

An application developer wishing to implement use the TI OAD solution
will not need to worry about implementing the OAD state machine, but instead can
just include the OAD module or reset service and make the proper calls as
detailed in :ref:`sec-add-ble-oad-to-project`. However, the details of the OAD
module layer are documented here for completeness and to aide in debugging.

OAD Module Architecture
-----------------------

The building blocks of the OAD software architecture are detailed below.
In the case of off-chip OAD the green block is the user application thread.
In the case of on-chip OAD the green block is the persistent application thread
that is part of the persistent application image.
In the figure below the following terms have been abbreviated for compactness in
the image.

    - CB : Callback
    - SVC: BLE Service
    - Func: Function

.. ditaa::
    :--no-separation:

        +--------------------------------+
        |       Application Task         |
        |           cGRE                 |
        +-+-+--------------------+-+-----+
          | |         ^          | |  ^ ^
    Func  | |  Event  |          | |  | | Other BLE Stack
    calls | |    CB   |          | |  | | Func calls and events/CBs
          | |         |          | |  | |
          | |         |          | |  | |
          v v         |          | |  | |
        +-------------+-+        | |  | |
        |      OAD      |        | |  | |
        |      cRED     |        | |  | |
        +-+-+-----------+        | |  | |
    GATT  | |     SVC ^          | |  | |
    SVC   | |     CBs |          | |  | |
    func  | |         |          | |  | |
    calls | |         |          | |  | |
          V V         |          V V  | |
        +-------------+---------------+-++
        |            BLE-Stack           |
        |              cBLK              |
        +--------------------------------+

Internally the OAD module is responsible for the following:

    - Implementing the OAD profile
    - Plugging the GATT read and write callback from the |STACK|
    - Serializing and de-serializing structures from over the messages
    - Sending OAD related requests and responses to the |STACK| to be sent over
      the air
    - Queuing up messages from stack callbacks to be processed later by the
      application
    - Implementing the OAD state machine, and ensuring proper state transitions
    - Implementing the OAD inactivity timers
    - Implementing getter/setter functions for the application to use and
      configure the OAD module

External to the OAD module the application task is responsible for the
following. See :ref:`sec-add-ble-oad-to-project` more more information.

    - Plugging an OAD event handler
    - Calling the OAD event processing function in a task context when events
      are posted.
    - Resetting the device when the ``OAD_DL_COMPLETE`` event is received.

A message sequence chart is included below to show a sample of an application's
interaction with the OAD module.


    .. _fig-oad-call-graph:
    .. uml::
        :caption: OAD Module/ Application interaction
        :align: center

        @startuml
        hide footbox

        participant app_task.c as app
        participant oad.c as oad
        participant "BLE Stack" as BLE
        participant "OAD Queue" as OADQ

        box "BLE-Stack Context"
            participant "GATT R/W Callback" as GATT
        end box

        activate app

        group Initialize OAD Module
            app -> oad : OAD_open()

            activate oad
            oad -> BLE : GATTServApp_InitCharCfg() (repeat for each char CCCD)
            oad -> BLE : GATTServApp_RegisterService()

            oad -> OADQ : Queue_construct()
            deactivate oad

            app -> oad : OAD_register()
        end

        BLE -> app : ATT_MTU_UPDATED_EVENT
        app -> oad : OAD_setBlockSize()


        group Processing OAD Service Messages
            note over oad, BLE
                Peer device sends OTA command/write
            end note

            activate GATT
            GATT -> oad : oadWriteAttrCB()

            activate oad
            oad -> OADQ : oadEnqueueMsg()
            oad -> app : Execute (*oadWriteCB_t)
            deactivate OAD
            deactivate GATT

            app -> oad : OAD_processQueue()
            oad -> OADQ : Queue_get()

            note over oad
                Process event
            end note
        end

        group
        @enduml


OAD State Machine
-----------------

The following section aims to describe the OAD process at a high level.

Device Reset/Image Switching
""""""""""""""""""""""""""""

If using on-chip OAD, the OAD profile/module is not implemented by the user
applcation. Therefore, there must be a way for the peer device that is
initiating an OAD to indicate that an on-chip OAD target is to reboot in the
persistent app. This is achieved through the OAD reset service.

The reset service command contains information about whether to reboot and load
the user app or to reboot and load into the persistent app. When using secure
OAD, this command also contains a signature to verify that the command is
sent by a known peer device. If the reset command indicates to jump to the
persistent app and the security check passes then the reset service will
set the BIM var to instruct the BIM to boot into the persistent app and then
trigger a device reset.(See :ref:`sect-ram-argument` for more info).

After the device has booted into the persistent app, the OAD process continues
as described below. From this point it is identical to the off-chip process.

    .. _fig-oad-reset-call-graph:
    .. uml::
        :caption: OAD Reset Service/User Application Interaction
        :align: center

        @startuml
        hide footbox

        participant app_task.c as app
        participant oad_reset_service.c as oad_reset
        participant "BLE Stack" as BLE

        box "BLE-Stack Context"
            participant "GATT R/W Callback" as GATT
        end box

        activate app

        group Initialize OAD Module
            app -> oad_reset : Reset_addService()

            activate oad_reset
            oad_reset -> BLE : GATTServApp_RegisterService()

        end


        group Processing OAD Reset
            note over oad_reset, BLE
                Peer device sends reset OTA command/write
            end note

            activate GATT
            GATT -> oad_reset : ResetWriteAttrCB()

            oad_reset -> app : Execute (*oadResetWriteCB_t)
            app -> app : App_enqueueMsg()
            deactivate GATT

            app -> app : Process OAD reset event
            app -> app : (Optional): verify security
            app -> app : Reset device
        end

        group
        @enduml

OAD Module State Diagram
""""""""""""""""""""""""

The OAD module implements an 'OAD State Machine' for performing the OAD. The
following state machine depicts the OAD module state transitions and its
interactions with the OAD communication profile messages for both on-chip and
off-chip OAD.

.. _fig-oad-state-machine:
.. figure:: resources/oad_state_machine.png
    :align: center

    OAD Types Overview

The states and state transitions are encapsulated inside the OAD module, but
some of the critical states are described below to aide in understanding.

Note these sections refer to internal state handling and transitions local to
the target device. For a summary of the over the air sequence see
:ref:`fig-oad-sequence-diagram` and for a breakdown of the different types of
profile messages and how to interpret them over the air please see
:ref:`sect-oad-profile`.

Image Validation
""""""""""""""""

After establishing a new connection, updating the connection interval
for a faster OAD and enabling notifications of OAD Image Identify and
OAD Image Block characteristics on the OAD target, the
OAD distributor shall write to the Image Identify characteristic of the
OAD target. The message data will be the header retrieved from the OAD
Image available for OAD.

On receiving the `Image Identify` message, the
OAD target will verify that the contents of the image can be supported.
This is done by checking the Image Header fields, BIM & header versions, and
length of the image.

The OAD target will then perform boundary checks in the case of an
Application Only or Stack Only OAD. This is done to ensure no boundary violations
will occur between the upgraded image and the images that remain on the device.

Additionally, if security is enabled then the OAD module will check the
image identify command for a signature to ensure that the command came from
a trusted peer.

Image Block Transfers
"""""""""""""""""""""

After the Image Validation has completed, the OAD target will switch to
the configuration state. There it will get the block size and set image count.
When the OAD distributor sends the Start OAD Command to the Control
Characteristic (for more details see :ref:`tbl-oad-control-supported-commands`),
the OAD target will respond with a Control characteristic notification
requesting the first block. The OAD distributor will then send the first block
to the OAD target.

This process continues with the OAD target notifying the OAD distributor
of the next block it needs and the OAD distributor sending the requested
image block until all blocks have been transferred.

Completion of the OAD Process
"""""""""""""""""""""""""""""

After receiving the complete image, the CRC32 of the entire image will be
calculated and the'CRC32 status' bytes will be set accordingly. If the computed
CRC matches with the 'CRC' field of received image, it switches to 'End' state.

After the OAD process is complete the system will wait for the newly downloaded
image to be enabled. Once the image is successfully enabled the OAD module
will signal to the app that it should reset. After reset the BIM will process
the new image accordingly.
