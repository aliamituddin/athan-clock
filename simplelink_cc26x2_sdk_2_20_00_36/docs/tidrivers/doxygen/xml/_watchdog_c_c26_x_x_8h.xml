<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_watchdog_c_c26_x_x_8h" kind="file" language="C++">
    <compoundname>WatchdogCC26XX.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes refid="_watchdog_8h" local="no">ti/drivers/Watchdog.h</includes>
    <includes local="no">ti/drivers/dpl/HwiP.h</includes>
    <incdepgraph>
      <node id="782">
        <label>stdbool.h</label>
      </node>
      <node id="781">
        <label>stdint.h</label>
      </node>
      <node id="783">
        <label>ti/drivers/Watchdog.h</label>
        <link refid="_watchdog_8h"/>
        <childnode refid="781" relation="include">
        </childnode>
      </node>
      <node id="784">
        <label>ti/drivers/dpl/HwiP.h</label>
      </node>
      <node id="780">
        <label>WatchdogCC26XX.h</label>
        <link refid="_watchdog_c_c26_x_x_8h"/>
        <childnode refid="781" relation="include">
        </childnode>
        <childnode refid="782" relation="include">
        </childnode>
        <childnode refid="783" relation="include">
        </childnode>
        <childnode refid="784" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct_watchdog_c_c26_x_x___h_w_attrs" prot="public">WatchdogCC26XX_HWAttrs</innerclass>
    <innerclass refid="struct_watchdog_c_c26_x_x___object" prot="public">WatchdogCC26XX_Object</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_watchdog_c_c26_x_x_8h_1a3c5c1fb8e79e0ffbefbc0c6077490157" prot="public" static="no">
        <type>struct <ref refid="struct_watchdog_c_c26_x_x___h_w_attrs" kindref="compound">WatchdogCC26XX_HWAttrs</ref></type>
        <definition>typedef struct WatchdogCC26XX_HWAttrs  WatchdogCC26XX_HWAttrs</definition>
        <argsstring></argsstring>
        <name>WatchdogCC26XX_HWAttrs</name>
        <briefdescription>
<para>Watchdog hardware attributes for CC26XX. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/watchdog/WatchdogCC26XX.h" line="224" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_watchdog_c_c26_x_x_8h_1a1974637ff573d5fb1e141f263ac5361f" prot="public" static="no">
        <type>struct <ref refid="struct_watchdog_c_c26_x_x___object" kindref="compound">WatchdogCC26XX_Object</ref></type>
        <definition>typedef struct WatchdogCC26XX_Object  WatchdogCC26XX_Object</definition>
        <argsstring></argsstring>
        <name>WatchdogCC26XX_Object</name>
        <briefdescription>
<para>Watchdog Object for CC26XX. </para>        </briefdescription>
        <detaileddescription>
<para>Not to be accessed by the user. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/watchdog/WatchdogCC26XX.h" line="241" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_watchdog_c_c26_x_x_8h_1a1f60b940055d37c5bf8545499e948ca3" prot="public" static="no" mutable="no">
        <type>const <ref refid="_watchdog_8h_1aa8370f2ff642b6a253e37c0b7b44fbed" kindref="member">Watchdog_FxnTable</ref></type>
        <definition>const Watchdog_FxnTable WatchdogCC26XX_fxnTable</definition>
        <argsstring></argsstring>
        <name>WatchdogCC26XX_fxnTable</name>
        <briefdescription>
<para>Watchdog function table for CC26XX. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/watchdog/WatchdogCC26XX.h" line="216" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Watchdog driver implementation for CC13XX/CC26XX. </para>    </briefdescription>
    <detaileddescription>
<para>============================================================================</para><para><heading level="1">Driver include</heading>
</para><para>The Watchdog header file should be included in an application as follows: <programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/Watchdog.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/watchdog/WatchdogCC26XX.h&gt;</highlight></codeline>
</programlisting></para><para>Refer to <ref refid="_watchdog_8h" kindref="compound">Watchdog.h</ref> for a complete description of APIs.</para><para><heading level="1">Overview</heading>
</para><para>The general Watchdog API should be used in application code, i.e. <ref refid="_watchdog_8h_1a26795f67f599b74de830ca7bf36bdced" kindref="member">Watchdog_open()</ref> should be used instead of WatchdogCC26XX_open(). The board file will define the device specific config, and casting in the general API will ensure that the correct device specific functions are called.</para><para><heading level="1">General Behavior</heading>
</para><para>This Watchdog driver implementation is designed to operate on a CC13XX/CC26XX device. Before using the Watchdog in CC13XX/CC26XX, the Watchdog driver is initialized by calling <ref refid="_watchdog_8h_1afaadfb59be17661ae95562f2081355e7" kindref="member">Watchdog_init()</ref>. The Watchdog HW is configured by calling <ref refid="_watchdog_8h_1a26795f67f599b74de830ca7bf36bdced" kindref="member">Watchdog_open()</ref>. Once opened, the Watchdog will count down from the reload value specified in <ref refid="struct_watchdog_c_c26_x_x___h_w_attrs" kindref="compound">WatchdogCC26XX_HWAttrs</ref>. If it times out, a non-maskable interrupt will be triggered, the Watchdog interrupt flag will be set, and a user-provided callback function will be called. If reset is enabled in the Watchdog_Params and the Watchdog timer is allowed to time out again while the interrupt flag is still pending, a reset signal will be generated. To prevent a reset, <ref refid="_watchdog_8h_1a396decd6b1807db10c636f9987c3be4c" kindref="member">Watchdog_clear()</ref> must be called to clear the interrupt flag and to reload the timer.</para><para>The Watchdog counts down at a rate of the device clock SCLK_HF (48 MHz) divided by a fixed-division ratio of 32, which equals to 1.5 MHz. The Watchdog rate will change if SCLK_HF deviates from 48 MHz.</para><para><simplesect kind="note"><para>The Watchdog interrupt is configured as a non-maskable interrupt (NMI) and the user-defined callback function is called in the context of NMI. Because the Watchdog interrupt is non-maskable, it is not safe to call any BIOS APIs from the Watchdog callback function.</para></simplesect>
The reload value from which the Watchdog timer counts down may be changed during runtime using <ref refid="_watchdog_8h_1a63ea82dda83e42e236578b9810e56880" kindref="member">Watchdog_setReload()</ref>. This value should be specified in Watchdog clock ticks and should not exceed the maximum value of 32 bits, which corresponds to a timeout period of 2863.3 seconds at the Watchdog rate of 1.5 MHz. If the reload value is set to zero, the Watchdog interrupt is immediately generated.</para><para>Since the device is not reset on the first Watchdog timeout, the maximum time lapse between the time when the device gets locked up and the time when it is reset can be up to <bold>two</bold> Watchdog timeout periods.</para><para><ref refid="_watchdog_8h_1a1c0dfea7011b06f303d01afb631ffbdd" kindref="member">Watchdog_close()</ref> is <bold>not</bold> supported by this driver implementation. Once started, the Watchdog timer can only be stopped by a hardware reset.</para><para><bold>No</bold> CC13XX/CC26XX specific command has been implemented. Any call to <ref refid="_watchdog_8h_1a513c121c62f277318a7c35b0b2bdc869" kindref="member">Watchdog_control()</ref> will receive the return code Watchdog_STATUS_UNDEFINEDCMD.</para><para>By default the Watchdog driver has reset enabled. However, it may be disabled in the Watchdog_Params which allows the Watchdog Timer to be used like another timer interrupt. This functionality is <bold>not</bold> supported by all platforms, refer to device specific documentation for details.</para><para><heading level="1">Power Management</heading>
</para><para>Once started, the Watchdog will keep running in Active or Idle mode. When the device enters Standby mode, the Watchdog timer will stop counting down but the counter value will be preserved. When the device wakes up from Standby, the Watchdog timer will continue to count down from the previous counter value.</para><para>This means that if a system goes into Standby 50% of the time and the Watchdog reload value is set to 1 second, the Watchdog timer will actually time out in 2 seconds. A system which is only in Active/Idle mode for 1% of the time, the Watchdog timer will time out in 100 seconds. However, if a bug locks up the application in Active mode, the Watchdog timer will time out in the configured time.</para><para><heading level="1">Supported Functions</heading>
</para><para><table rows="6" cols="3"><row>
<entry thead="yes"><para>Generic API Function </para></entry><entry thead="yes"><para>API Function </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_watchdog_8h_1afaadfb59be17661ae95562f2081355e7" kindref="member">Watchdog_init()</ref> </para></entry><entry thead="no"><para>WatchdogCC26XX_init() </para></entry><entry thead="no"><para>Initialize Watchdog driver </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_watchdog_8h_1a26795f67f599b74de830ca7bf36bdced" kindref="member">Watchdog_open()</ref> </para></entry><entry thead="no"><para>WatchdogCC26XX_open() </para></entry><entry thead="no"><para>Initialize Watchdog HW and set system dependencies </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_watchdog_8h_1a396decd6b1807db10c636f9987c3be4c" kindref="member">Watchdog_clear()</ref> </para></entry><entry thead="no"><para>WatchdogCC26XX_clear() </para></entry><entry thead="no"><para>Clear Watchdog interrupt flag and reload counter </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_watchdog_8h_1a63ea82dda83e42e236578b9810e56880" kindref="member">Watchdog_setReload()</ref> </para></entry><entry thead="no"><para>WatchdogCC26XX_setReload() </para></entry><entry thead="no"><para>Set Watchdog timer reload value in clock ticnks </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_watchdog_8h_1a7b93cd0bd3a6f11aa28b0c7219755979" kindref="member">Watchdog_convertMsToTicks()</ref> </para></entry><entry thead="no"><para>WatchdogCC26XX_convertMsToTicks() </para></entry><entry thead="no"><para>Converts milliseconds to clock ticks </para></entry></row>
</table>
<simplesect kind="note"><para>All calls should go through the generic API. Please refer to <ref refid="_watchdog_8h" kindref="compound">Watchdog.h</ref> for a complete description of the generic APIs.</para></simplesect>
<heading level="1">Use Cases</heading>
</para><para><heading level="2">Basic Watchdog</heading>
</para><para>In this basic watchdog example, the application is expected to define a Watchdog callback function and start the Watchdog timer by calling <ref refid="_watchdog_8h_1a26795f67f599b74de830ca7bf36bdced" kindref="member">Watchdog_open()</ref>. If needed, <ref refid="_watchdog_8h_1a63ea82dda83e42e236578b9810e56880" kindref="member">Watchdog_setReload()</ref> may be called to change the timeout period. If all monitored tasks are doing alright, <ref refid="_watchdog_8h_1a396decd6b1807db10c636f9987c3be4c" kindref="member">Watchdog_clear()</ref> should be called regularly to reload the counter so as to restart the timeoout period and to avoid the Watchdog interrupt being triggered. If the <ref refid="_watchdog_8h_1a396decd6b1807db10c636f9987c3be4c" kindref="member">Watchdog_clear()</ref> is missed and the Watchdog timer is allowed to timeout, the user-defined callback function is called. In this function, the user may do whatever is appropriate for the application. Here are some suggestions:<itemizedlist>
<listitem><para>do nothing so that the timer will timeout again and trigger the reset,</para></listitem><listitem><para>immediately reset the device,</para></listitem><listitem><para>do self-test to check the integrity of the application,</para></listitem><listitem><para>post a SWI or Task to do the self-test.</para></listitem></itemizedlist>
</para><para>The following code example shows how to define the callback function and to start the Watchdog timer. <programlisting><codeline><highlight class="normal">void<sp/>watchdogCallback(uintptr_t<sp/>handle);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Watchdog_Handle<sp/>handle;</highlight></codeline>
<codeline><highlight class="normal">Watchdog_Params<sp/>params;</highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>tickValue;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Watchdog_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal">params.callbackFxn<sp/>=<sp/>watchdogCallback;</highlight></codeline>
<codeline><highlight class="normal">handle<sp/>=<sp/>Watchdog_open(Watchdog_configIndex,<sp/>&amp;params);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>set<sp/>timeout<sp/>period<sp/>to<sp/>100<sp/>ms</highlight></codeline>
<codeline><highlight class="normal">tickValue<sp/>=<sp/>Watchdog_convertMsToTicks(handle,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal">Watchdog_setReload(handle,<sp/>tickValue);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>watchdogCallback(uintptr_t<sp/>handle)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>User-defined<sp/>code<sp/>here</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <simplesect kind="note"><para>The Watchdog interrupt is configured as a non-maskable interrupt (NMI) and the user-defined callback function is called in NMI context. Therefore it is not safe to call any BIOS APIs from the Watchdog callback function. </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015-2018,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="174"><highlight class="preprocessor">#ifndef<sp/>ti_drivers_watchdog_WatchdogCC26XX__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_watchdog_WatchdogCC26XX__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_watchdog_8h" kindref="compound">ti/drivers/Watchdog.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="comment">/*<sp/>Add<sp/>WatchdogCC26XX_STATUS_*<sp/>macros<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="comment">/*<sp/>Add<sp/>WatchdogCC26XX_CMD_*<sp/>macros<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor">#include<sp/>&lt;ti/drivers/dpl/HwiP.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_watchdog___fxn_table__" kindref="compound">Watchdog_FxnTable</ref><sp/><ref refid="_watchdog_c_c26_x_x_8h_1a1f60b940055d37c5bf8545499e948ca3" kindref="member">WatchdogCC26XX_fxnTable</ref>;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="221" refid="struct_watchdog_c_c26_x_x___h_w_attrs" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_watchdog_c_c26_x_x___h_w_attrs" kindref="compound">WatchdogCC26XX_HWAttrs</ref><sp/>{</highlight></codeline>
<codeline lineno="222" refid="struct_watchdog_c_c26_x_x___h_w_attrs_1a0eda34ad75c65e399e2c97ce3ee9bbc9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_watchdog_c_c26_x_x___h_w_attrs_1a0eda34ad75c65e399e2c97ce3ee9bbc9" kindref="member">baseAddr</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="223" refid="struct_watchdog_c_c26_x_x___h_w_attrs_1a4d5992495525d1457f5aa356046ce055" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="struct_watchdog_c_c26_x_x___h_w_attrs_1a4d5992495525d1457f5aa356046ce055" kindref="member">reloadValue</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="224"><highlight class="normal">}<sp/><ref refid="_watchdog_c_c26_x_x_8h_1a3c5c1fb8e79e0ffbefbc0c6077490157" kindref="member">WatchdogCC26XX_HWAttrs</ref>;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="231" refid="struct_watchdog_c_c26_x_x___object" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_watchdog_c_c26_x_x___object" kindref="compound">WatchdogCC26XX_Object</ref><sp/>{</highlight></codeline>
<codeline lineno="232" refid="struct_watchdog_c_c26_x_x___object_1a841c8d0d31d1579a93b252a1fa0f24ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_watchdog_c_c26_x_x___object_1a841c8d0d31d1579a93b252a1fa0f24ee" kindref="member">isOpen</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Flag<sp/>for<sp/>open/close<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233" refid="struct_watchdog_c_c26_x_x___object_1aa6c9f831aad4ab34f61bf323aa3c0b51" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_watchdog_8h_1a2d201451a10bb67efc3e222ac7f099c1" kindref="member">Watchdog_Callback</ref><sp/><sp/><sp/><ref refid="struct_watchdog_c_c26_x_x___object_1aa6c9f831aad4ab34f61bf323aa3c0b51" kindref="member">callbackFxn</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pointer<sp/>to<sp/>callback.<sp/>Not<sp/>supported</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on<sp/>all<sp/>targets.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235" refid="struct_watchdog_c_c26_x_x___object_1a6d5b931599fbf0753e7cba317d638385" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_watchdog_8h_1afb96d6e8d483083ce85f89d67341d866" kindref="member">Watchdog_ResetMode</ref><sp/><sp/><ref refid="struct_watchdog_c_c26_x_x___object_1a6d5b931599fbf0753e7cba317d638385" kindref="member">resetMode</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mode<sp/>to<sp/>enable<sp/>resets.</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Not<sp/>supported<sp/>on<sp/>all<sp/>targets.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237" refid="struct_watchdog_c_c26_x_x___object_1a1d7fd3a5482cda6047764bdd4d5c81e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_watchdog_8h_1a9e44509e7d94eac768c6f33e6c85e038" kindref="member">Watchdog_DebugMode</ref><sp/><sp/><ref refid="struct_watchdog_c_c26_x_x___object_1a1d7fd3a5482cda6047764bdd4d5c81e3" kindref="member">debugStallMode</ref>;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mode<sp/>to<sp/>stall<sp/>Watchdog<sp/>at<sp/>breakpoints.</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Not<sp/>supported<sp/>on<sp/>all<sp/>targets.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Watchdog<sp/>SYS/BIOS<sp/>objects<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="struct_watchdog_c_c26_x_x___object_1ad4ff3bd63542d01fef51a1fd2ac469ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>HwiP_Struct<sp/><ref refid="struct_watchdog_c_c26_x_x___object_1ad4ff3bd63542d01fef51a1fd2ac469ea" kindref="member">hwi</ref>;<sp/></highlight><highlight class="comment">/*<sp/>Hwi<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">}<sp/><ref refid="_watchdog_c_c26_x_x_8h_1a1974637ff573d5fb1e141f263ac5361f" kindref="member">WatchdogCC26XX_Object</ref>;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_watchdog_WatchdogCC26XX__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/watchdog/WatchdogCC26XX.h"/>
  </compounddef>
</doxygen>
