<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_a_e_s_c_c_m_8h" kind="file" language="C++">
    <compoundname>AESCCM.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdint.h</includes>
    <includes refid="_crypto_key_8h" local="no">ti/drivers/cryptoutils/cryptokey/CryptoKey.h</includes>
    <includedby refid="_a_e_s_c_c_m_c_c26_x_x_8h" local="no">AESCCMCC26XX.h</includedby>
    <incdepgraph>
      <node id="81">
        <label>stdbool.h</label>
      </node>
      <node id="80">
        <label>AESCCM.h</label>
        <link refid="_a_e_s_c_c_m_8h"/>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>stdint.h</label>
      </node>
      <node id="84">
        <label>ti/drivers/cryptoutils/cryptokey/CryptoKey.h</label>
        <link refid="_crypto_key_8h"/>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="85">
        <label>AESCCM.h</label>
        <link refid="_a_e_s_c_c_m_8h"/>
        <childnode refid="86" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>AESCCMCC26XX.h</label>
        <link refid="_a_e_s_c_c_m_c_c26_x_x_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_a_e_s_c_c_m___operation__" prot="public">AESCCM_Operation_</innerclass>
    <innerclass refid="struct_a_e_s_c_c_m___config__" prot="public">AESCCM_Config_</innerclass>
    <innerclass refid="struct_a_e_s_c_c_m___params__" prot="public">AESCCM_Params_</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___a_e_s_c_c_m___c_o_n_t_r_o_l_1gaf2480c175d3fe21007a789c7b453f9c6" prot="public" static="no">
        <name>AESCCM_CMD_RESERVED</name>
        <initializer>(32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common AESCCM_control command code reservation offset. AESCCM driver implementations should offset command codes with AESCCM_CMD_RESERVED growing positively</para><para>Example implementation specific command codes: <programlisting><codeline><highlight class="normal">#define<sp/>AESCCMXYZ_CMD_COMMAND0<sp/><sp/><sp/><sp/><sp/>AESCCM_CMD_RESERVED<sp/>+<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>AESCCMXYZ_CMD_COMMAND1<sp/><sp/><sp/><sp/><sp/>AESCCM_CMD_RESERVED<sp/>+<sp/>1</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" line="352" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" bodystart="352" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_e_s_c_c_m___c_o_n_t_r_o_l_1ga92006b2b0e406614ca650c88b5d393ef" prot="public" static="no">
        <name>AESCCM_STATUS_RESERVED</name>
        <initializer>(-32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common AESCCM_control status code reservation offset. AESCCM driver implementations should offset status codes with AESCCM_STATUS_RESERVED growing negatively.</para><para>Example implementation specific status codes: <programlisting><codeline><highlight class="normal">#define<sp/>AESCCMXYZ_STATUS_ERROR0<sp/><sp/><sp/><sp/>AESCCM_STATUS_RESERVED<sp/>-<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>AESCCMXYZ_STATUS_ERROR1<sp/><sp/><sp/><sp/>AESCCM_STATUS_RESERVED<sp/>-<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>AESCCMXYZ_STATUS_ERROR2<sp/><sp/><sp/><sp/>AESCCM_STATUS_RESERVED<sp/>-<sp/>2</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" line="366" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_e_s_c_c_m___s_t_a_t_u_s_1gafde7b16d8daa5643d3d9e4c0ed9fe60d" prot="public" static="no">
        <name>AESCCM_STATUS_SUCCESS</name>
        <initializer>(0)</initializer>
        <briefdescription>
<para>Successful status code. </para>        </briefdescription>
        <detaileddescription>
<para>Functions return AESCCM_STATUS_SUCCESS if the function was executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" line="381" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" bodystart="381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_e_s_c_c_m___s_t_a_t_u_s_1gaf5a6b56e602e7d8730b86ffd0ec46938" prot="public" static="no">
        <name>AESCCM_STATUS_ERROR</name>
        <initializer>(-1)</initializer>
        <briefdescription>
<para>Generic error status code. </para>        </briefdescription>
        <detaileddescription>
<para>Functions return AESCCM_STATUS_ERROR if the function was not executed successfully and no more pertinent error code could be returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" line="389" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" bodystart="389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_e_s_c_c_m___s_t_a_t_u_s_1ga4c853c141d8abcf42fb2576611b7f55d" prot="public" static="no">
        <name>AESCCM_STATUS_UNDEFINEDCMD</name>
        <initializer>(-2)</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_a_e_s_c_c_m_8h_1ab43f29586baa2c11634bdd05b81f14fb" kindref="member">AESCCM_control()</ref> for undefined command codes. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_a_e_s_c_c_m_8h_1ab43f29586baa2c11634bdd05b81f14fb" kindref="member">AESCCM_control()</ref> returns AESCCM_STATUS_UNDEFINEDCMD if the control code is not recognized by the driver implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" line="398" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_e_s_c_c_m___s_t_a_t_u_s_1gaabf9f8e552b6a5a12f512d6c862f04fa" prot="public" static="no">
        <name>AESCCM_STATUS_RESOURCE_UNAVAILABLE</name>
        <initializer>(-3)</initializer>
        <briefdescription>
<para>An error status code returned if the hardware or software resource is currently unavailable. </para>        </briefdescription>
        <detaileddescription>
<para>AESCCM driver implementations may have hardware or software limitations on how many clients can simultaneously perform operations. This status code is returned if the mutual exclusion mechanism signals that an operation cannot currently be performed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" line="408" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_e_s_c_c_m___s_t_a_t_u_s_1gadf7ebf9930072745c454b0bf932d694b" prot="public" static="no">
        <name>AESCCM_STATUS_MAC_INVALID</name>
        <initializer>(-4)</initializer>
        <briefdescription>
<para>An error status code returned if the MAC provided by the application for a decryption operation does not match the one calculated during the operation. </para>        </briefdescription>
        <detaileddescription>
<para>This code is returned by <ref refid="_a_e_s_c_c_m_8h_1ae092228253d3a51ea081f99e9865de90" kindref="member">AESCCM_oneStepDecrypt()</ref> if the verification of the MAC fails. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" line="417" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" bodystart="417" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_a_e_s_c_c_m_8h_1a78b6801f7945db75dba63b9ca52e35e7" prot="public" static="no">
        <name>AESCCM_ReturnBehavior_</name>
        <enumvalue id="_a_e_s_c_c_m_8h_1a78b6801f7945db75dba63b9ca52e35e7ab768e7c12bd6bf9e87bfba1c6bf3d2a4" prot="public">
          <name>AESCCM_RETURN_BEHAVIOR_CALLBACK</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The function call will return immediately while the CCM operation goes on in the background. The registered callback function is called after the operation completes. The context the callback function is called (task, HWI, SWI) is implementation-dependent. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_e_s_c_c_m_8h_1a78b6801f7945db75dba63b9ca52e35e7a1761cf2c8bd972890a0193f772281a8c" prot="public">
          <name>AESCCM_RETURN_BEHAVIOR_BLOCKING</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The function call will block while the CCM operation goes on in the background. CCM operation results are available after the function returns. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_e_s_c_c_m_8h_1a78b6801f7945db75dba63b9ca52e35e7a8077fa385d151d93ed7762a998abd567" prot="public">
          <name>AESCCM_RETURN_BEHAVIOR_POLLING</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The function call will continuously poll a flag while CCM operation goes on in the background. CCM operation results are available after the function returns. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The way in which CCM function calls return after performing an encryption + authentication or decryption + verification operation. </para>        </briefdescription>
        <detaileddescription>
<para>Not all CCM operations exhibit the specified return behavor. Functions that do not require significant computation and cannot offload that computation to a background thread behave like regular functions. Which functions exhibit the specfied return behavior is not implementation dependent. Specifically, a software-backed implementation run on the same CPU as the application will emulate the return behavior while not actually offloading the computation to the background thread.</para><para>AESCCM functions exhibiting the specified return behavior have restrictions on the context from which they may be called.</para><para><table rows="4" cols="4"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para>Task </para></entry><entry thead="yes"><para>Hwi </para></entry><entry thead="yes"><para>Swi  </para></entry></row>
<row>
<entry thead="no"><para>AESCCM_RETURN_BEHAVIOR_CALLBACK </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry></row>
<row>
<entry thead="no"><para>AESCCM_RETURN_BEHAVIOR_BLOCKING </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para></para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para>AESCCM_RETURN_BEHAVIOR_POLLING </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" line="464" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" bodystart="464" bodyend="479"/>
      </memberdef>
      <memberdef kind="enum" id="_a_e_s_c_c_m_8h_1af82e82227d0d7f7973b5dbad21e4abf3" prot="public" static="no">
        <name>AESCCM_Mode_</name>
        <enumvalue id="_a_e_s_c_c_m_8h_1af82e82227d0d7f7973b5dbad21e4abf3a1366ac9470982aa8b1457e305df7e026" prot="public">
          <name>AESCCM_MODE_ENCRYPT</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_e_s_c_c_m_8h_1af82e82227d0d7f7973b5dbad21e4abf3a4f3b682868aaacf1a33856fa85543ae3" prot="public">
          <name>AESCCM_MODE_DECRYPT</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum for the direction of the CCM operation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" line="484" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" bodystart="484" bodyend="487"/>
      </memberdef>
      <memberdef kind="enum" id="_a_e_s_c_c_m_8h_1aa9ff80401c3afc57d002919ddf85f0f8" prot="public" static="no">
        <name>AESCCM_OperationType_</name>
        <enumvalue id="_a_e_s_c_c_m_8h_1aa9ff80401c3afc57d002919ddf85f0f8a1c0ce6f811d6c8d513027375449b9fc7" prot="public">
          <name>AESCCM_OPERATION_TYPE_ENCRYPT</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_e_s_c_c_m_8h_1aa9ff80401c3afc57d002919ddf85f0f8ab20c9152379db6153e39a74f09d0a874" prot="public">
          <name>AESCCM_OPERATION_TYPE_DECRYPT</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum for the operation types supported by the driver. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" line="545" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" bodystart="545" bodyend="548"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_a_e_s_c_c_m_8h_1a9fa86236c2237ed58f215cf8978e884c" prot="public" static="no">
        <type>struct <ref refid="struct_a_e_s_c_c_m___config__" kindref="compound">AESCCM_Config_</ref> *</type>
        <definition>typedef struct AESCCM_Config_* AESCCM_Handle</definition>
        <argsstring></argsstring>
        <name>AESCCM_Handle</name>
        <briefdescription>
<para>A handle that is returned from an <ref refid="_a_e_s_c_c_m_8h_1ac4784269a925110785148701b57e156d" kindref="member">AESCCM_open()</ref> call. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" line="441" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" bodystart="441" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_e_s_c_c_m_8h_1ac83005e1259b3e7131c6c2dfab1a9d7a" prot="public" static="no">
        <type>enum <ref refid="_a_e_s_c_c_m_8h_1a78b6801f7945db75dba63b9ca52e35e7" kindref="member">AESCCM_ReturnBehavior_</ref></type>
        <definition>typedef enum AESCCM_ReturnBehavior_  AESCCM_ReturnBehavior</definition>
        <argsstring></argsstring>
        <name>AESCCM_ReturnBehavior</name>
        <briefdescription>
<para>The way in which CCM function calls return after performing an encryption + authentication or decryption + verification operation. </para>        </briefdescription>
        <detaileddescription>
<para>Not all CCM operations exhibit the specified return behavor. Functions that do not require significant computation and cannot offload that computation to a background thread behave like regular functions. Which functions exhibit the specfied return behavior is not implementation dependent. Specifically, a software-backed implementation run on the same CPU as the application will emulate the return behavior while not actually offloading the computation to the background thread.</para><para>AESCCM functions exhibiting the specified return behavior have restrictions on the context from which they may be called.</para><para><table rows="4" cols="4"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para>Task </para></entry><entry thead="yes"><para>Hwi </para></entry><entry thead="yes"><para>Swi  </para></entry></row>
<row>
<entry thead="no"><para>AESCCM_RETURN_BEHAVIOR_CALLBACK </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry></row>
<row>
<entry thead="no"><para>AESCCM_RETURN_BEHAVIOR_BLOCKING </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para></para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para>AESCCM_RETURN_BEHAVIOR_POLLING </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" line="479" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_e_s_c_c_m_8h_1ad5869a468c1a71ef0aa2512df3790b56" prot="public" static="no">
        <type>enum <ref refid="_a_e_s_c_c_m_8h_1af82e82227d0d7f7973b5dbad21e4abf3" kindref="member">AESCCM_Mode_</ref></type>
        <definition>typedef enum AESCCM_Mode_  AESCCM_Mode</definition>
        <argsstring></argsstring>
        <name>AESCCM_Mode</name>
        <briefdescription>
<para>Enum for the direction of the CCM operation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" line="487" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_e_s_c_c_m_8h_1ae86e1437bafcb8ba242c051f19656887" prot="public" static="no">
        <type>struct <ref refid="struct_a_e_s_c_c_m___operation__" kindref="compound">AESCCM_Operation_</ref></type>
        <definition>typedef struct AESCCM_Operation_  AESCCM_Operation</definition>
        <argsstring></argsstring>
        <name>AESCCM_Operation</name>
        <briefdescription>
<para>Struct containing the parameters required for encrypting/decrypting and authenticating/verifying a message. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" line="540" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_e_s_c_c_m_8h_1ae29c65b66907d040950baee79e7363b7" prot="public" static="no">
        <type>enum <ref refid="_a_e_s_c_c_m_8h_1aa9ff80401c3afc57d002919ddf85f0f8" kindref="member">AESCCM_OperationType_</ref></type>
        <definition>typedef enum AESCCM_OperationType_  AESCCM_OperationType</definition>
        <argsstring></argsstring>
        <name>AESCCM_OperationType</name>
        <briefdescription>
<para>Enum for the operation types supported by the driver. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" line="548" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_e_s_c_c_m_8h_1a1ccb68f0b5b34d05c816711f47240f11" prot="public" static="no">
        <type>struct <ref refid="struct_a_e_s_c_c_m___config__" kindref="compound">AESCCM_Config_</ref></type>
        <definition>typedef struct AESCCM_Config_  AESCCM_Config</definition>
        <argsstring></argsstring>
        <name>AESCCM_Config</name>
        <briefdescription>
<para>AESCCM Global configuration. </para>        </briefdescription>
        <detaileddescription>
<para>The AESCCM_Config structure contains a set of pointers used to characterize the AESCCM driver implementation.</para><para>This structure needs to be defined before calling <ref refid="_a_e_s_c_c_m_8h_1a51982c7e9ace406edb69a0345f4c9dfc" kindref="member">AESCCM_init()</ref> and it must not be changed thereafter.</para><para><simplesect kind="see"><para><ref refid="_a_e_s_c_c_m_8h_1a51982c7e9ace406edb69a0345f4c9dfc" kindref="member">AESCCM_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" line="567" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_e_s_c_c_m_8h_1adfbf1fbc56aac864fe4953893361dcc1" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* AESCCM_CallbackFxn) (AESCCM_Handle handle, int_fast16_t returnValue, AESCCM_Operation *operation, AESCCM_OperationType operationType)</definition>
        <argsstring>)(AESCCM_Handle handle, int_fast16_t returnValue, AESCCM_Operation *operation, AESCCM_OperationType operationType)</argsstring>
        <name>AESCCM_CallbackFxn</name>
        <briefdescription>
<para>The definition of a callback function used by the AESCCM driver when used in <ref refid="_a_e_s_c_c_m_8h_1a78b6801f7945db75dba63b9ca52e35e7ab768e7c12bd6bf9e87bfba1c6bf3d2a4" kindref="member">AESCCM_RETURN_BEHAVIOR_CALLBACK</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the client that started the CCM operation.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>returnValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The result of the CCM operation. May contain an error code. Informs the application of why the callback function was called.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operation</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an operation struct.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operationType</parametername>
</parameternamelist>
<parameterdescription>
<para>This parameter determines which operation the callback refers to. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" line="584" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" bodystart="584" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_a_e_s_c_c_m_8h_1af04b016ddaadd78548993ba1eea34c07" prot="public" static="no">
        <type>struct <ref refid="struct_a_e_s_c_c_m___params__" kindref="compound">AESCCM_Params_</ref></type>
        <definition>typedef struct AESCCM_Params_  AESCCM_Params</definition>
        <argsstring></argsstring>
        <name>AESCCM_Params</name>
        <briefdescription>
<para>CCM Parameters. </para>        </briefdescription>
        <detaileddescription>
<para>CCM Parameters are used to with the <ref refid="_a_e_s_c_c_m_8h_1ac4784269a925110785148701b57e156d" kindref="member">AESCCM_open()</ref> call. Default values for these parameters are set using <ref refid="_a_e_s_c_c_m_8h_1ab48597e7c8931af81234c786efac7cee" kindref="member">AESCCM_Params_init()</ref>.</para><para><simplesect kind="see"><para><ref refid="_a_e_s_c_c_m_8h_1ab48597e7c8931af81234c786efac7cee" kindref="member">AESCCM_Params_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" line="606" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_a_e_s_c_c_m_8h_1a7057e1ce2ca8a0f7087a8a664ac3560d" prot="public" static="no" mutable="no">
        <type>const <ref refid="_a_e_s_c_c_m_8h_1af04b016ddaadd78548993ba1eea34c07" kindref="member">AESCCM_Params</ref></type>
        <definition>const AESCCM_Params AESCCM_defaultParams</definition>
        <argsstring></argsstring>
        <name>AESCCM_defaultParams</name>
        <briefdescription>
<para>Default AESCCM_Params structure. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="_a_e_s_c_c_m_8h_1ab48597e7c8931af81234c786efac7cee" kindref="member">AESCCM_Params_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" line="613" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_a_e_s_c_c_m_8h_1a51982c7e9ace406edb69a0345f4c9dfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AESCCM_init</definition>
        <argsstring>(void)</argsstring>
        <name>AESCCM_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This function initializes the CCM module. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The AESCCM_config structure must exist and be persistent before this function can be called. This function must also be called before any other CCM driver APIs. This function call does not modify any peripheral registers. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" line="623" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_c_m_8h_1ab48597e7c8931af81234c786efac7cee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AESCCM_Params_init</definition>
        <argsstring>(AESCCM_Params *params)</argsstring>
        <name>AESCCM_Params_init</name>
        <param>
          <type><ref refid="_a_e_s_c_c_m_8h_1af04b016ddaadd78548993ba1eea34c07" kindref="member">AESCCM_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to initialize the AESCCM_Params struct to its defaults. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>An pointer to AESCCM_Params structure for initialization</para></parameterdescription>
</parameteritem>
</parameterlist>
Defaults values are: returnBehavior = AESCCM_RETURN_BEHAVIOR_BLOCKING callbackFxn = NULL timeout = SemaphoreP_WAIT_FOREVER custom = NULL </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" line="637" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_c_m_8h_1ac4784269a925110785148701b57e156d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_a_e_s_c_c_m_8h_1a9fa86236c2237ed58f215cf8978e884c" kindref="member">AESCCM_Handle</ref></type>
        <definition>AESCCM_Handle AESCCM_open</definition>
        <argsstring>(uint_least8_t index, AESCCM_Params *params)</argsstring>
        <name>AESCCM_open</name>
        <param>
          <type>uint_least8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="_a_e_s_c_c_m_8h_1af04b016ddaadd78548993ba1eea34c07" kindref="member">AESCCM_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>This function opens a given CCM peripheral. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>CCM controller has been initialized using <ref refid="_a_e_s_c_c_m_8h_1a51982c7e9ace406edb69a0345f4c9dfc" kindref="member">AESCCM_init()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical peripheral number for the CCM indexed into the AESCCM_config table</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an parameter block, if NULL it will use default values.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An AESCCM_Handle on success or a NULL on an error or if it has been opened already.</para></simplesect>
<simplesect kind="see"><para><ref refid="_a_e_s_c_c_m_8h_1a51982c7e9ace406edb69a0345f4c9dfc" kindref="member">AESCCM_init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_a_e_s_c_c_m_8h_1a2cb2636c081846cfc81b801999a21ec5" kindref="member">AESCCM_close()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" line="656" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_c_m_8h_1a2cb2636c081846cfc81b801999a21ec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AESCCM_close</definition>
        <argsstring>(AESCCM_Handle handle)</argsstring>
        <name>AESCCM_close</name>
        <param>
          <type><ref refid="_a_e_s_c_c_m_8h_1a9fa86236c2237ed58f215cf8978e884c" kindref="member">AESCCM_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to close a CCM peripheral specified by the CCM handle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_a_e_s_c_c_m_8h_1ac4784269a925110785148701b57e156d" kindref="member">AESCCM_open()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A CCM handle returned from <ref refid="_a_e_s_c_c_m_8h_1ac4784269a925110785148701b57e156d" kindref="member">AESCCM_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_a_e_s_c_c_m_8h_1ac4784269a925110785148701b57e156d" kindref="member">AESCCM_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" line="667" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_c_m_8h_1ab43f29586baa2c11634bdd05b81f14fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t AESCCM_control</definition>
        <argsstring>(AESCCM_Handle handle, uint32_t cmd, void *args)</argsstring>
        <name>AESCCM_control</name>
        <param>
          <type><ref refid="_a_e_s_c_c_m_8h_1a9fa86236c2237ed58f215cf8978e884c" kindref="member">AESCCM_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Function performs implementation specific features on a given AESCCM_Handle. </para>        </briefdescription>
        <detaileddescription>
<para>Commands for AESCCM_control can originate from <ref refid="_a_e_s_c_c_m_8h" kindref="compound">AESCCM.h</ref> or from implementation specific AESCCM*.h (<emphasis><ref refid="_a_e_s_c_c_m_c_c26_x_x_8h" kindref="compound">AESCCMCC26XX.h</ref></emphasis>, <emphasis>AESCCMMSP432.h</emphasis>, etc.. ) files. While commands from <ref refid="_a_e_s_c_c_m_8h" kindref="compound">AESCCM.h</ref> are API portable across driver implementations, not all implementations may support all these commands. Conversely, commands from driver implementation specific AESCCM*.h files add unique driver capabilities but are not API portable across all AESCCM driver implementations.</para><para>Commands supported by <ref refid="_a_e_s_c_c_m_8h" kindref="compound">AESCCM.h</ref> follow an AESCCM_CMD_&lt;cmd&gt; naming convention.<linebreak/>
 Commands supported by AESCCM*.h follow an AESCCM*_CMD_&lt;cmd&gt; naming convention.<linebreak/>
 Each control command defines <bold>arg</bold> differently. The types of <bold>arg</bold> are documented with each command.</para><para>See <ref refid="group___a_e_s_c_c_m___c_m_d" kindref="compound">AESCCM_control command codes</ref> for command codes.</para><para>See <ref refid="group___a_e_s_c_c_m___s_t_a_t_u_s" kindref="compound">AESCCM_control return status codes</ref> for status codes.</para><para><simplesect kind="pre"><para><ref refid="_a_e_s_c_c_m_8h_1ac4784269a925110785148701b57e156d" kindref="member">AESCCM_open()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An AESCCM handle returned from <ref refid="_a_e_s_c_c_m_8h_1ac4784269a925110785148701b57e156d" kindref="member">AESCCM_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="_a_e_s_c_c_m_8h" kindref="compound">AESCCM.h</ref> or AESCCM*.h commands.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional R/W (read/write) command argument accompanied with cmd</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Implementation specific return codes. Negative values indicate unsuccessful operations.</para></simplesect>
<simplesect kind="see"><para><ref refid="_a_e_s_c_c_m_8h_1ac4784269a925110785148701b57e156d" kindref="member">AESCCM_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" line="706" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_c_m_8h_1a737c52bee6913123f4f1fa54c5c3c2a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AESCCM_Operation_init</definition>
        <argsstring>(AESCCM_Operation *operationStruct)</argsstring>
        <name>AESCCM_Operation_init</name>
        <param>
          <type><ref refid="_a_e_s_c_c_m_8h_1ae86e1437bafcb8ba242c051f19656887" kindref="member">AESCCM_Operation</ref> *</type>
          <declname>operationStruct</declname>
        </param>
        <briefdescription>
<para>Function to initialize an AESCCM_Operation struct to its defaults. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>operationStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an AESCCM_Operation structure for initialization</para></parameterdescription>
</parameteritem>
</parameterlist>
Defaults values are all zeros. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" line="718" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_c_m_8h_1a38264845fa8b2d9da3cebc4a45a78d0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t AESCCM_oneStepEncrypt</definition>
        <argsstring>(AESCCM_Handle handle, AESCCM_Operation *operationStruct)</argsstring>
        <name>AESCCM_oneStepEncrypt</name>
        <param>
          <type><ref refid="_a_e_s_c_c_m_8h_1a9fa86236c2237ed58f215cf8978e884c" kindref="member">AESCCM_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="_a_e_s_c_c_m_8h_1ae86e1437bafcb8ba242c051f19656887" kindref="member">AESCCM_Operation</ref> *</type>
          <declname>operationStruct</declname>
        </param>
        <briefdescription>
<para>Function to perform an AESCCM encryption + authentication operation in one call. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>None of the buffers provided as arguments may be altered by the application during an ongoing operation. Doing so can yield corrupted ciphertext or incorrect authentication.</para></simplesect>
<simplesect kind="pre"><para><ref refid="_a_e_s_c_c_m_8h_1ac4784269a925110785148701b57e156d" kindref="member">AESCCM_open()</ref> and <ref refid="_a_e_s_c_c_m_8h_1a737c52bee6913123f4f1fa54c5c3c2a0" kindref="member">AESCCM_Operation_init()</ref> have to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A CCM handle returned from <ref refid="_a_e_s_c_c_m_8h_1ac4784269a925110785148701b57e156d" kindref="member">AESCCM_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">operationStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a struct containing the parameters required to perform the operation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code</para></simplesect>
<simplesect kind="see"><para><ref refid="_a_e_s_c_c_m_8h_1ae092228253d3a51ea081f99e9865de90" kindref="member">AESCCM_oneStepDecrypt()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" line="736" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_s_c_c_m_8h_1ae092228253d3a51ea081f99e9865de90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t AESCCM_oneStepDecrypt</definition>
        <argsstring>(AESCCM_Handle handle, AESCCM_Operation *operationStruct)</argsstring>
        <name>AESCCM_oneStepDecrypt</name>
        <param>
          <type><ref refid="_a_e_s_c_c_m_8h_1a9fa86236c2237ed58f215cf8978e884c" kindref="member">AESCCM_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="_a_e_s_c_c_m_8h_1ae86e1437bafcb8ba242c051f19656887" kindref="member">AESCCM_Operation</ref> *</type>
          <declname>operationStruct</declname>
        </param>
        <briefdescription>
<para>Function to perform an AESCCM decryption + verification operation in one call. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>None of the buffers provided as arguments may be altered by the application during an ongoing operation. Doing so can yield corrupted plaintext or incorrectly failed verification.</para></simplesect>
<simplesect kind="pre"><para><ref refid="_a_e_s_c_c_m_8h_1ac4784269a925110785148701b57e156d" kindref="member">AESCCM_open()</ref> and <ref refid="_a_e_s_c_c_m_8h_1a737c52bee6913123f4f1fa54c5c3c2a0" kindref="member">AESCCM_Operation_init()</ref> have to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A CCM handle returned from <ref refid="_a_e_s_c_c_m_8h_1ac4784269a925110785148701b57e156d" kindref="member">AESCCM_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">operationStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a struct containing the parameters required to perform the operation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A status code</para></simplesect>
<simplesect kind="see"><para><ref refid="_a_e_s_c_c_m_8h_1a38264845fa8b2d9da3cebc4a45a78d0a" kindref="member">AESCCM_oneStepEncrypt()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h" line="754" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>AESCCM driver header. </para>    </briefdescription>
    <detaileddescription>
<para>============================================================================</para><para><simplesect kind="warning"><para>This is a beta API. It may change in future releases.</para></simplesect>
<heading level="1">Overview</heading>
</para><para>The Counter with CBC-MAC (CCM) mode of operation is a generic authenticated encryption block cipher mode. It can be used with any block cipher. AESCCM combines CBC-MAC with an AES block cipher in CTR mode of operation.</para><para>This combination of block cipher modes enables CCM to encrypt messages of any length and not only multiples of the block cipher block size.</para><para>CTR provides confidentiality. The defined application of CBC-MAC provides message integrity and authentication.</para><para>AESCCM has the following inputs and outputs:</para><para><table rows="10" cols="2"><caption>AES-CCM input and output parameters</caption>
<row>
<entry thead="yes"><para>Encryption</para></entry><entry thead="yes"><para>Decryption </para></entry></row>
<row>
<entry thead="yes"><para>Input </para></entry></row>
<row>
<entry thead="no"><para>Shared AES key</para></entry><entry thead="no"><para>Shared AES key </para></entry></row>
<row>
<entry thead="no"><para>Nonce</para></entry><entry thead="no"><para>Nonce </para></entry></row>
<row>
<entry thead="no"><para>Cleartext</para></entry><entry thead="no"><para>Ciphertext </para></entry></row>
<row>
<entry thead="no"><para></para></entry><entry thead="no"><para>MAC </para></entry></row>
<row>
<entry thead="no"><para>AAD (optional)</para></entry><entry thead="no"><para>AAD (optional) </para></entry></row>
<row>
<entry thead="yes"><para>Output </para></entry></row>
<row>
<entry thead="no"><para>Ciphertext</para></entry><entry thead="no"><para>Cleartext </para></entry></row>
<row>
<entry thead="no"><para>MAC</para></entry><entry thead="no"><para></para></entry></row>
</table>
</para><para>The AES key is a shared secret between the two parties and has a length between 128, 192, or 256 bits.</para><para>The nonce is generated by the party performing the authenticated encryption operation. Within the scope of any authenticated encryption key, the nonce value must be unique. That is, the set of nonce values used with any given key must not contain any duplicate values. Using the same nonce for two different messages encrypted with the same key destroys the security properties.</para><para>The length of the nonce determines the maximum number of messages that may be encrypted and authenticated before you must regenerate the key. Reasonable session key rotation schemes will regenerate the key before reaching this limit. There is a trade-off between the nonce-length and the maximum length of the plaintext to encrypt and authenticate per nonce. This is because CTR concatenates the nonce and an internal counter into one 16-byte IV. The counter is incremented after generating an AES-block-sized pseudo-random bitstream. This bitstream is XOR&apos;d with the plaintext. The counter would eventually roll over for a sufficiently long message. This is must not happen. Hence, the longer the nonce and the more messages you can send before needing to rotate the key, the shorter the lengths of invidual messages sent may be. The minimum and maximum nonce length defined by the CCM standard provide for both a reasonable number of messages before key rotation and a reasonable maximum message length. Check NIST SP 800-38C for details.</para><para>The optional additional authentication data (AAD) is authenticated but not encrypted. Thus, the AAD is not included in the AES-CCM output. It can be used to authenticate packet headers.</para><para>After the encryption operation, the ciphertext contains the encrypted data. The message authentication code (MAC) is also provided in encrypted form. The MAC can be seen as an encrypted fingerprint of the message header and content. Practically, the fact that the MAC is encrypted has no impact on the use of CCM from an application standpoint. It may be ignored as an implementation detail of CCM.</para><para><heading level="1">Usage</heading>
</para><para><heading level="2">Before starting a CCM operation</heading>
</para><para>Before starting a CCM operation, the application must do the following:<itemizedlist>
<listitem><para>Call <ref refid="_a_e_s_c_c_m_8h_1a51982c7e9ace406edb69a0345f4c9dfc" kindref="member">AESCCM_init()</ref> to initialize the driver</para></listitem><listitem><para>Call <ref refid="_a_e_s_c_c_m_8h_1ab48597e7c8931af81234c786efac7cee" kindref="member">AESCCM_Params_init()</ref> to initialize the AESCCM_Params to default values.</para></listitem><listitem><para>Modify the AESCCM_Params as desired</para></listitem><listitem><para>Call <ref refid="_a_e_s_c_c_m_8h_1ac4784269a925110785148701b57e156d" kindref="member">AESCCM_open()</ref> to open an instance of the driver</para></listitem><listitem><para>Initialize a CryptoKey. These opaque datastructures are representations of keying material and its storage. Depending on how the keying material is stored (RAM or flash, key store, key blob), the CryptoKey must be initialized differently. The AESCCM API can handle all types of CryptoKey. However, not all device-specific implementions support all types of CryptoKey. Devices without a key store will not support CryptoKeys with keying material stored in a key store for example. All devices support plaintext CryptoKeys.</para></listitem><listitem><para>Initialise the AESCCM_Operation using <ref refid="_a_e_s_c_c_m_8h_1a737c52bee6913123f4f1fa54c5c3c2a0" kindref="member">AESCCM_Operation_init()</ref> and set all length, key, and buffer fields.</para></listitem></itemizedlist>
</para><para><heading level="2">Starting a CCM operation</heading>
</para><para>The AESCCM_oneStepEncrypt and AESCCM_oneStepDecrypt functions do a CCM operation in a single call. They will always be the most highly optimized routines with the least overhead and the fastest runtime. However, they require all AAD and plaintext or ciphertext data to be available to the function at the start of the call. All devices support single call operations.</para><para>When performing a decryption operation with <ref refid="_a_e_s_c_c_m_8h_1ae092228253d3a51ea081f99e9865de90" kindref="member">AESCCM_oneStepDecrypt()</ref>, the MAC is automatically verified.</para><para><heading level="2">After the CCM operation completes</heading>
</para><para>After the CCM operation completes, the application should either start another operation or close the driver by calling <ref refid="_a_e_s_c_c_m_8h_1a2cb2636c081846cfc81b801999a21ec5" kindref="member">AESCCM_close()</ref></para><para><heading level="2">AESCCM Driver Configuration</heading>
</para><para>In order to use the AESCCM APIs, the application is required to provide device-specific AESCCM configuration in the Board.c file. The AESCCM driver interface defines a configuration data structure:</para><para><programlisting><codeline><highlight class="normal">typedef<sp/>struct<sp/>AESCCM_Config_<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*object;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><sp/><sp/><sp/>*hwAttrs;</highlight></codeline>
<codeline><highlight class="normal">}<sp/>AESCCM_Config;</highlight></codeline>
</programlisting></para><para>The application must declare an array of AESCCM_Config elements, named AESCCM_config[]. Each element of AESCCM_config[] must be populated with pointers to a device specific AESCCM driver implementation&apos;s driver object and hardware attributes. The hardware attributes define properties such as the AESCCM peripheral&apos;s base address. Each element in AESCCM_config[] corresponds to an AESCCM instance and none of the elements should have NULL pointers. There is no correlation between the index and the peripheral designation (such as AESCCM0 or AESCCM1). For example, it is possible to use AESCCM_config[0] for AESCCM1. Multiple drivers and driver instances may all access the same underlying hardware. This is transparent to the application. Mutual exclusion is performed automatically by the drivers as necessary.</para><para>Because the AESCCM configuration is very device dependent, you will need to check the doxygen for the device specific AESCCM implementation. There you will find a description of the AESCCM hardware attributes. Please also refer to the Board.c file of any of your examples to see the AESCCM configuration.</para><para><heading level="2">AESCCM Parameters</heading>
</para><para>The <ref refid="_a_e_s_c_c_m_8h_1af04b016ddaadd78548993ba1eea34c07" kindref="member">AESCCM_Params</ref> structure is passed to the <ref refid="_a_e_s_c_c_m_8h_1ac4784269a925110785148701b57e156d" kindref="member">AESCCM_open()</ref> call. If NULL is passed for the parameters, <ref refid="_a_e_s_c_c_m_8h_1ac4784269a925110785148701b57e156d" kindref="member">AESCCM_open()</ref> uses default parameters. A <ref refid="_a_e_s_c_c_m_8h_1af04b016ddaadd78548993ba1eea34c07" kindref="member">AESCCM_Params</ref> structure is initialized with default values by passing it to <ref refid="_a_e_s_c_c_m_8h_1ab48597e7c8931af81234c786efac7cee" kindref="member">AESCCM_Params_init()</ref>. Some of the AESCCM parameters are described below. To see brief descriptions of all the parameters, see <ref refid="_a_e_s_c_c_m_8h_1af04b016ddaadd78548993ba1eea34c07" kindref="member">AESCCM_Params</ref>.</para><para><heading level="2">Examples</heading>
</para><para>### Single call CCM encryption + authentication with plaintext CryptoKey in blocking return mode # <programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/AESCCM.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/types/cryptoKey/CryptoKey_Plaintext.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">AESCCM_Handle<sp/>handle;</highlight></codeline>
<codeline><highlight class="normal">CryptoKey<sp/>cryptoKey;</highlight></codeline>
<codeline><highlight class="normal">int_fast16_t<sp/>encryptionResult;</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>nonce[]<sp/>=<sp/>&quot;Thisisanonce&quot;;</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>aad[]<sp/>=<sp/>&quot;This<sp/>string<sp/>will<sp/>be<sp/>authenticated<sp/>but<sp/>not<sp/>encrypted.&quot;;</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>plaintext[]<sp/>=<sp/>&quot;This<sp/>string<sp/>will<sp/>be<sp/>encrypted<sp/>and<sp/>authenticated.&quot;;</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>mac[16];</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>ciphertext[sizeof(plaintext)];</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>keyingMaterial[32]<sp/>=<sp/>{0x00,<sp/>0x01,<sp/>0x02,<sp/>0x03,<sp/>0x04,<sp/>0x05,<sp/>0x06,<sp/>0x07,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x08,<sp/>0x09,<sp/>0x0A,<sp/>0x0B,<sp/>0x0C,<sp/>0x0D,<sp/>0x0E,<sp/>0x0F,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x10,<sp/>0x11,<sp/>0x12,<sp/>0x13,<sp/>0x14,<sp/>0x15,<sp/>0x16,<sp/>0x17,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x18,<sp/>0x19,<sp/>0x1A,<sp/>0x1B,<sp/>0x1C,<sp/>0x1D,<sp/>0x1E,<sp/>0x1F}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">handle<sp/>=<sp/>AESCCM_open(0,<sp/>NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(handle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">CryptoKeyPlaintext_initKey(&amp;cryptoKey,<sp/>keyingMaterial,<sp/>sizeof(keyingMaterial));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AESCCM_Operation<sp/>operation;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AESCCM_Operation_init(&amp;operation);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.key<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;cryptoKey;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.aad<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>aad;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.aadLength<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(aad);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.input<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>plaintext;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.output<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ciphertext;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.inputLength<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(plaintext);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.nonce<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>nonce;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.nonceLength<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(nonce);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.mac<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>mac;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.macLength<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(mac);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">encryptionResult<sp/>=<sp/>AESCCM_oneStepEncrypt(handle,<sp/>&amp;operation);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(encryptionResult<sp/>!=<sp/>AESCCM_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">AESCCM_close(handle);</highlight></codeline>
</programlisting></para><para><heading level="3">Single call CCM decryption + verification with plaintext CryptoKey in callback return mode</heading>
</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/AESCCM.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyPlaintext.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>following<sp/>test<sp/>vector<sp/>is<sp/>Packet<sp/>Vector<sp/>1<sp/>from<sp/>RFC<sp/>3610<sp/>of<sp/>the<sp/>IETF.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">uint8_t<sp/>nonce[]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{0x00,<sp/>0x00,<sp/>0x00,<sp/>0x03,<sp/>0x02,<sp/>0x01,<sp/>0x00,<sp/>0xA0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xA1,<sp/>0xA2,<sp/>0xA3,<sp/>0xA4,<sp/>0xA5};</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>aad[]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{0x00,<sp/>0x01,<sp/>0x02,<sp/>0x03,<sp/>0x04,<sp/>0x05,<sp/>0x06,<sp/>0x07};</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>mac[]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{0x17,<sp/>0xE8,<sp/>0xD1,<sp/>0x2C,<sp/>0xFD,<sp/>0xF9,<sp/>0x26,<sp/>0xE0};</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>ciphertext[]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{0x58,<sp/>0x8C,<sp/>0x97,<sp/>0x9A,<sp/>0x61,<sp/>0xC6,<sp/>0x63,<sp/>0xD2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xF0,<sp/>0x66,<sp/>0xD0,<sp/>0xC2,<sp/>0xC0,<sp/>0xF9,<sp/>0x89,<sp/>0x80,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x6D,<sp/>0x5F,<sp/>0x6B,<sp/>0x61,<sp/>0xDA,<sp/>0xC3,<sp/>0x84};</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>keyingMaterial[]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{0xC0,<sp/>0xC1,<sp/>0xC2,<sp/>0xC3,<sp/>0xC4,<sp/>0xC5,<sp/>0xC6,<sp/>0xC7,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xC8,<sp/>0xC9,<sp/>0xCA,<sp/>0xCB,<sp/>0xCC,<sp/>0xCD,<sp/>0xCE,<sp/>0xCF};</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>plaintext[sizeof(ciphertext)];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>plaintext<sp/>should<sp/>be<sp/>the<sp/>following<sp/>after<sp/>the<sp/>decryption<sp/>operation:</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/>{0x08,<sp/>0x09,<sp/>0x0A,<sp/>0x0B,<sp/>0x0C,<sp/>0x0D,<sp/>0x0E,<sp/>0x0F,</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/>0x10,<sp/>0x11,<sp/>0x12,<sp/>0x13,<sp/>0x14,<sp/>0x15,<sp/>0x16,<sp/>0x17,</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/>0x18,<sp/>0x19,<sp/>0x1A,<sp/>0x1B,<sp/>0x1C,<sp/>0x1D,<sp/>0x1E}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>ccmCallback(AESCCM_Handle<sp/>handle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_fast16_t<sp/>returnValue,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AESCCM_Operation<sp/>*operation,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AESCCM_OperationType<sp/>operationType)<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(returnValue<sp/>!=<sp/>AESCCM_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">AESCCM_Operation<sp/>operation;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>ccmStartFunction(void)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AESCCM_Handle<sp/>handle;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AESCCM_Params<sp/>params;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CryptoKey<sp/>cryptoKey;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int_fast16_t<sp/>decryptionResult;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AESCCM_Params_init(&amp;params);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params.returnBehavior<sp/>=<sp/>AESCCM_RETURN_BEHAVIOR_CALLBACK;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params.callbackFxn<sp/>=<sp/>ccmCallback;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>AESCCM_open(0,<sp/>&amp;params);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(handle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CryptoKeyPlaintext_initKey(&amp;cryptoKey,<sp/>keyingMaterial,<sp/>sizeof(keyingMaterial));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AESCCM_Operation_init(&amp;operation);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.key<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;cryptoKey;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.aad<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>aad;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.aadLength<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(aad);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.input<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>plaintext;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.output<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ciphertext;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.inputLength<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(plaintext);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.nonce<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>nonce;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.nonceLength<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(nonce);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.mac<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>mac;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>operation.macLength<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(mac);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>decryptionResult<sp/>=<sp/>AESCCM_oneStepDecrypt(handle,<sp/>&amp;operation);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(decryptionResult<sp/>!=<sp/>AESCCM_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>do<sp/>other<sp/>things<sp/>while<sp/>CCM<sp/>operation<sp/>completes<sp/>in<sp/>the<sp/>background</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017-2018,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="322"><highlight class="preprocessor">#ifndef<sp/>ti_drivers_AESCCM__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_AESCCM__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_crypto_key_8h" kindref="compound">ti/drivers/cryptoutils/cryptokey/CryptoKey.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="352" refid="group___a_e_s_c_c_m___c_o_n_t_r_o_l_1gaf2480c175d3fe21007a789c7b453f9c6" refkind="member"><highlight class="preprocessor">#define<sp/>AESCCM_CMD_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="366" refid="group___a_e_s_c_c_m___c_o_n_t_r_o_l_1ga92006b2b0e406614ca650c88b5d393ef" refkind="member"><highlight class="preprocessor">#define<sp/>AESCCM_STATUS_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="381" refid="group___a_e_s_c_c_m___s_t_a_t_u_s_1gafde7b16d8daa5643d3d9e4c0ed9fe60d" refkind="member"><highlight class="preprocessor">#define<sp/>AESCCM_STATUS_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="group___a_e_s_c_c_m___s_t_a_t_u_s_1gaf5a6b56e602e7d8730b86ffd0ec46938" refkind="member"><highlight class="preprocessor">#define<sp/>AESCCM_STATUS_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="398" refid="group___a_e_s_c_c_m___s_t_a_t_u_s_1ga4c853c141d8abcf42fb2576611b7f55d" refkind="member"><highlight class="preprocessor">#define<sp/>AESCCM_STATUS_UNDEFINEDCMD<sp/><sp/><sp/><sp/>(-2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="408" refid="group___a_e_s_c_c_m___s_t_a_t_u_s_1gaabf9f8e552b6a5a12f512d6c862f04fa" refkind="member"><highlight class="preprocessor">#define<sp/>AESCCM_STATUS_RESOURCE_UNAVAILABLE<sp/>(-3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="417" refid="group___a_e_s_c_c_m___s_t_a_t_u_s_1gadf7ebf9930072745c454b0bf932d694b" refkind="member"><highlight class="preprocessor">#define<sp/>AESCCM_STATUS_MAC_INVALID<sp/>(-4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="comment">/*<sp/>Add<sp/>AESCCM_CMD_&lt;commands&gt;<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="441" refid="_a_e_s_c_c_m_8h_1a9fa86236c2237ed58f215cf8978e884c" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_e_s_c_c_m___config__" kindref="compound">AESCCM_Config_</ref><sp/><sp/><sp/><sp/>*<ref refid="_a_e_s_c_c_m_8h_1a9fa86236c2237ed58f215cf8978e884c" kindref="member">AESCCM_Handle</ref>;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="464" refid="_a_e_s_c_c_m_8h_1a78b6801f7945db75dba63b9ca52e35e7" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_a_e_s_c_c_m_8h_1a78b6801f7945db75dba63b9ca52e35e7" kindref="member">AESCCM_ReturnBehavior_</ref><sp/>{</highlight></codeline>
<codeline lineno="465" refid="_a_e_s_c_c_m_8h_1a78b6801f7945db75dba63b9ca52e35e7ab768e7c12bd6bf9e87bfba1c6bf3d2a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_c_m_8h_1a78b6801f7945db75dba63b9ca52e35e7ab768e7c12bd6bf9e87bfba1c6bf3d2a4" kindref="member">AESCCM_RETURN_BEHAVIOR_CALLBACK</ref><sp/>=<sp/>1,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="471" refid="_a_e_s_c_c_m_8h_1a78b6801f7945db75dba63b9ca52e35e7a1761cf2c8bd972890a0193f772281a8c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_c_m_8h_1a78b6801f7945db75dba63b9ca52e35e7a1761cf2c8bd972890a0193f772281a8c" kindref="member">AESCCM_RETURN_BEHAVIOR_BLOCKING</ref><sp/>=<sp/>2,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="475" refid="_a_e_s_c_c_m_8h_1a78b6801f7945db75dba63b9ca52e35e7a8077fa385d151d93ed7762a998abd567" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_c_m_8h_1a78b6801f7945db75dba63b9ca52e35e7a8077fa385d151d93ed7762a998abd567" kindref="member">AESCCM_RETURN_BEHAVIOR_POLLING</ref><sp/><sp/>=<sp/>4,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="479"><highlight class="normal">}<sp/><ref refid="_a_e_s_c_c_m_8h_1ac83005e1259b3e7131c6c2dfab1a9d7a" kindref="member">AESCCM_ReturnBehavior</ref>;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="484" refid="_a_e_s_c_c_m_8h_1af82e82227d0d7f7973b5dbad21e4abf3" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_a_e_s_c_c_m_8h_1af82e82227d0d7f7973b5dbad21e4abf3" kindref="member">AESCCM_Mode_</ref><sp/>{</highlight></codeline>
<codeline lineno="485" refid="_a_e_s_c_c_m_8h_1af82e82227d0d7f7973b5dbad21e4abf3a1366ac9470982aa8b1457e305df7e026" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_c_m_8h_1af82e82227d0d7f7973b5dbad21e4abf3a1366ac9470982aa8b1457e305df7e026" kindref="member">AESCCM_MODE_ENCRYPT</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="486" refid="_a_e_s_c_c_m_8h_1af82e82227d0d7f7973b5dbad21e4abf3a4f3b682868aaacf1a33856fa85543ae3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_c_m_8h_1af82e82227d0d7f7973b5dbad21e4abf3a4f3b682868aaacf1a33856fa85543ae3" kindref="member">AESCCM_MODE_DECRYPT</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="487"><highlight class="normal">}<sp/><ref refid="_a_e_s_c_c_m_8h_1ad5869a468c1a71ef0aa2512df3790b56" kindref="member">AESCCM_Mode</ref>;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="493" refid="struct_a_e_s_c_c_m___operation__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_e_s_c_c_m___operation__" kindref="compound">AESCCM_Operation_</ref><sp/>{</highlight></codeline>
<codeline lineno="494" refid="struct_a_e_s_c_c_m___operation___1a4faa8bb2f5bde3a1b08ded6a4ce5c870" refkind="member"><highlight class="normal"><sp/><sp/><sp/><ref refid="struct_crypto_key__" kindref="compound">CryptoKey</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_a_e_s_c_c_m___operation___1a4faa8bb2f5bde3a1b08ded6a4ce5c870" kindref="member">key</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="495" refid="struct_a_e_s_c_c_m___operation___1a5a9c40dfe7ebea68d5cf4cb5b64f5633" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_a_e_s_c_c_m___operation___1a5a9c40dfe7ebea68d5cf4cb5b64f5633" kindref="member">aad</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="499" refid="struct_a_e_s_c_c_m___operation___1ab5a489735a60f441cdf2bf0d8cc023cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_a_e_s_c_c_m___operation___1ab5a489735a60f441cdf2bf0d8cc023cc" kindref="member">input</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="504" refid="struct_a_e_s_c_c_m___operation___1ad3c7cb588d3a602099f7d02567bd7d53" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_a_e_s_c_c_m___operation___1ad3c7cb588d3a602099f7d02567bd7d53" kindref="member">output</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="510" refid="struct_a_e_s_c_c_m___operation___1af5a74b09fd2ac801fad031ad0d2ea7ec" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_a_e_s_c_c_m___operation___1af5a74b09fd2ac801fad031ad0d2ea7ec" kindref="member">nonce</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="516" refid="struct_a_e_s_c_c_m___operation___1a2e45eeaf67ac8d2585df9118c8517c1a" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_a_e_s_c_c_m___operation___1a2e45eeaf67ac8d2585df9118c8517c1a" kindref="member">mac</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="522" refid="struct_a_e_s_c_c_m___operation___1af15aadb222181602d3ea4aeaa5131667" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_e_s_c_c_m___operation___1af15aadb222181602d3ea4aeaa5131667" kindref="member">aadLength</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="526" refid="struct_a_e_s_c_c_m___operation___1aafd82727d4b13bdaa4ab3b443b5fea18" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_e_s_c_c_m___operation___1aafd82727d4b13bdaa4ab3b443b5fea18" kindref="member">inputLength</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="530" refid="struct_a_e_s_c_c_m___operation___1a6706670b0bb8aa43371c1a0407b1fe09" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_e_s_c_c_m___operation___1a6706670b0bb8aa43371c1a0407b1fe09" kindref="member">nonceLength</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="533" refid="struct_a_e_s_c_c_m___operation___1a30bf2f5c9110b68f34c43d945e726486" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_e_s_c_c_m___operation___1a30bf2f5c9110b68f34c43d945e726486" kindref="member">macLength</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="536" refid="struct_a_e_s_c_c_m___operation___1a5ced2bd4491b2728ad479fe7d05a8637" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_e_s_c_c_m___operation___1a5ced2bd4491b2728ad479fe7d05a8637" kindref="member">nonceInternallyGenerated</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="540"><highlight class="normal">}<sp/><ref refid="_a_e_s_c_c_m_8h_1ae86e1437bafcb8ba242c051f19656887" kindref="member">AESCCM_Operation</ref>;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="545" refid="_a_e_s_c_c_m_8h_1aa9ff80401c3afc57d002919ddf85f0f8" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_a_e_s_c_c_m_8h_1aa9ff80401c3afc57d002919ddf85f0f8" kindref="member">AESCCM_OperationType_</ref><sp/>{</highlight></codeline>
<codeline lineno="546" refid="_a_e_s_c_c_m_8h_1aa9ff80401c3afc57d002919ddf85f0f8a1c0ce6f811d6c8d513027375449b9fc7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_c_m_8h_1aa9ff80401c3afc57d002919ddf85f0f8a1c0ce6f811d6c8d513027375449b9fc7" kindref="member">AESCCM_OPERATION_TYPE_ENCRYPT</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="547" refid="_a_e_s_c_c_m_8h_1aa9ff80401c3afc57d002919ddf85f0f8ab20c9152379db6153e39a74f09d0a874" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_c_m_8h_1aa9ff80401c3afc57d002919ddf85f0f8ab20c9152379db6153e39a74f09d0a874" kindref="member">AESCCM_OPERATION_TYPE_DECRYPT</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="548"><highlight class="normal">}<sp/><ref refid="_a_e_s_c_c_m_8h_1ae29c65b66907d040950baee79e7363b7" kindref="member">AESCCM_OperationType</ref>;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="561" refid="struct_a_e_s_c_c_m___config__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_e_s_c_c_m___config__" kindref="compound">AESCCM_Config_</ref><sp/>{</highlight></codeline>
<codeline lineno="563" refid="struct_a_e_s_c_c_m___config___1a7194732f542e372cc92694fc99f246a7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_a_e_s_c_c_m___config___1a7194732f542e372cc92694fc99f246a7" kindref="member">object</ref>;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="566" refid="struct_a_e_s_c_c_m___config___1a7f373c5abe362d9c90bb91d002a4feae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_a_e_s_c_c_m___config___1a7f373c5abe362d9c90bb91d002a4feae" kindref="member">hwAttrs</ref>;</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}<sp/><ref refid="_a_e_s_c_c_m_8h_1a1ccb68f0b5b34d05c816711f47240f11" kindref="member">AESCCM_Config</ref>;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="584" refid="_a_e_s_c_c_m_8h_1adfbf1fbc56aac864fe4953893361dcc1" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_a_e_s_c_c_m_8h_1adfbf1fbc56aac864fe4953893361dcc1" kindref="member">AESCCM_CallbackFxn</ref>)<sp/>(AESCCM_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_fast16_t<sp/>returnValue,</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_e_s_c_c_m___operation__" kindref="compound">AESCCM_Operation</ref><sp/>*operation,</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_c_m_8h_1ae29c65b66907d040950baee79e7363b7" kindref="member">AESCCM_OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="597" refid="struct_a_e_s_c_c_m___params__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a_e_s_c_c_m___params__" kindref="compound">AESCCM_Params_</ref><sp/>{</highlight></codeline>
<codeline lineno="598" refid="struct_a_e_s_c_c_m___params___1a2810df38dc5033d1bbd8f4fd858a0bcf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_c_m_8h_1ac83005e1259b3e7131c6c2dfab1a9d7a" kindref="member">AESCCM_ReturnBehavior</ref><sp/><sp/><sp/><ref refid="struct_a_e_s_c_c_m___params___1a2810df38dc5033d1bbd8f4fd858a0bcf" kindref="member">returnBehavior</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="599" refid="struct_a_e_s_c_c_m___params___1a00055666e47a8ad90c153aeaa7ede2f5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_e_s_c_c_m_8h_1adfbf1fbc56aac864fe4953893361dcc1" kindref="member">AESCCM_CallbackFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_e_s_c_c_m___params___1a00055666e47a8ad90c153aeaa7ede2f5" kindref="member">callbackFxn</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="600" refid="struct_a_e_s_c_c_m___params___1ab081ec6dce5b8428cb4d1e66537b6070" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_a_e_s_c_c_m___params___1ab081ec6dce5b8428cb4d1e66537b6070" kindref="member">timeout</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="603" refid="struct_a_e_s_c_c_m___params___1a1bdcfd34ea5750a9ebe8c6f1286eaebe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_a_e_s_c_c_m___params___1a1bdcfd34ea5750a9ebe8c6f1286eaebe" kindref="member">custom</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="606"><highlight class="normal">}<sp/><ref refid="_a_e_s_c_c_m_8h_1af04b016ddaadd78548993ba1eea34c07" kindref="member">AESCCM_Params</ref>;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_a_e_s_c_c_m___params__" kindref="compound">AESCCM_Params</ref><sp/><ref refid="_a_e_s_c_c_m_8h_1a7057e1ce2ca8a0f7087a8a664ac3560d" kindref="member">AESCCM_defaultParams</ref>;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_e_s_c_c_m_8h_1a51982c7e9ace406edb69a0345f4c9dfc" kindref="member">AESCCM_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_e_s_c_c_m_8h_1ab48597e7c8931af81234c786efac7cee" kindref="member">AESCCM_Params_init</ref>(<ref refid="struct_a_e_s_c_c_m___params__" kindref="compound">AESCCM_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal">AESCCM_Handle<sp/><ref refid="_a_e_s_c_c_m_8h_1ac4784269a925110785148701b57e156d" kindref="member">AESCCM_open</ref>(uint_least8_t<sp/>index,<sp/><ref refid="struct_a_e_s_c_c_m___params__" kindref="compound">AESCCM_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_e_s_c_c_m_8h_1a2cb2636c081846cfc81b801999a21ec5" kindref="member">AESCCM_close</ref>(AESCCM_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal">int_fast16_t<sp/><ref refid="_a_e_s_c_c_m_8h_1ab43f29586baa2c11634bdd05b81f14fb" kindref="member">AESCCM_control</ref>(AESCCM_Handle<sp/>handle,<sp/>uint32_t<sp/>cmd,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*args);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_e_s_c_c_m_8h_1a737c52bee6913123f4f1fa54c5c3c2a0" kindref="member">AESCCM_Operation_init</ref>(<ref refid="struct_a_e_s_c_c_m___operation__" kindref="compound">AESCCM_Operation</ref><sp/>*operationStruct);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal">int_fast16_t<sp/><ref refid="_a_e_s_c_c_m_8h_1a38264845fa8b2d9da3cebc4a45a78d0a" kindref="member">AESCCM_oneStepEncrypt</ref>(AESCCM_Handle<sp/>handle,<sp/><ref refid="struct_a_e_s_c_c_m___operation__" kindref="compound">AESCCM_Operation</ref><sp/>*operationStruct);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal">int_fast16_t<sp/><ref refid="_a_e_s_c_c_m_8h_1ae092228253d3a51ea081f99e9865de90" kindref="member">AESCCM_oneStepDecrypt</ref>(AESCCM_Handle<sp/>handle,<sp/><ref refid="struct_a_e_s_c_c_m___operation__" kindref="compound">AESCCM_Operation</ref><sp/>*operationStruct);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_AESCCM__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/AESCCM.h"/>
  </compounddef>
</doxygen>
