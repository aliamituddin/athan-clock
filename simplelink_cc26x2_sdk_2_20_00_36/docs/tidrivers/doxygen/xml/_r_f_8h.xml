<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_r_f_8h" kind="file" language="C++">
    <compoundname>RF.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">ti/drivers/dpl/ClockP.h</includes>
    <includes local="no">ti/drivers/dpl/SemaphoreP.h</includes>
    <includes local="no">ti/devices/DeviceFamily.h</includes>
    <includes local="no">DeviceFamily_constructPath(driverlib/rf_common_cmd.h)</includes>
    <includes local="no">DeviceFamily_constructPath(driverlib/rf_prop_cmd.h)</includes>
    <includes local="no">DeviceFamily_constructPath(driverlib/rf_ble_cmd.h)</includes>
    <incdepgraph>
      <node id="552">
        <label>DeviceFamily_constructPath(driverlib/rf_prop_cmd.h)</label>
      </node>
      <node id="547">
        <label>stdbool.h</label>
      </node>
      <node id="553">
        <label>DeviceFamily_constructPath(driverlib/rf_ble_cmd.h)</label>
      </node>
      <node id="546">
        <label>stdint.h</label>
      </node>
      <node id="549">
        <label>ti/drivers/dpl/SemaphoreP.h</label>
      </node>
      <node id="550">
        <label>ti/devices/DeviceFamily.h</label>
      </node>
      <node id="548">
        <label>ti/drivers/dpl/ClockP.h</label>
      </node>
      <node id="545">
        <label>RF.h</label>
        <link refid="_r_f_8h"/>
        <childnode refid="546" relation="include">
        </childnode>
        <childnode refid="547" relation="include">
        </childnode>
        <childnode refid="548" relation="include">
        </childnode>
        <childnode refid="549" relation="include">
        </childnode>
        <childnode refid="550" relation="include">
        </childnode>
        <childnode refid="551" relation="include">
        </childnode>
        <childnode refid="552" relation="include">
        </childnode>
        <childnode refid="553" relation="include">
        </childnode>
      </node>
      <node id="551">
        <label>DeviceFamily_constructPath(driverlib/rf_common_cmd.h)</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_r_f___tx_power_table___value" prot="public">RF_TxPowerTable_Value</innerclass>
    <innerclass refid="struct_r_f___tx_power_table___entry" prot="public">RF_TxPowerTable_Entry</innerclass>
    <innerclass refid="struct_r_f___mode" prot="public">RF_Mode</innerclass>
    <innerclass refid="union_r_f___radio_setup" prot="public">RF_RadioSetup</innerclass>
    <innerclass refid="union_r_f___info_val" prot="public">RF_InfoVal</innerclass>
    <innerclass refid="struct_r_f___schedule_map_element" prot="public">RF_ScheduleMapElement</innerclass>
    <innerclass refid="struct_r_f___schedule_map" prot="public">RF_ScheduleMap</innerclass>
    <innerclass refid="struct_r_f___params" prot="public">RF_Params</innerclass>
    <innerclass refid="struct_r_f_c_c26_x_x___h_w_attrs_v2" prot="public">RFCC26XX_HWAttrsV2</innerclass>
    <innerclass refid="struct_r_f___schedule_cmd_params" prot="public">RF_ScheduleCmdParams</innerclass>
    <innerclass refid="struct_r_f___access_params" prot="public">RF_AccessParams</innerclass>
    <innerclass refid="struct_r_f___rat_config_capture" prot="public">RF_RatConfigCapture</innerclass>
    <innerclass refid="struct_r_f___rat_config_compare" prot="public">RF_RatConfigCompare</innerclass>
    <innerclass refid="struct_r_f___rat_config_output" prot="public">RF_RatConfigOutput</innerclass>
      <sectiondef kind="user-defined">
      <header>RF Core Events</header>
      <description><para><anchor id="_r_f_8h_1RF_Core_Events"/> Events originating on the RF core and caused during command execution. They are aliases for the corresponding interrupt flags. RF Core Events are command-specific and are explained in the Technical Reference Manual.</para><para><simplesect kind="see"><para><ref refid="_r_f_8h_1a2b0ee444fcb74917df94eefea804ecbb" kindref="member">RF_postCmd()</ref>, <ref refid="_r_f_8h_1a91c1cb2508311f822acbc08ace568a83" kindref="member">RF_pendCmd()</ref>, <ref refid="_r_f_8h_1a248bebdd1d0bd6e0812cf18116987e54" kindref="member">RF_runCmd()</ref> </para></simplesect>
</para></description>
      <memberdef kind="define" id="_r_f_8h_1aa1534b443f03187f07f55b0198306a27" prot="public" static="no">
        <name>RF_EventCmdDone</name>
        <initializer>(1 &lt;&lt; 0)</initializer>
        <briefdescription>
<para>A radio operation command in a chain finished. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="676" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="676" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a2d60db886271cf8e08c7b6b2f5e534f1" prot="public" static="no">
        <name>RF_EventLastCmdDone</name>
        <initializer>(1 &lt;&lt; 1)</initializer>
        <briefdescription>
<para>A stand-alone radio operation command or the last radio operation command in a chain finished. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="677" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="677" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a735a67f18008c9748b1abc23f8d8aa31" prot="public" static="no">
        <name>RF_EventFGCmdDone</name>
        <initializer>(1 &lt;&lt; 2)</initializer>
        <briefdescription>
<para>A IEEE-mode radio operation command in a chain finished. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="678" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="678" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1aa5bab6ef487e169803c147e47211a7b2" prot="public" static="no">
        <name>RF_EventLastFGCmdDone</name>
        <initializer>(1 &lt;&lt; 3)</initializer>
        <briefdescription>
<para>A stand-alone IEEE-mode radio operation command or the last command in a chain finished. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="679" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="679" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a4e8f8b70a9cd745561251d61940880f6" prot="public" static="no">
        <name>RF_EventTxDone</name>
        <initializer>(1 &lt;&lt; 4)</initializer>
        <briefdescription>
<para>Packet transmitted. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="680" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="680" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1ab1ab01acc148654e8b3dfe42d64785b1" prot="public" static="no">
        <name>RF_EventTXAck</name>
        <initializer>(1 &lt;&lt; 5)</initializer>
        <briefdescription>
<para>ACK packet transmitted. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="681" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="681" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a8421bd3a69743f088ac534f85b099a8d" prot="public" static="no">
        <name>RF_EventTxCtrl</name>
        <initializer>(1 &lt;&lt; 6)</initializer>
        <briefdescription>
<para>Control packet transmitted. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="682" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="682" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1af15e72a260f7c2d3d659ad76cb876f9a" prot="public" static="no">
        <name>RF_EventTxCtrlAck</name>
        <initializer>(1 &lt;&lt; 7)</initializer>
        <briefdescription>
<para>Acknowledgement received on a transmitted control packet. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="683" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="683" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a00c6a2c502c6b73310d7168d65134728" prot="public" static="no">
        <name>RF_EventTxCtrlAckAck</name>
        <initializer>(1 &lt;&lt; 8)</initializer>
        <briefdescription>
<para>Acknowledgement received on a transmitted control packet, and acknowledgement transmitted for that packet. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="684" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="684" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a2c71299952c2e6f95973f15cd1910012" prot="public" static="no">
        <name>RF_EventTxRetrans</name>
        <initializer>(1 &lt;&lt; 9)</initializer>
        <briefdescription>
<para>Packet retransmitted. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="685" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="685" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a2fe4925d81a1b1cf0f081801ccdea5c5" prot="public" static="no">
        <name>RF_EventTxEntryDone</name>
        <initializer>(1 &lt;&lt; 10)</initializer>
        <briefdescription>
<para>Tx queue data entry state changed to Finished. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="686" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="686" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a595798fcb9995769a5887839567c8ca7" prot="public" static="no">
        <name>RF_EventTxBufferChange</name>
        <initializer>(1 &lt;&lt; 11)</initializer>
        <briefdescription>
<para>A buffer change is complete. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="687" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="687" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a8096e854b7ba95ee45054acf8c5d36e4" prot="public" static="no">
        <name>RF_EventRxOk</name>
        <initializer>(1 &lt;&lt; 16)</initializer>
        <briefdescription>
<para>Packet received with CRC OK, payload, and not to be ignored. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="688" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="688" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a0c295aa9a2851efa0ec6309ebab52dc8" prot="public" static="no">
        <name>RF_EventRxNOk</name>
        <initializer>(1 &lt;&lt; 17)</initializer>
        <briefdescription>
<para>Packet received with CRC error. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="689" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="689" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a2dbeb507eec591b320a4b06f36ce8814" prot="public" static="no">
        <name>RF_EventRxIgnored</name>
        <initializer>(1 &lt;&lt; 18)</initializer>
        <briefdescription>
<para>Packet received with CRC OK, but to be ignored. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="690" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="690" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a4df2d5bf213600e1bce1c03a1ea950dd" prot="public" static="no">
        <name>RF_EventRxEmpty</name>
        <initializer>(1 &lt;&lt; 19)</initializer>
        <briefdescription>
<para>Packet received with CRC OK, not to be ignored, no payload. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="691" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="691" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1afee6f48a825ba7e030ece03eb242e6c2" prot="public" static="no">
        <name>RF_EventRxCtrl</name>
        <initializer>(1 &lt;&lt; 20)</initializer>
        <briefdescription>
<para>Control packet received with CRC OK, not to be ignored. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="692" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="692" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a3c29608b6caa9e380407ee0b3df371b8" prot="public" static="no">
        <name>RF_EventRxCtrlAck</name>
        <initializer>(1 &lt;&lt; 21)</initializer>
        <briefdescription>
<para>Control packet received with CRC OK, not to be ignored, then ACK sent. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="693" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="693" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a8ddaa54ac8e8721e7e1cee7f0c07c3c1" prot="public" static="no">
        <name>RF_EventRxBufFull</name>
        <initializer>(1 &lt;&lt; 22)</initializer>
        <briefdescription>
<para>Packet received that did not fit in the Rx queue. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="694" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="694" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a7051110a4a1fdd459866195be774a2b0" prot="public" static="no">
        <name>RF_EventRxEntryDone</name>
        <initializer>(1 &lt;&lt; 23)</initializer>
        <briefdescription>
<para>Rx queue data entry changing state to Finished. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="695" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="695" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a8ac187c129b68b4311898a5464aa87e5" prot="public" static="no">
        <name>RF_EventDataWritten</name>
        <initializer>(1 &lt;&lt; 24)</initializer>
        <briefdescription>
<para>Data written to partial read Rx buffer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="696" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="696" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1aa9c1eb19ce791f4f9c4b917e10fbabdd" prot="public" static="no">
        <name>RF_EventNDataWritten</name>
        <initializer>(1 &lt;&lt; 25)</initializer>
        <briefdescription>
<para>Specified number of bytes written to partial read Rx buffer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="697" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="697" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1af2db331d93e28cdafc4367497a2f6f89" prot="public" static="no">
        <name>RF_EventRxAborted</name>
        <initializer>(1 &lt;&lt; 26)</initializer>
        <briefdescription>
<para>Packet reception stopped before packet was done. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="698" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="698" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1aaba4e22e27b9ac26244b02c7cfd657d0" prot="public" static="no">
        <name>RF_EventRxCollisionDetected</name>
        <initializer>(1 &lt;&lt; 27)</initializer>
        <briefdescription>
<para>A collision was indicated during packet reception. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="699" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="699" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1ae5cb277f5a7a23bf1d7e6405f3e2253e" prot="public" static="no">
        <name>RF_EventModulesUnlocked</name>
        <initializer>(1 &lt;&lt; 29)</initializer>
        <briefdescription>
<para>As part of the boot process, the CM0 has opened access to RF core modules and memories. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="700" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="700" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1af872a5a1a47d7401499d7826eea8da98" prot="public" static="no">
        <name>RF_EventInternalError</name>
        <initializer>(uint32_t)(1 &lt;&lt; 31)</initializer>
        <briefdescription>
<para>Internal error observed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="701" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="701" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a83edee28803f1b2addc0f8458d0cc657" prot="public" static="no">
        <name>RF_EventMdmSoft</name>
        <initializer>0x0000002000000000</initializer>
        <briefdescription>
<para>Synchronization word detected (MDMSOFT interrupt flag) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="702" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="702" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>RF Driver Events</header>
      <description><para><anchor id="_r_f_8h_1RF_Driver_Events"/> Event flags generated by the RF Driver. </para></description>
      <memberdef kind="define" id="_r_f_8h_1ae6d21f9806a7482a0f324f98bb83aac0" prot="public" static="no">
        <name>RF_EventCmdCancelled</name>
        <initializer>0x1000000000000000</initializer>
        <briefdescription>
<para>Command cancelled before it was started. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="712" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="712" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a95a0bf832c19fbdce2c164144ad265ee" prot="public" static="no">
        <name>RF_EventCmdAborted</name>
        <initializer>0x2000000000000000</initializer>
        <briefdescription>
<para>Aprubt command termination caused by <ref refid="_r_f_8h_1aabe22ceae13a372be4ba135318aa849a" kindref="member">RF_cancelCmd()</ref> or <ref refid="_r_f_8h_1ae3ff5c614f4a63cb4e79c90f9229149a" kindref="member">RF_flushCmd()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="713" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="713" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1ac68cfb0f9c26d275ad990f5da9e6b91f" prot="public" static="no">
        <name>RF_EventCmdStopped</name>
        <initializer>0x4000000000000000</initializer>
        <briefdescription>
<para>Graceful command termination caused by <ref refid="_r_f_8h_1aabe22ceae13a372be4ba135318aa849a" kindref="member">RF_cancelCmd()</ref> or <ref refid="_r_f_8h_1ae3ff5c614f4a63cb4e79c90f9229149a" kindref="member">RF_flushCmd()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="714" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="714" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1ab0302093e17c587cc4bf2c928c79960e" prot="public" static="no">
        <name>RF_EventRatCh</name>
        <initializer>0x0800000000000000</initializer>
        <briefdescription>
<para>A user-programmable RAT channel triggered an event. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="715" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="715" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a0e6d5e7d3760a65ba37d8f26823e9a0a" prot="public" static="no">
        <name>RF_EventPowerUp</name>
        <initializer>0x0400000000000000</initializer>
        <briefdescription>
<para>RF power up event. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This event is deprecated. Use <ref refid="_r_f_8h_1acfa72a48f45abb7ea8e1595ce6606b7aa931a28d9524188efd2f45aa1e09dca0a" kindref="member">RF_ClientEventPowerUpFinished</ref> instead. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="716" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="716" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1aa6b858b8b383210049fa3f17dcd95fac" prot="public" static="no">
        <name>RF_EventError</name>
        <initializer>0x0200000000000000</initializer>
        <briefdescription>
<para>Event flag used for error callback functions to indicate an error. See <ref refid="struct_r_f___params_1ab7be231b23fab2503b8c54b474fba74d" kindref="member">RF_Params::pErrCb</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="717" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="717" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a267ffc8a08c3ce6ffa82b704dba641be" prot="public" static="no">
        <name>RF_EventCmdPreempted</name>
        <initializer>0x0100000000000000</initializer>
        <briefdescription>
<para>Command preempted by another command with higher priority. Applies only to multi-client applications. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="718" column="11" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="718" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Control codes for driver configuration</header>
      <description><para><anchor id="_r_f_8h_1RF_CTRL"/> Control codes are used in <ref refid="_r_f_8h_1aa31772d56afb197fd812d24aa6f07f1b" kindref="member">RF_control()</ref>. </para></description>
      <memberdef kind="define" id="_r_f_8h_1a24096530a8da4bde84275bc9c76b2cee" prot="public" static="no">
        <name>RF_CTRL_SET_INACTIVITY_TIMEOUT</name>
        <initializer>0</initializer>
        <briefdescription>
<para>Control code used by RF_control to set inactivity timeout. </para>        </briefdescription>
        <detaileddescription>
<para>Setting this control allows RF to power down the radio upon completion of a radio command after a specified timeout period (in us) With this control code <bold>arg</bold> is a pointer to the timeout variable and returns RF_StatSuccess. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="737" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="737" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a74d367afdca187785b17c59b31d1e89a" prot="public" static="no">
        <name>RF_CTRL_UPDATE_SETUP_CMD</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Control code used by RF_control to update setup command. </para>        </briefdescription>
        <detaileddescription>
<para>Setting this control notifies RF that the setup command is to be updated, so that RF will take proper actions when executing the next setup command. Note the updated setup command will take effect in the next power up cycle when RF executes the setup command. Prior to updating the setup command, user should make sure all pending commands have completed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="747" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="747" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a32bd63d8617c2fde41bbc30d1e8f0db5" prot="public" static="no">
        <name>RF_CTRL_SET_POWERUP_DURATION_MARGIN</name>
        <initializer>2</initializer>
        <briefdescription>
<para>Control code used by RF_control to set powerup duration margin. </para>        </briefdescription>
        <detaileddescription>
<para>Setting this control updates the powerup duration margin. Default is RF_DEFAULT_POWER_UP_MARGIN. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="753" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="753" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1adaa68f9c55d604a2228c897fd08b075c" prot="public" static="no">
        <name>RF_CTRL_SET_RAT_RTC_ERR_TOL_VAL</name>
        <initializer>3</initializer>
        <briefdescription>
<para>Control code used by RF_control to set max error tolerence for RAT/RTC. </para>        </briefdescription>
        <detaileddescription>
<para>Setting this control updates the error tol for how frequently the CMD_RAT_SYNC_STOP is sent. Default is RF_DEFAULT_RAT_RTC_ERR_TOL_IN_US (5 us) Client is recommeneded to change this setting before sending any commands. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="761" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="761" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a5b7345d53c66e3168216234046359823" prot="public" static="no">
        <name>RF_CTRL_SET_POWER_MGMT</name>
        <initializer>4</initializer>
        <briefdescription>
<para>Control code used by RF_control to set power management. </para>        </briefdescription>
        <detaileddescription>
<para>Setting this control configures RF driver to enable or disable power management. By default power management is enabled. If disabled, once RF core wakes up, RF driver will not go to standby and will not power down RF core. To configure power management, use this control to pass a parameter value of 0 to disable power management, and pass a parameter value of 1 to re-enable power management. This control is valid for dual-mode code only. Setting this control when using single-mode code has no effect (power management always enabled). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="773" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="773" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a428377f902e968efba9f506376c09740" prot="public" static="no">
        <name>RF_CTRL_SET_HWI_PRIORITY</name>
        <initializer>5</initializer>
        <briefdescription>
<para>Control code used by RF_control to set the hardware interrupt priority level of the RF driver. </para>        </briefdescription>
        <detaileddescription>
<para>This control code sets the hardware interrupt priority level that is used by the RF driver. Valid values are INT_PRI_LEVEL1 (highest) until INT_PRI_LEVEL7 (lowest). The default interrupt priority is set in the board support file. The default value is -1 which means &quot;lowest possible priority&quot;.</para><para>When using the TI-RTOS kernel, INT_PRI_LEVEL0 is reserved for zero-latency interrupts and must not be used.</para><para>Execute this control code only while the RF core is powered down and the RF driver command queue is empty. This is usually the case after calling <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref>. Changing the interrupt priority level while the RF driver is active will result in RF_StatBusyError being returned.</para><para>Example: <programlisting><codeline><highlight class="normal">#include<sp/>DeviceFamily_constructPath(driverlib/interrupt.h)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int32_t<sp/>hwiPriority<sp/>=<sp/>INT_PRI_LEVEL5;</highlight></codeline>
<codeline><highlight class="normal">RF_control(rfHandle,<sp/>RF_CTRL_SET_HWI_PRIORITY,<sp/>&amp;hwiPriority);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="795" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="795" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a325d55f02f7e3acddce7e44bab71e2de" prot="public" static="no">
        <name>RF_CTRL_SET_SWI_PRIORITY</name>
        <initializer>6</initializer>
        <briefdescription>
<para>Control code used by RF_control to set the software interrupt priority level of the RF driver. </para>        </briefdescription>
        <detaileddescription>
<para>This control code sets the software interrupt priority level that is used by the RF driver. Valid values are integers starting at 0 (lowest) until <computeroutput>Swi_numPriorities - 1</computeroutput> (highest). The default interrupt priority is set in the board support file. The default value is 0 which means means &quot;lowest possible priority&quot;.</para><para>Execute this control code only while the RF core is powered down and the RF driver command queue is empty. This is usually the case after calling <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref>. Changing the interrupt priority level while the RF driver is active will result in RF_StatBusyError being returned.</para><para>Example: <programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/sysbios/knl/Swi.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>highest<sp/>possible<sp/>priority</highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>swiPriority<sp/>=<sp/>~0;</highlight></codeline>
<codeline><highlight class="normal">RF_control(rfHandle,<sp/>RF_CTRL_SET_SWI_PRIORITY,<sp/>&amp;swiPriority);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="817" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="817" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1ae58d79d3513ee745bcbeffae50731107" prot="public" static="no">
        <name>RF_CTRL_SET_AVAILABLE_RAT_CHANNELS_MASK</name>
        <initializer>7</initializer>
        <briefdescription>
<para>Control code used by RF_control to mask the available RAT channels manually. </para>        </briefdescription>
        <detaileddescription>
<para>This control code can be used to manually disallow/allow access to certain RAT channels from the RAT APIs. A typical use case is when a RAT channel is programmed through chained radio operations, and hence is used outside the scope of the RF driver. By disallowing access to this channel one can prevent collision between the automatic channel allocation through <ref refid="_r_f_8h_1af26945dca21f0742e7e978af6e176fea" kindref="member">RF_ratCompare()</ref>/<ref refid="_r_f_8h_1a513fd2cb2616e901d9f7a638ae9b7772" kindref="member">RF_ratCapture()</ref> and the direct configuration through <ref refid="_r_f_8h_1a2b0ee444fcb74917df94eefea804ecbb" kindref="member">RF_postCmd()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="827" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="827" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>TX Power Table defines</header>
      <memberdef kind="define" id="_r_f_8h_1aa3c3699366e0ac3271098ca9ec140002" prot="public" static="no">
        <name>RF_TxPowerTable_MIN_DBM</name>
        <initializer>-128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Refers to the the minimum available power in dBm when accessing a power table.</para><para><simplesect kind="see"><para><ref refid="_r_f_8h_1a8b8022d01ade500a5cd6bd46b9bc8d26" kindref="member">RF_TxPowerTable_findValue()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="841" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="841" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a689c0791e8141ea53d814dde2e7e0217" prot="public" static="no">
        <name>RF_TxPowerTable_MAX_DBM</name>
        <initializer>126</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Refers to the the maximum available power in dBm when accessing a power table.</para><para><simplesect kind="see"><para><ref refid="_r_f_8h_1a8b8022d01ade500a5cd6bd46b9bc8d26" kindref="member">RF_TxPowerTable_findValue()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="849" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="849" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1aeacd75e63906befa8ca215a9779da3c4" prot="public" static="no">
        <name>RF_TxPowerTable_INVALID_DBM</name>
        <initializer>127</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Refers to an invalid power level in a TX power table.</para><para><simplesect kind="see"><para><ref refid="_r_f_8h_1a93d89aa05a52d9427b5dd2a84cc2d3a3" kindref="member">RF_TxPowerTable_findPowerLevel()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="856" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="856" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a6a7214e79d17615ac34efbad207ca33f" prot="public" static="no">
        <name>RF_TxPowerTable_INVALID_VALUE</name>
        <initializer>0x3fffff</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Refers to an invalid power value in a TX power table.</para><para>This is the raw value part of a TX power configuration. In order to check whether a given power configuration is valid, do:</para><para><programlisting><codeline><highlight class="normal">RF_TxPowerTable_Value<sp/>value<sp/>=<sp/>...;</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(value.rawValue<sp/>==<sp/>RF_TxPowerTable_INVALID_VALUE)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>error,<sp/>value<sp/>not<sp/>valid</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>A TX power table is always terminated by an invalid power configuration.</para><para><simplesect kind="see"><para><ref refid="_r_f_8h_1aed02cc74cc7da5d2be9c0fb68ab5efc3" kindref="member">RF_getTxPower()</ref>, <ref refid="_r_f_8h_1a8b8022d01ade500a5cd6bd46b9bc8d26" kindref="member">RF_TxPowerTable_findValue</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="875" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="875" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a7c926278bbbb8d6559765dce2557489b" prot="public" static="no">
        <name>RF_TxPowerTable_TERMINATION_ENTRY</name>
        <initializer>{ .power = <ref refid="_r_f_8h_1aeacd75e63906befa8ca215a9779da3c4" kindref="member">RF_TxPowerTable_INVALID_DBM</ref>, .value = { .rawValue = <ref refid="_r_f_8h_1a6a7214e79d17615ac34efbad207ca33f" kindref="member">RF_TxPowerTable_INVALID_VALUE</ref>, .paType = <ref refid="_r_f_8h_1ac51c0cef00a3f230e4e73ccd00a503b8aecb8f811a5580e7156d0059686e0ea7f" kindref="member">RF_TxPowerTable_DefaultPA</ref> } }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Marks the last entry in a TX power table.</para><para>In order to use <ref refid="_r_f_8h_1a8b8022d01ade500a5cd6bd46b9bc8d26" kindref="member">RF_TxPowerTable_findValue()</ref> and <ref refid="_r_f_8h_1a93d89aa05a52d9427b5dd2a84cc2d3a3" kindref="member">RF_TxPowerTable_findPowerLevel()</ref>, every power table must be terminated by a RF_TxPowerTable_TERMINATION_ENTRY:</para><para><programlisting><codeline><highlight class="normal">RF_TxPowerTable_Entry<sp/>txPowerTable[]<sp/>=</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>20,<sp/><sp/>RF_TxPowerTable_HIGH_PA_ENTRY(1,<sp/>2,<sp/>3)<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>...<sp/>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>RF_TxPowerTable_TERMINATION_ENTRY</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="892" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="892" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a3065b167970585be2df0e92fc8a74c5d" prot="public" static="no">
        <name>RF_TxPowerTable_DEFAULT_PA_ENTRY</name>
        <param><defname>bias</defname></param>
        <param><defname>gain</defname></param>
        <param><defname>boost</defname></param>
        <param><defname>coefficient</defname></param>
        <initializer>{ .rawValue = ((bias) &lt;&lt; 0) | ((gain) &lt;&lt; 6) | ((boost) &lt;&lt; 8) | ((coefficient) &lt;&lt; 9), .paType = <ref refid="_r_f_8h_1ac51c0cef00a3f230e4e73ccd00a503b8aecb8f811a5580e7156d0059686e0ea7f" kindref="member">RF_TxPowerTable_DefaultPA</ref> }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a TX power table entry for the default PA.</para><para>The values for <emphasis>bias</emphasis>, <emphasis>gain</emphasis>, <emphasis>boost</emphasis> and <emphasis>coefficient</emphasis> are usually measured by Texas Instruments for a specific front-end configuration. They can then be obtained from SmartRFStudio. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="901" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="901" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a7369eba160dd93c59f8d8a287780125a" prot="public" static="no">
        <name>RF_TxPowerTable_HIGH_PA_ENTRY</name>
        <param><defname>bias</defname></param>
        <param><defname>ibboost</defname></param>
        <param><defname>boost</defname></param>
        <param><defname>coefficient</defname></param>
        <param><defname>ldotrim</defname></param>
        <initializer>{ .rawValue = ((bias) &lt;&lt; 0) | ((ibboost) &lt;&lt; 6) | ((boost) &lt;&lt; 8) | ((coefficient) &lt;&lt; 9) | ((ldotrim) &lt;&lt; 16), .paType = <ref refid="_r_f_8h_1ac51c0cef00a3f230e4e73ccd00a503b8af828b6a1f4d544e598912b10f8ce9954" kindref="member">RF_TxPowerTable_HighPA</ref> }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a TX power table entry for the High-power PA.</para><para>The values for <emphasis>bias</emphasis>, <emphasis>ibboost</emphasis>, <emphasis>boost</emphasis>, <emphasis>coefficient</emphasis> and <emphasis>ldoTrim</emphasis> are usually measured by Texas Instruments for a specific front-end configuration. They can then be obtained from SmartRFStudio. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="910" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="910" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Other defines</header>
      <memberdef kind="define" id="_r_f_8h_1a40e933adc8b5b1c03133451361c5505b" prot="public" static="no">
        <name>RF_GET_RSSI_ERROR_VAL</name>
        <initializer>(-128)</initializer>
        <briefdescription>
<para>Error return value for <ref refid="_r_f_8h_1ac3fe0d39243fb6bbefe0216d958a6779" kindref="member">RF_getRssi()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="920" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="920" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1aacfd2e3e3a2596605cc8b182df438b2f" prot="public" static="no">
        <name>RF_CMDHANDLE_FLUSH_ALL</name>
        <initializer>(-1)</initializer>
        <briefdescription>
<para>RF command handle to flush all RF commands. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="921" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="921" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1ad2e517d9efabde3a1868a274ed0f683b" prot="public" static="no">
        <name>RF_ALLOC_ERROR</name>
        <initializer>(-2)</initializer>
        <briefdescription>
<para>RF command or RAT channel allocation error. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="922" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="922" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a6986912a3081f0df9873a9b953e363ee" prot="public" static="no">
        <name>RF_SCHEDULE_CMD_ERROR</name>
        <initializer>(-3)</initializer>
        <briefdescription>
<para>RF command schedule error. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="923" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="923" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a96593487f5b6bc397d3986a195ecd52f" prot="public" static="no">
        <name>RF_ERROR_RAT_PROG</name>
        <initializer>(-255)</initializer>
        <briefdescription>
<para>A rat channel could not be programmed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="924" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="924" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a86f899115073dc30d7b528cb0e12a9f1" prot="public" static="no">
        <name>RF_ERROR_INVALID_RFMODE</name>
        <initializer>(-256)</initializer>
        <briefdescription>
<para>Invalid <ref refid="struct_r_f___mode" kindref="compound">RF_Mode</ref>. Used in error callback. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="925" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="925" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a40a0b1b81a2bebefb91b952d750634dc" prot="public" static="no">
        <name>RF_ERROR_CMDFS_SYNTH_PROG</name>
        <initializer>(-257)</initializer>
        <briefdescription>
<para>Synthesizer error with CMD_FS. Used in error callback. If this error occurred in error callback, user needs to resend CMD_FS to recover. See the device&apos;s errata for more details. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="926" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="926" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a37a38c0dc13a2ce547335e861f70d051" prot="public" static="no">
        <name>RF_NUM_SCHEDULE_ACCESS_ENTRIES</name>
        <initializer>2</initializer>
        <briefdescription>
<para>Number of access request entries. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="928" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="928" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1af6c29118d59b89ae5fe77128943034ac" prot="public" static="no">
        <name>RF_NUM_SCHEDULE_COMMAND_ENTRIES</name>
        <initializer>8</initializer>
        <briefdescription>
<para>Number of scheduled command entries. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="929" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="929" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a00c51d569ca050a4ca082b524bbfb924" prot="public" static="no">
        <name>RF_NUM_SCHEDULE_MAP_ENTRIES</name>
        <initializer>(<ref refid="_r_f_8h_1a37a38c0dc13a2ce547335e861f70d051" kindref="member">RF_NUM_SCHEDULE_ACCESS_ENTRIES</ref> + <ref refid="_r_f_8h_1af6c29118d59b89ae5fe77128943034ac" kindref="member">RF_NUM_SCHEDULE_COMMAND_ENTRIES</ref>)</initializer>
        <briefdescription>
<para>Number of schedule map entries. This is the sum of access request and scheduled command entries. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="930" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="930" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a5afbf118199c4d690ca365f8f10ce303" prot="public" static="no">
        <name>RF_SCH_MAP_CURRENT_CMD_OFFSET</name>
        <initializer><ref refid="_r_f_8h_1a37a38c0dc13a2ce547335e861f70d051" kindref="member">RF_NUM_SCHEDULE_ACCESS_ENTRIES</ref></initializer>
        <briefdescription>
<para>Offset of the current command entry in the schedule map. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="931" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="931" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1ae47095b012cc1b8135736b1df8f3bb8f" prot="public" static="no">
        <name>RF_SCH_MAP_PENDING_CMD_OFFSET</name>
        <initializer>(<ref refid="_r_f_8h_1a5afbf118199c4d690ca365f8f10ce303" kindref="member">RF_SCH_MAP_CURRENT_CMD_OFFSET</ref> + 1)</initializer>
        <briefdescription>
<para>Offset of the irst pending command entry in the schedule map. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="932" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="932" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a4585d547dce0622e2407fea2d2a4bb4f" prot="public" static="no">
        <name>RF_ABORT_PREEMPTION</name>
        <initializer>(1&lt;&lt;2)</initializer>
        <briefdescription>
<para>Used with <ref refid="_r_f_8h_1aabe22ceae13a372be4ba135318aa849a" kindref="member">RF_cancelCmd()</ref> to provoke subscription to RadioFreeCallback. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="934" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="934" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a8357151872adc734a1e9ef74999b8710" prot="public" static="no">
        <name>RF_ABORT_GRACEFULLY</name>
        <initializer>(1&lt;&lt;0)</initializer>
        <briefdescription>
<para>Used with <ref refid="_r_f_8h_1aabe22ceae13a372be4ba135318aa849a" kindref="member">RF_cancelCmd()</ref> for graceful command termination. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="935" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="935" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a0bc9d4802427e91001d40cec7e20164f" prot="public" static="no">
        <name>RF_SCH_CMD_EXECUTION_TIME_UNKNOWN</name>
        <initializer>0</initializer>
        <briefdescription>
<para>For unknown execution time for RF scheduler. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="937" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="937" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a59a68b973702e21f5a0f30f357f1e247" prot="public" static="no">
        <name>RF_RAT_ANY_CHANNEL</name>
        <initializer>(-1)</initializer>
        <briefdescription>
<para>To be used within the channel configuration structure. Allocate any of the available channels. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="939" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="939" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a3cf51703068e6f00d46f78ef14a6b7ff" prot="public" static="no">
        <name>RF_RAT_TICKS_PER_US</name>
        <initializer>4</initializer>
        <briefdescription>
<para>Radio timer (RAT) ticks per microsecond. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="940" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="940" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1af0fbfd98528830da6556b8a8c6d60bd8" prot="public" static="no">
        <name>RF_convertUsToRatTicks</name>
        <param><defname>microseconds</defname></param>
        <initializer>((microseconds) * (<ref refid="_r_f_8h_1a3cf51703068e6f00d46f78ef14a6b7ff" kindref="member">RF_RAT_TICKS_PER_US</ref>))</initializer>
        <briefdescription>
<para>Converts a duration given in <emphasis>microseconds</emphasis> into radio timer (RAT) ticks. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="945" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="945" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1aabead042beafa5e5347f1e7b003202f2" prot="public" static="no">
        <name>RF_convertMsToRatTicks</name>
        <param><defname>milliseconds</defname></param>
        <initializer>((milliseconds) * 1000 * (<ref refid="_r_f_8h_1a3cf51703068e6f00d46f78ef14a6b7ff" kindref="member">RF_RAT_TICKS_PER_US</ref>))</initializer>
        <briefdescription>
<para>Converts a duration given in <emphasis>milliseconds</emphasis> into radio timer (RAT) ticks. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="951" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="951" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1af3e94acb7fe950698e19e5c07775cee0" prot="public" static="no">
        <name>RF_convertRatTicksToUs</name>
        <param><defname>ticks</defname></param>
        <initializer>((ticks) / (<ref refid="_r_f_8h_1a3cf51703068e6f00d46f78ef14a6b7ff" kindref="member">RF_RAT_TICKS_PER_US</ref>))</initializer>
        <briefdescription>
<para>Converts a duration given in radio timer (RAT) <emphasis>ticks</emphasis> into microseconds. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="957" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="957" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_r_f_8h_1a8c812053bf4dfc87370d92157ea3878d" prot="public" static="no">
        <name>RF_convertRatTicksToMs</name>
        <param><defname>ticks</defname></param>
        <initializer>((ticks) / (1000 * (<ref refid="_r_f_8h_1a3cf51703068e6f00d46f78ef14a6b7ff" kindref="member">RF_RAT_TICKS_PER_US</ref>)))</initializer>
        <briefdescription>
<para>Converts a duration given in radio timer (RAT) <emphasis>ticks</emphasis> into milliseconds. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="963" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="963" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_r_f_8h_1ac51c0cef00a3f230e4e73ccd00a503b8" prot="public" static="no">
        <name>RF_TxPowerTable_PAType</name>
        <enumvalue id="_r_f_8h_1ac51c0cef00a3f230e4e73ccd00a503b8aecb8f811a5580e7156d0059686e0ea7f" prot="public">
          <name>RF_TxPowerTable_DefaultPA</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Default PA. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1ac51c0cef00a3f230e4e73ccd00a503b8af828b6a1f4d544e598912b10f8ce9954" prot="public">
          <name>RF_TxPowerTable_HighPA</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>High-power PA. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Selects a power amplifier path in a TX power value. </para>        </briefdescription>
        <detaileddescription>
<para>RF_TxPowerTable_PAType selects one of the available power amplifiers on the RF core. It is usually included in a <ref refid="struct_r_f___tx_power_table___value" kindref="compound">RF_TxPowerTable_Value</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1023" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="1023" bodyend="1026"/>
      </memberdef>
      <memberdef kind="enum" id="_r_f_8h_1ae5f9a893d178e64e6d0a7a783ea06e32" prot="public" static="no">
        <name>RF_Priority</name>
        <enumvalue id="_r_f_8h_1ae5f9a893d178e64e6d0a7a783ea06e32a5d716915abbe5a6fad3469c339f4db15" prot="public">
          <name>RF_PriorityHighest</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Highest priority. Only use this for urgent commands. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1ae5f9a893d178e64e6d0a7a783ea06e32a8d14673dbb643f2e9571fb5e34aad23d" prot="public">
          <name>RF_PriorityHigh</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>High priority. Use this for time-critical commands in synchronous protocols. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1ae5f9a893d178e64e6d0a7a783ea06e32a301d2e5af295d52039b52709952a1c47" prot="public">
          <name>RF_PriorityNormal</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Default priority. Use this in single-client applications. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Scheduling priority of RF operation commands. </para>        </briefdescription>
        <detaileddescription>
<para>When multiple RF driver instances are used at the same time, commands from different clients may overlap. If an RF operation with a higher priority than the currently running operation is scheduled by <ref refid="_r_f_8h_1a5e7f25943b5f3942bf4c09cb87f9aa76" kindref="member">RF_scheduleCmd()</ref>, then the running operation is interrupted.</para><para>In single-client applications, RF_PriorityNormal should be used. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1071" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="1071" bodyend="1075"/>
      </memberdef>
      <memberdef kind="enum" id="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988f" prot="public" static="no">
        <name>RF_Stat</name>
        <enumvalue id="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988faa79a13241903199d3bc25c8f06407de9" prot="public">
          <name>RF_StatBusyError</name>
          <briefdescription>
<para>Command not executed because RF driver is busy. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988fa80848b887667038bbfa4a2d14e83b193" prot="public">
          <name>RF_StatRadioInactiveError</name>
          <briefdescription>
<para>Command not executed because RF core is powered down. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988fa612e247f325ff085321b8e243f6b1d3d" prot="public">
          <name>RF_StatCmdDoneError</name>
          <briefdescription>
<para>Command finished with an error. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988face124dc75bad005452467d6f29351301" prot="public">
          <name>RF_StatInvalidParamsError</name>
          <briefdescription>
<para>Function was called with an invalid parameter. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988fadaf0ab5384fae480d81dcd10a13ef1b5" prot="public">
          <name>RF_StatCmdEnded</name>
          <briefdescription>
<para>Cmd is found in the pool but was already ended. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988fac071b8de44aabb8e2354432ce1146b86" prot="public">
          <name>RF_StatError</name>
          <initializer>= 0x80</initializer>
          <briefdescription>
<para>General error specifier. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988faa110d04edae5a85a12906d729f97de87" prot="public">
          <name>RF_StatCmdDoneSuccess</name>
          <briefdescription>
<para>Command finished with success. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988fabf33d4930fd89cd5ca80220da258d31c" prot="public">
          <name>RF_StatCmdSch</name>
          <briefdescription>
<para>Command successfully scheduled for execution. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988faa98bd78e437864464cdb2aca1d3e024d" prot="public">
          <name>RF_StatSuccess</name>
          <briefdescription>
<para>Function finished with success. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Status codes for various RF driver functions. </para>        </briefdescription>
        <detaileddescription>
<para>RF_Stat is reported as return value for RF driver functions which execute direct and immediate commands. Such commands are executed by <ref refid="_r_f_8h_1aafce617271300f2bee1a52ebda6d654e" kindref="member">RF_runDirectCmd()</ref> and <ref refid="_r_f_8h_1a6159b409f8d99954529a8ebf6f98cd85" kindref="member">RF_runImmediateCmd()</ref> in the first place, but also by some convenience functions like <ref refid="_r_f_8h_1aabe22ceae13a372be4ba135318aa849a" kindref="member">RF_cancelCmd()</ref>, <ref refid="_r_f_8h_1ae3ff5c614f4a63cb4e79c90f9229149a" kindref="member">RF_flushCmd()</ref>, <ref refid="_r_f_8h_1a4bd7985a3e0c5ad2b9f5e94aa945db63" kindref="member">RF_getInfo()</ref> and others. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1085" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="1085" bodyend="1095"/>
      </memberdef>
      <memberdef kind="enum" id="_r_f_8h_1acfa72a48f45abb7ea8e1595ce6606b7a" prot="public" static="no">
        <name>RF_ClientEvent</name>
        <enumvalue id="_r_f_8h_1acfa72a48f45abb7ea8e1595ce6606b7aa931a28d9524188efd2f45aa1e09dca0a" prot="public">
          <name>RF_ClientEventPowerUpFinished</name>
          <initializer>= (1 &lt;&lt; 0)</initializer>
          <briefdescription>
<para>The RF core has been powered up the radio setup has been finished. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1acfa72a48f45abb7ea8e1595ce6606b7aa5c502a8582be79f38917d0d464da2e5d" prot="public">
          <name>RF_ClientEventRadioFree</name>
          <initializer>= (1 &lt;&lt; 1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Radio becomes free after a command has been preempted by a high-priority command of another client. This event is only triggered on a client that has been preempted. Clients may use this event to retry running their low-priority RF operation. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1acfa72a48f45abb7ea8e1595ce6606b7aabb9b5b80366b32eb566b45b1526d7c12" prot="public">
          <name>RF_ClientEventSwitchClientEntered</name>
          <initializer>= (1 &lt;&lt; 2)</initializer>
          <briefdescription>
<para>Signals the client that the RF driver is about to switch over from another client. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Client-related RF driver events. </para>        </briefdescription>
        <detaileddescription>
<para>Events originating in the RF driver but not directly related to a specific radio command, are called client events. Clients may subscribe to these events by specifying a callback function <ref refid="struct_r_f___params_1a23e520f0583d79783f8bf54a491fc26e" kindref="member">RF_Params::pClientEventCb</ref>. Events are activated by specifying a bitmask <ref refid="struct_r_f___params_1ac63730611b6c615fe40a17b4dc5eb021" kindref="member">RF_Params::nClientEventMask</ref>. The callback is called separately for every event providing an optional argument.</para><para><programlisting><codeline><highlight class="normal">void<sp/>onClientEvent(RF_Handle<sp/>h,<sp/>RF_ClientEvent<sp/>event,<sp/>void*<sp/>arg)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(event)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>RF_ClientEventPowerUpFinished:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>output<sp/>port</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Unsubscribed<sp/>events<sp/>must<sp/>not<sp/>be<sp/>issued.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(false);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">RF_Params<sp/>params;</highlight></codeline>
<codeline><highlight class="normal">params.pClientEventCb<sp/>=<sp/>&amp;onClientEvent;</highlight></codeline>
<codeline><highlight class="normal">params.nClientEventMask<sp/>=<sp/>RF_ClientEventPowerUpFinished;</highlight></codeline>
<codeline><highlight class="normal">RF_open(...);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1151" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="1151" bodyend="1158"/>
      </memberdef>
      <memberdef kind="enum" id="_r_f_8h_1ad40e352daa020429c2aa1cd49283c5e8" prot="public" static="no">
        <name>RF_GlobalEvent</name>
        <enumvalue id="_r_f_8h_1ad40e352daa020429c2aa1cd49283c5e8a389b9776e29c420ef575c1b06eea7e73" prot="public">
          <name>RF_GlobalEventRadioSetup</name>
          <initializer>= (1 &lt;&lt; 0)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The RF core is being reconfigured through a setup command. The <emphasis>arg</emphasis> argument is a pointer to the setup command. HWI context. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1ad40e352daa020429c2aa1cd49283c5e8a54ffbc9af1f9b3be0ca2cb9062090a57" prot="public">
          <name>RF_GlobalEventRadioPowerDown</name>
          <initializer>= (1 &lt;&lt; 1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The RF core is being powered down. The <emphasis>arg</emphasis> argument is empty. SWI context. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Global RF driver events. </para>        </briefdescription>
        <detaileddescription>
<para>The RF driver provides an interface through the global <computeroutput>RFCC26XX_hwAttrs</computeroutput> struct to register a global, client independent callback. This callback is typically used to control board related configurations such as antenna switches.</para><para><programlisting><codeline><highlight class="normal">void<sp/>globalCallback(RF_Handle<sp/>h,<sp/>RF_GlobalEvent<sp/>event,<sp/>void*<sp/>arg)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(event)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>RF_GlobalEventRadioSetup:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RF_RadioSetup*<sp/>setupCommand<sp/>=<sp/>(RF_RadioSetup*)arg;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Select<sp/>antenna<sp/>path</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(setupCommand-&gt;common.commandNo<sp/>==<sp/>CMD_PROP_RADIO_DIV_SETUP)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Sub-1<sp/>GHz<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>2.4<sp/>GHz<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>RF_GlobalEventRadioPowerDown:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Disable<sp/>antenna<sp/>switch</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Unsubscribed<sp/>events<sp/>must<sp/>not<sp/>be<sp/>issued.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(false);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><simplesect kind="see"><para><ref refid="_r_f_8h_1a72192434157b0de3de648456bc221f07" kindref="member">RF_GlobalCallback</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1197" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="1197" bodyend="1205"/>
      </memberdef>
      <memberdef kind="enum" id="_r_f_8h_1a22596109459422a7a4d4f386dffbb8fa" prot="public" static="no">
        <name>RF_InfoType</name>
        <enumvalue id="_r_f_8h_1a22596109459422a7a4d4f386dffbb8faa4a4b88384acfaa135421ad57557140e6" prot="public">
          <name>RF_GET_CURR_CMD</name>
          <briefdescription>
<para>Retrieve a command handle of the current command. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1a22596109459422a7a4d4f386dffbb8faa19ebdcf12bef1328ce40fec49c0f6864" prot="public">
          <name>RF_GET_AVAIL_RAT_CH</name>
          <briefdescription>
<para>Create a bitmask showing available RAT channels. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1a22596109459422a7a4d4f386dffbb8faa51ac83691ed47bb591818e2e34e49d44" prot="public">
          <name>RF_GET_RADIO_STATE</name>
          <briefdescription>
<para>Show the current RF core power state. 0: Radio OFF, 1: Radio ON. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1a22596109459422a7a4d4f386dffbb8faac08f2876adac275a8cf5f36cb47e3b52" prot="public">
          <name>RF_GET_SCHEDULE_MAP</name>
          <briefdescription>
<para>Provide a timetable of all scheduled commands. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1a22596109459422a7a4d4f386dffbb8faa9c8ebff9d2070ac7b6cd6c6f498c65a8" prot="public">
          <name>RF_GET_CLIENT_LIST</name>
          <briefdescription>
<para>Provide the client list. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1a22596109459422a7a4d4f386dffbb8faa0394a33587673701b205811e2a0790e4" prot="public">
          <name>RF_GET_CLIENT_SWITCHING_TIME</name>
          <briefdescription>
<para>Provide the client to client switching times. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Selects the entry of interest in <ref refid="_r_f_8h_1a4bd7985a3e0c5ad2b9f5e94aa945db63" kindref="member">RF_getInfo()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1344" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="1344" bodyend="1351"/>
      </memberdef>
      <memberdef kind="enum" id="_r_f_8h_1a00f0a82597a56910cacf3f943b4a91a4" prot="public" static="no">
        <name>RF_AllowDelay</name>
        <enumvalue id="_r_f_8h_1a00f0a82597a56910cacf3f943b4a91a4a88ec56d363dd432a0854935aea89e58d" prot="public">
          <name>RF_AllowDelayNone</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1a00f0a82597a56910cacf3f943b4a91a4ab260570ce0ae8fc9152d012162d9258e" prot="public">
          <name>RF_AllowDelayAny</name>
          <initializer>= UINT32_MAX</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Controls the behaviour of the <ref refid="_r_f_8h_1a5e7f25943b5f3942bf4c09cb87f9aa76" kindref="member">RF_scheduleCmd()</ref> API. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1509" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="1509" bodyend="1512"/>
      </memberdef>
      <memberdef kind="enum" id="_r_f_8h_1a90ce11f016f50739ded9a5afd417d404" prot="public" static="no">
        <name>RF_RatSelectChannel</name>
        <enumvalue id="_r_f_8h_1a90ce11f016f50739ded9a5afd417d404aa6be170e55da07a1960996aa99d47f23" prot="public">
          <name>RF_RatChannelAny</name>
          <initializer>= -1</initializer>
          <briefdescription>
<para>Chose the first available channel. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1a90ce11f016f50739ded9a5afd417d404ae7b02ff7b22f3651c3860af31fcda357" prot="public">
          <name>RF_RatChannel0</name>
          <initializer>=  0</initializer>
          <briefdescription>
<para>Use RAT user channel 0. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1a90ce11f016f50739ded9a5afd417d404a17f39920b827e139c9f457bc3a90f285" prot="public">
          <name>RF_RatChannel1</name>
          <initializer>=  1</initializer>
          <briefdescription>
<para>Use RAT user channel 1. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1a90ce11f016f50739ded9a5afd417d404aa1675308a8fe8c68223a4b458c3521f2" prot="public">
          <name>RF_RatChannel2</name>
          <initializer>=  2</initializer>
          <briefdescription>
<para>Use RAT user channel 2. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Select the preferred RAT channel through the configuration of <ref refid="_r_f_8h_1af26945dca21f0742e7e978af6e176fea" kindref="member">RF_ratCompare()</ref> or <ref refid="_r_f_8h_1a513fd2cb2616e901d9f7a638ae9b7772" kindref="member">RF_ratCapture()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>If RF_RatChannelAny is provided within the channel configuration (default), the API will allocate the first available channel. Otherwise, it tries to allocate the requested channel, and if it is not available, returns with <ref refid="_r_f_8h_1ad2e517d9efabde3a1868a274ed0f683b" kindref="member">RF_ALLOC_ERROR</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1543" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="1543" bodyend="1548"/>
      </memberdef>
      <memberdef kind="enum" id="_r_f_8h_1a2df66c68b4216d2835915c9a240152b9" prot="public" static="no">
        <name>RF_RatCaptureSource</name>
        <enumvalue id="_r_f_8h_1a2df66c68b4216d2835915c9a240152b9aaf3502be2ed158963579a088e9839a3e" prot="public">
          <name>RF_RatCaptureSourceRtcUpdate</name>
          <initializer>= 20</initializer>
          <briefdescription>
<para>Selects the RTC update signal source. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1a2df66c68b4216d2835915c9a240152b9a5048e0046b442ada45022171d6a4c2b5" prot="public">
          <name>RF_RatCaptureSourceEventGeneric</name>
          <initializer>= 21</initializer>
          <briefdescription>
<para>Selects the Generic event of Event Fabric as source. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1a2df66c68b4216d2835915c9a240152b9a8d257508fc1a912b9eac8ed8f296fb2b" prot="public">
          <name>RF_RatCaptureSourceRfcGpi0</name>
          <initializer>= 22</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Selects the RFC_GPI[0] as source. This can be used i.e. to capture events on a GPIO. This requires that the GPIO is connected to RFC_GPO[0] from the GPIO driver. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1a2df66c68b4216d2835915c9a240152b9a273b1645a7e7e9e6534c8edccde986d3" prot="public">
          <name>RF_RatCaptureSourceRfcGpi1</name>
          <initializer>= 23</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Selects the RFC_GPO[1] as source. This can be used i.e. to capture events on a GPIO. This requires that the GPIO is connected to RFC_GPO[1] from the GPIO driver. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Selects the source signal for <ref refid="_r_f_8h_1a513fd2cb2616e901d9f7a638ae9b7772" kindref="member">RF_ratCapture()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The source of a capture event can be selected through the source field of the <ref refid="struct_r_f___rat_config_capture" kindref="compound">RF_RatConfigCapture</ref> configuration structure. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1555" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="1555" bodyend="1564"/>
      </memberdef>
      <memberdef kind="enum" id="_r_f_8h_1a696a994a1c4cc105cdf7d775b5b8f49e" prot="public" static="no">
        <name>RF_RatCaptureMode</name>
        <enumvalue id="_r_f_8h_1a696a994a1c4cc105cdf7d775b5b8f49ea418153f81b4fd93cc70c3838c3633e50" prot="public">
          <name>RF_RatCaptureModeRising</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Rising edge of the selected source will trigg a capture event. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1a696a994a1c4cc105cdf7d775b5b8f49ea045f8eaea856976ad615b6dee90f7eca" prot="public">
          <name>RF_RatCaptureModeFalling</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Falling edge of the selected source will trigg a capture event. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1a696a994a1c4cc105cdf7d775b5b8f49eae9e5af867013f557ba3b0765afb3e1fe" prot="public">
          <name>RF_RatCaptureModeBoth</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Both rising and falling edges of the selected source will generate capture events. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Selects the mode of <ref refid="_r_f_8h_1a513fd2cb2616e901d9f7a638ae9b7772" kindref="member">RF_ratCapture()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The trigger mode of a capture event can be selected through the mode field of <ref refid="struct_r_f___rat_config_capture" kindref="compound">RF_RatConfigCapture</ref> configuration structure. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1571" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="1571" bodyend="1576"/>
      </memberdef>
      <memberdef kind="enum" id="_r_f_8h_1ab26f46757c3fe1533a0ad1e299a6972d" prot="public" static="no">
        <name>RF_RatCaptureRepetition</name>
        <enumvalue id="_r_f_8h_1ab26f46757c3fe1533a0ad1e299a6972da9085567badb3963d673716578d584f91" prot="public">
          <name>RF_RatCaptureSingle</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Free the channel after the first capture event. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1ab26f46757c3fe1533a0ad1e299a6972da872d8bb2a69982689b67ca30c85bfd84" prot="public">
          <name>RF_RatCaptureRepeat</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Rearm the channel after each capture events. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Selects the repetition of <ref refid="_r_f_8h_1a513fd2cb2616e901d9f7a638ae9b7772" kindref="member">RF_ratCapture()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The configuration of a capture channel also defines whether the channel should be freed or automatically rearmed after a capture event occured. In the latter case, the user need to ree the channel manually through the <ref refid="_r_f_8h_1a8376a652a71c112b1028a1f02860ad60" kindref="member">RF_ratDisableChannel()</ref> API. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1584" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="1584" bodyend="1587"/>
      </memberdef>
      <memberdef kind="enum" id="_r_f_8h_1a9e9327d42a6943ea9324a1c8b547b5d9" prot="public" static="no">
        <name>RF_RatOutputMode</name>
        <enumvalue id="_r_f_8h_1a9e9327d42a6943ea9324a1c8b547b5d9aebd67f05684e2832b745b099e7c88486" prot="public">
          <name>RF_RatOutputModePulse</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Generates a one-clock period width pulse. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1a9e9327d42a6943ea9324a1c8b547b5d9afac232ab3d38f7087b877777c86b1262" prot="public">
          <name>RF_RatOutputModeSet</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Sets the output high on a RAT event. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1a9e9327d42a6943ea9324a1c8b547b5d9a764e233e4caacfb4eed3f5b8e6777f2d" prot="public">
          <name>RF_RatOutputModeClear</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Sets the output low on a RAT event. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1a9e9327d42a6943ea9324a1c8b547b5d9aceed850a718e8b4a89f0ced3495143b4" prot="public">
          <name>RF_RatOutputModeToggle</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>Inverts the polarity of the output. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1a9e9327d42a6943ea9324a1c8b547b5d9afe9d62943ead37d9f42aa8b9ba8ce272" prot="public">
          <name>RF_RatOutputModeAlwaysZero</name>
          <initializer>= 4</initializer>
          <briefdescription>
<para>Sets the output low independently of any RAT events. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1a9e9327d42a6943ea9324a1c8b547b5d9a359e117a34de1f2d5e18020a51953d01" prot="public">
          <name>RF_RatOutputModeAlwaysOne</name>
          <initializer>= 5</initializer>
          <briefdescription>
<para>Sets the output high independently of any RAT events. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Selects the mode of the RAT_GPO[x] for <ref refid="_r_f_8h_1af26945dca21f0742e7e978af6e176fea" kindref="member">RF_ratCompare()</ref> or <ref refid="_r_f_8h_1a513fd2cb2616e901d9f7a638ae9b7772" kindref="member">RF_ratCapture()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>In case of compare mode, the channel can generate an output signal of the selected mode on the configured RAT_GPO[x] interface, and can be interconnected with other subsystems through the RFC_GPO[x] or Event Fabric. An example use case is to generate a pulse on a GPIO.</para><para>In case of capture mode, the channel can also generate an output signal of the selected mode on the configured RAT_GPO[x] interface. Note that the configuration of this output event is independent of the source signal of the capture event. An example use case is to generate a pulse on a GPIO on each raising edge of another GPIO source. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1603" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="1603" bodyend="1610"/>
      </memberdef>
      <memberdef kind="enum" id="_r_f_8h_1aae197f40cee9a7f1582c7562e0288998" prot="public" static="no">
        <name>RF_RatOutputSelect</name>
        <enumvalue id="_r_f_8h_1aae197f40cee9a7f1582c7562e0288998a7db4a52061e981c8d2cb16c191929980" prot="public">
          <name>RF_RatOutputSelectRatGpo1</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Conigure RAT_CHANNEL[x] to interface with RAT_GPO[1]. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1aae197f40cee9a7f1582c7562e0288998ab7e16a49d10636da78c0f7caf2e9f3cb" prot="public">
          <name>RF_RatOutputSelectRatGpo2</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Conigure RAT_CHANNEL[x] to interface with RAT_GPO[2]. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1aae197f40cee9a7f1582c7562e0288998a4c9e7b401e0de9bb9097c6d8e6e308f3" prot="public">
          <name>RF_RatOutputSelectRatGpo3</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>Conigure RAT_CHANNEL[x] to interface with RAT_GPO[3]. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1aae197f40cee9a7f1582c7562e0288998aaaa1f147cf872631855f7c9de0adfbdc" prot="public">
          <name>RF_RatOutputSelectRatGpo4</name>
          <initializer>= 4</initializer>
          <briefdescription>
<para>Conigure RAT_CHANNEL[x] to interface with RAT_GPO[4]. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1aae197f40cee9a7f1582c7562e0288998aab31fed8d5373d5be3b38b00b7e228bc" prot="public">
          <name>RF_RatOutputSelectRatGpo5</name>
          <initializer>= 5</initializer>
          <briefdescription>
<para>Conigure RAT_CHANNEL[x] to interface with RAT_GPO[5]. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1aae197f40cee9a7f1582c7562e0288998a17d6ba08cefb8d01b3591ab88027dea7" prot="public">
          <name>RF_RatOutputSelectRatGpo6</name>
          <initializer>= 6</initializer>
          <briefdescription>
<para>Conigure RAT_CHANNEL[x] to interface with RAT_GPO[6]. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_r_f_8h_1aae197f40cee9a7f1582c7562e0288998a44e78ff0b3bb6353e46d27869db75ba3" prot="public">
          <name>RF_RatOutputSelectRatGpo7</name>
          <initializer>= 7</initializer>
          <briefdescription>
<para>Conigure RAT_CHANNEL[x] to interface with RAT_GPO[7]. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Selects GPO to be used with <ref refid="_r_f_8h_1af26945dca21f0742e7e978af6e176fea" kindref="member">RF_ratCompare()</ref> or <ref refid="_r_f_8h_1a513fd2cb2616e901d9f7a638ae9b7772" kindref="member">RF_ratCapture()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>RAT_GPO[0] - Reserved by the RF core. User shall not modify the configuration, but can observe the signal through any of RFC_GPO[0:3]. RAT_GPO[1] - Reserved by the RF core only if sync word detection is enabled. Otherwise can be used through RFC_GPO[0:3]. RAT_GPO[2:3] - Available and can be used through any of the RFC_GPO[0:3]. RAT_GPO[4:7] - Available and can be used through the Event fabric. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1621" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="1621" bodyend="1629"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_r_f_8h_1a47ea3dea78019340e8f8ceb854de5f02" prot="public" static="no">
        <type>rfc_radioOp_t</type>
        <definition>typedef rfc_radioOp_t RF_Op</definition>
        <argsstring></argsstring>
        <name>RF_Op</name>
        <briefdescription>
<para>Base type for all radio operation commands. </para>        </briefdescription>
        <detaileddescription>
<para>All radio operation commands share a common part. That includes the command id, a status field, chaining properties and a start trigger. Whenever an RF operation command is used with the RF driver, it needs to be casted to an RF_Op.</para><para>More information about RF operation commands can be found in the Proprietary RF User&apos;s Guide.</para><para><simplesect kind="see"><para><ref refid="_r_f_8h_1a248bebdd1d0bd6e0812cf18116987e54" kindref="member">RF_runCmd()</ref>, <ref refid="_r_f_8h_1a2b0ee444fcb74917df94eefea804ecbb" kindref="member">RF_postCmd()</ref>, <ref refid="_r_f_8h_1a91c1cb2508311f822acbc08ace568a83" kindref="member">RF_pendCmd()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1042" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="1042" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_r_f_8h_1a128c46e18dbbaa781abb7abafc35233a" prot="public" static="no">
        <type>uint64_t</type>
        <definition>typedef uint64_t RF_EventMask</definition>
        <argsstring></argsstring>
        <name>RF_EventMask</name>
        <briefdescription>
<para>Data type for events during command execution. </para>        </briefdescription>
        <detaileddescription>
<para>Possible event flags are listed in <ref refid="_r_f_8h_1RF_Core_Events" kindref="member">RF_Core_Events</ref> and <ref refid="_r_f_8h_1RF_Driver_Events" kindref="member">RF_Driver_Events</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1101" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="1101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_r_f_8h_1a25948ff7cdce9e54404c1301e82a3568" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t RF_ClientEventMask</definition>
        <argsstring></argsstring>
        <name>RF_ClientEventMask</name>
        <briefdescription>
<para>Event mask for combining <ref refid="_r_f_8h_1acfa72a48f45abb7ea8e1595ce6606b7a" kindref="member">RF_ClientEvent</ref> event flags in <ref refid="struct_r_f___params_1ac63730611b6c615fe40a17b4dc5eb021" kindref="member">RF_Params::nClientEventMask</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1211" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="1211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_r_f_8h_1a4894c55ea8160f852fc224f9073cf38e" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t RF_GlobalEventMask</definition>
        <argsstring></argsstring>
        <name>RF_GlobalEventMask</name>
        <briefdescription>
<para>Event mask for combining <ref refid="_r_f_8h_1ad40e352daa020429c2aa1cd49283c5e8" kindref="member">RF_GlobalEvent</ref> event flags in <ref refid="struct_r_f_c_c26_x_x___h_w_attrs_v2_1a43e0d7e59ef95cfad107009deef20c30" kindref="member">RFCC26XX_HWAttrsV2::globalEventMask</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1216" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="1216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_r_f_8h_1acab1f56c62a9fd1ad0a91a46b6da23f1" prot="public" static="no">
        <type>int16_t</type>
        <definition>typedef int16_t RF_CmdHandle</definition>
        <argsstring></argsstring>
        <name>RF_CmdHandle</name>
        <briefdescription>
<para>Command handle that is returned by <ref refid="_r_f_8h_1a2b0ee444fcb74917df94eefea804ecbb" kindref="member">RF_postCmd()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>A command handle is an integer number greater equals zero and identifies a command container in the RF driver&apos;s internal command queue. A client can dispatch a command with <ref refid="_r_f_8h_1a2b0ee444fcb74917df94eefea804ecbb" kindref="member">RF_postCmd()</ref> and use the command handle later on to make the RF driver interact with the command.</para><para>A negative value has either a special meaning or indicates an error.</para><para><simplesect kind="see"><para><ref refid="_r_f_8h_1a91c1cb2508311f822acbc08ace568a83" kindref="member">RF_pendCmd()</ref>, <ref refid="_r_f_8h_1ae3ff5c614f4a63cb4e79c90f9229149a" kindref="member">RF_flushCmd()</ref>, <ref refid="_r_f_8h_1aabe22ceae13a372be4ba135318aa849a" kindref="member">RF_cancelCmd()</ref>, <ref refid="_r_f_8h_1ad2e517d9efabde3a1868a274ed0f683b" kindref="member">RF_ALLOC_ERROR</ref>, <ref refid="_r_f_8h_1aacfd2e3e3a2596605cc8b182df438b2f" kindref="member">RF_CMDHANDLE_FLUSH_ALL</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1230" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="1230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_r_f_8h_1a5e8ab7fc87fb818f435d9b6226ee573f" prot="public" static="no">
        <type><ref refid="struct_r_f___object" kindref="compound">RF_Object</ref> *</type>
        <definition>typedef RF_Object* RF_Handle</definition>
        <argsstring></argsstring>
        <name>RF_Handle</name>
        <briefdescription>
<para>A handle that is returned by to <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>RF_Handle is used for further RF client interaction with the RF driver. An invalid handle has the value NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1328" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="1328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_r_f_8h_1a58de86ad0b6cfcb04548a776976c0a7c" prot="public" static="no">
        <type>int8_t</type>
        <definition>typedef int8_t RF_RatHandle</definition>
        <argsstring></argsstring>
        <name>RF_RatHandle</name>
        <briefdescription>
<para>RAT handle that is returned by <ref refid="_r_f_8h_1af26945dca21f0742e7e978af6e176fea" kindref="member">RF_ratCompare()</ref> or <ref refid="_r_f_8h_1a513fd2cb2616e901d9f7a638ae9b7772" kindref="member">RF_ratCapture()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>An RF_RatHandle is an integer number with value greater than or equal to zero and identifies a Radio Timer Channel in the RF driver&apos;s internal RAT module. A client can interract with the RAT module through the <ref refid="_r_f_8h_1af26945dca21f0742e7e978af6e176fea" kindref="member">RF_ratCompare()</ref>, <ref refid="_r_f_8h_1a513fd2cb2616e901d9f7a638ae9b7772" kindref="member">RF_ratCapture()</ref> or <ref refid="_r_f_8h_1a8376a652a71c112b1028a1f02860ad60" kindref="member">RF_ratDisableChannel()</ref> APIs.</para><para>A negative value indicates an error. A typical example when <ref refid="_r_f_8h_1af26945dca21f0742e7e978af6e176fea" kindref="member">RF_ratCompare()</ref> returns with RF_ALLOC_ERROR. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1339" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="1339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_r_f_8h_1a4d2ce6dc70b0f329dc5e249ec10c574a" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* RF_Callback) (RF_Handle h, RF_CmdHandle ch, RF_EventMask e)</definition>
        <argsstring>)(RF_Handle h, RF_CmdHandle ch, RF_EventMask e)</argsstring>
        <name>RF_Callback</name>
        <briefdescription>
<para>Handles events related to RF command execution. </para>        </briefdescription>
        <detaileddescription>
<para>RF command callbacks notify the application of any events happening during RF command execution. Events may either refer to RF core interrupts (<ref refid="_r_f_8h_1RF_Core_Events" kindref="member">RF_Core_Events</ref>) or may be generated by the RF driver (<ref refid="_r_f_8h_1RF_Driver_Events" kindref="member">RF_Driver_Events</ref>).</para><para>RF command callbacks are set up as parameter to <ref refid="_r_f_8h_1a2b0ee444fcb74917df94eefea804ecbb" kindref="member">RF_postCmd()</ref> or <ref refid="_r_f_8h_1a248bebdd1d0bd6e0812cf18116987e54" kindref="member">RF_runCmd()</ref> and provide:</para><para><itemizedlist>
<listitem><para>the relevant driver client handle <emphasis>h</emphasis> which was returned by <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref>,</para></listitem><listitem><para>the relevant radio operation command handle <emphasis>ch</emphasis>,</para></listitem><listitem><para>an event mask <emphasis>e</emphasis> containing the occured events.</para></listitem></itemizedlist>
</para><para>RF command callbacks are executed in Software Interrupt (SWI) context and must not perform any blocking operation. The priority is configurable via <ref refid="struct_r_f_c_c26_x_x___h_w_attrs_v2" kindref="compound">RFCC26XX_HWAttrsV2</ref> in the board file or <ref refid="_r_f_8h_1a325d55f02f7e3acddce7e44bab71e2de" kindref="member">RF_CTRL_SET_SWI_PRIORITY</ref> in <ref refid="_r_f_8h_1aa31772d56afb197fd812d24aa6f07f1b" kindref="member">RF_control()</ref>.</para><para>The RF_Callback function type is also used for signalling power events and errors. These are set in <ref refid="struct_r_f___params_1ae683ebc129d40a11fb9ec7e371f1e11b" kindref="member">RF_Params::pPowerCb</ref> and <ref refid="struct_r_f___params_1ab7be231b23fab2503b8c54b474fba74d" kindref="member">RF_Params::pErrCb</ref> respectively. In case of a power event, <emphasis>ch</emphasis> can be ignored and <emphasis>e</emphasis> has <ref refid="_r_f_8h_1a0e6d5e7d3760a65ba37d8f26823e9a0a" kindref="member">RF_EventPowerUp</ref> set. In case of an error callback, <emphasis>ch</emphasis> contains an error code instead of a command handle and <emphasis>e</emphasis> has the <ref refid="_r_f_8h_1aa6b858b8b383210049fa3f17dcd95fac" kindref="member">RF_EventError</ref> flag set.</para><para><simplesect kind="note"><para>Error and power callbacks will be replaced by <ref refid="_r_f_8h_1ab6bf8da299cd0c975c61fe2e450c0734" kindref="member">RF_ClientCallback</ref> in future releases. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1411" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="1411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_r_f_8h_1afbf75555f36dd8e45a3a932de62b2c68" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* RF_RatCallback) (RF_Handle h, RF_RatHandle rh, RF_EventMask e, uint32_t compareCaptureTime)</definition>
        <argsstring>)(RF_Handle h, RF_RatHandle rh, RF_EventMask e, uint32_t compareCaptureTime)</argsstring>
        <name>RF_RatCallback</name>
        <briefdescription>
<para>Handles events related to the Radio Timer (RAT). </para>        </briefdescription>
        <detaileddescription>
<para>The RF driver provides an interface to the Radio Timer through <ref refid="_r_f_8h_1af26945dca21f0742e7e978af6e176fea" kindref="member">RF_ratCompare()</ref>, <ref refid="_r_f_8h_1a513fd2cb2616e901d9f7a638ae9b7772" kindref="member">RF_ratCapture()</ref> and <ref refid="_r_f_8h_1a8376a652a71c112b1028a1f02860ad60" kindref="member">RF_ratDisableChannel()</ref> APIs. Each API call receives an optional input argument of the type RF_RatCallback. When a timer event occurs (compare, capture or error events), the registered callback is invoked.</para><para>The RF_RatCallback provides the following argument:<itemizedlist>
<listitem><para>the relevant driver client handle <emphasis>h</emphasis> which was returned by <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref>,</para></listitem><listitem><para>the relevant rat timer handle <emphasis>rh</emphasis> which the event is caused by,</para></listitem><listitem><para>an event mask <emphasis>e</emphasis> containing the occured event (RF_EventRatCh or RF_EventError)</para></listitem><listitem><para>the captured value or the compare time <emphasis>compareCaptureTime</emphasis> read from the Radio Timer channel. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1426" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="1426" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_r_f_8h_1ab6bf8da299cd0c975c61fe2e450c0734" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* RF_ClientCallback) (RF_Handle h, RF_ClientEvent event, void *arg)</definition>
        <argsstring>)(RF_Handle h, RF_ClientEvent event, void *arg)</argsstring>
        <name>RF_ClientCallback</name>
        <briefdescription>
<para>Handles events related to a driver instance. </para>        </briefdescription>
        <detaileddescription>
<para>The RF driver produces additional events that are not directly related to the execution of a certain command, but happen during general RF driver operations. This includes power-up events, client switching events and others.</para><para>A client callback provides the following arguments:<itemizedlist>
<listitem><para>the relevant driver client handle <emphasis>h</emphasis> which was returned by <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref>,</para></listitem><listitem><para>an event identifier <emphasis>event</emphasis>,</para></listitem><listitem><para>an optional argument <emphasis>arg</emphasis> depending on the event.</para></listitem></itemizedlist>
</para><para>RF client callbacks are executed in Software Interrupt (SWI) context and must not perform any blocking operation. The priority is configurable via <ref refid="struct_r_f_c_c26_x_x___h_w_attrs_v2" kindref="compound">RFCC26XX_HWAttrsV2</ref> in the board file or <ref refid="_r_f_8h_1a325d55f02f7e3acddce7e44bab71e2de" kindref="member">RF_CTRL_SET_SWI_PRIORITY</ref> in <ref refid="_r_f_8h_1aa31772d56afb197fd812d24aa6f07f1b" kindref="member">RF_control()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1443" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="1443" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_r_f_8h_1a72192434157b0de3de648456bc221f07" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* RF_GlobalCallback) (RF_Handle h, RF_GlobalEvent event, void *arg)</definition>
        <argsstring>)(RF_Handle h, RF_GlobalEvent event, void *arg)</argsstring>
        <name>RF_GlobalCallback</name>
        <briefdescription>
<para>Handles global events as part of PHY configuration. </para>        </briefdescription>
        <detaileddescription>
<para>The RF driver serves additional global, client indepenent events by invoking the <ref refid="_r_f_8h_1a72192434157b0de3de648456bc221f07" kindref="member">RF_GlobalCallback</ref> function registered through <ref refid="struct_r_f_c_c26_x_x___h_w_attrs_v2_1a7b47cefffa594a19d5f45d676fa09491" kindref="member">RFCC26XX_HWAttrsV2::globalCallback</ref> in the board file. The function can subscribe to particular events through the <ref refid="struct_r_f_c_c26_x_x___h_w_attrs_v2_1a43e0d7e59ef95cfad107009deef20c30" kindref="member">RFCC26XX_HWAttrsV2::globalEventMask</ref>, and receives the following arguments:<itemizedlist>
<listitem><para>the relevant driver client handle <emphasis>h</emphasis> which was returned by <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref>,</para></listitem><listitem><para>an event identifier <emphasis>event</emphasis>,</para></listitem><listitem><para>an optional argument <emphasis>arg</emphasis> depending on the event.</para></listitem></itemizedlist>
</para><para>If multiple events happen at the same time, the callback is always invoked separately for each event. Depending on the event, the callback might be invoked in SWI or HWI context. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1458" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" bodystart="1458" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_r_f_8h_1a5e8ab7fc87fb818f435d9b6226ee573f" kindref="member">RF_Handle</ref></type>
        <definition>RF_Handle RF_open</definition>
        <argsstring>(RF_Object *pObj, RF_Mode *pRfMode, RF_RadioSetup *pOpSetup, RF_Params *params)</argsstring>
        <name>RF_open</name>
        <param>
          <type><ref refid="struct_r_f___object" kindref="compound">RF_Object</ref> *</type>
          <declname>pObj</declname>
        </param>
        <param>
          <type><ref refid="struct_r_f___mode" kindref="compound">RF_Mode</ref> *</type>
          <declname>pRfMode</declname>
        </param>
        <param>
          <type><ref refid="union_r_f___radio_setup" kindref="compound">RF_RadioSetup</ref> *</type>
          <declname>pOpSetup</declname>
        </param>
        <param>
          <type><ref refid="struct_r_f___params" kindref="compound">RF_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Creates a a new client instance of the RF driver. </para>        </briefdescription>
        <detaileddescription>
<para>This function initializes an RF driver client instance using <emphasis>pObj</emphasis> as storage. It does not power up the RF core. Once the client starts the first RF opweration command later in the application, the RF core is powered up and set into a PHY mode specified by <emphasis>pRfMode</emphasis>. The chosen PHY is then configured by a radio setup command <emphasis>pOpSetup</emphasis>. Whenever the RF core is powered up, the RF driver re-executes the radio setup command <emphasis>pOpSetup</emphasis>. Additional driver behaviour may be set by an optional <emphasis>params</emphasis>.</para><para><programlisting><codeline><highlight class="normal">//<sp/>Define<sp/>parameters</highlight></codeline>
<codeline><highlight class="normal">RF_Params<sp/>rfParams;</highlight></codeline>
<codeline><highlight class="normal">rfParams.nInactivityTimeout<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal">RF_Params_init(&amp;rfParams);</highlight></codeline>
<codeline><highlight class="normal">rfParams.nInactivityTimeout<sp/>=<sp/>1701;<sp/>//<sp/>microseconds</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">RF_Handle<sp/>rfHandle<sp/>=<sp/>RF_open(&amp;rfObject,<sp/>&amp;RF_prop,<sp/>(RF_RadioSetup*)&amp;RF_cmdPropRadioDivSetup,<sp/>&amp;rfParams);</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para>Calling context : Task</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pObj</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <ref refid="struct_r_f___object" kindref="compound">RF_Object</ref> that will hold the state for this RF client. The object must be in persistent and writeable memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pRfMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <ref refid="struct_r_f___mode" kindref="compound">RF_Mode</ref> struct holding PHY information </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pOpSetup</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the radio setup command used for this client. This is re-executed by the RF Driver on each power-up. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an <ref refid="struct_r_f___params" kindref="compound">RF_Params</ref> object with the desired driver configuration. A NULL pointer results in the default configuration being loaded. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A handle for further RF driver calls on success. Otherwise NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1695" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1a9ff7e64561f7aa5526837521bceb5f88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RF_close</definition>
        <argsstring>(RF_Handle h)</argsstring>
        <name>RF_close</name>
        <param>
          <type><ref refid="_r_f_8h_1a5e8ab7fc87fb818f435d9b6226ee573f" kindref="member">RF_Handle</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Close client connection to RF driver. </para>        </briefdescription>
        <detaileddescription>
<para>Allows a RF client (high-level driver or application) to close its connection to the RF driver.</para><para><simplesect kind="note"><para>Calling context : Task</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle previously returned by <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1707" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1aedfdf0bdf0f64a071d50a6d78446fef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t RF_getCurrentTime</definition>
        <argsstring>(void)</argsstring>
        <name>RF_getCurrentTime</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return current radio timer value. </para>        </briefdescription>
        <detaileddescription>
<para>If the radio is powered returns the current radio timer value, if not returns a conservative estimate of the current radio timer value</para><para><simplesect kind="note"><para>Calling context : Task/SWI/HWI</para></simplesect>
<simplesect kind="return"><para>Current radio timer value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1719" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1a2b0ee444fcb74917df94eefea804ecbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_r_f_8h_1acab1f56c62a9fd1ad0a91a46b6da23f1" kindref="member">RF_CmdHandle</ref></type>
        <definition>RF_CmdHandle RF_postCmd</definition>
        <argsstring>(RF_Handle h, RF_Op *pOp, RF_Priority ePri, RF_Callback pCb, RF_EventMask bmEvent)</argsstring>
        <name>RF_postCmd</name>
        <param>
          <type><ref refid="_r_f_8h_1a5e8ab7fc87fb818f435d9b6226ee573f" kindref="member">RF_Handle</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="_r_f_8h_1a47ea3dea78019340e8f8ceb854de5f02" kindref="member">RF_Op</ref> *</type>
          <declname>pOp</declname>
        </param>
        <param>
          <type><ref refid="_r_f_8h_1ae5f9a893d178e64e6d0a7a783ea06e32" kindref="member">RF_Priority</ref></type>
          <declname>ePri</declname>
        </param>
        <param>
          <type><ref refid="_r_f_8h_1a4d2ce6dc70b0f329dc5e249ec10c574a" kindref="member">RF_Callback</ref></type>
          <declname>pCb</declname>
        </param>
        <param>
          <type><ref refid="_r_f_8h_1a128c46e18dbbaa781abb7abafc35233a" kindref="member">RF_EventMask</ref></type>
          <declname>bmEvent</declname>
        </param>
        <briefdescription>
<para>Appends RF operation commands to the driver&apos;s command queue and returns a command handle. </para>        </briefdescription>
        <detaileddescription>
<para>The RF operation <emphasis>pOp</emphasis> may either represent a single operation or may be the first operation in a chain. If the command queue is empty, the <emphasis>pCmd</emphasis> is dispatched immediately. If there are other operations pending, then <emphasis>pCmd</emphasis> is processed after all other commands have been finished. The RF operation command must be compatible to the <ref refid="struct_r_f___mode" kindref="compound">RF_Mode</ref> selected by <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref>, e.g. proprietary commands can only be used when the RF core is configured for proprietary mode.</para><para>The returned command handle is an identifier that can be used to control command execution later on, for instance with <ref refid="_r_f_8h_1a91c1cb2508311f822acbc08ace568a83" kindref="member">RF_pendCmd()</ref> or <ref refid="_r_f_8h_1aabe22ceae13a372be4ba135318aa849a" kindref="member">RF_cancelCmd()</ref>. It is a 16 Bit signed integer value, incremented on every new command. If the RF driver runs out of command containers, RF_ALLOC_ERROR is returned.</para><para>The priority <emphasis>ePri</emphasis> is only relevant in multi-client applications where commands of distinct clients may interrupt each other. Only commands started by <ref refid="_r_f_8h_1a5e7f25943b5f3942bf4c09cb87f9aa76" kindref="member">RF_scheduleCmd()</ref> can preempt running commands. <ref refid="_r_f_8h_1a2b0ee444fcb74917df94eefea804ecbb" kindref="member">RF_postCmd()</ref> or <ref refid="_r_f_8h_1a248bebdd1d0bd6e0812cf18116987e54" kindref="member">RF_runCmd()</ref> do never interrupt a running command. In single-client applications, <emphasis>ePri</emphasis> is ignored and should be set to <ref refid="_r_f_8h_1ae5f9a893d178e64e6d0a7a783ea06e32a301d2e5af295d52039b52709952a1c47" kindref="member">RF_PriorityNormal</ref>.</para><para>A callback function <emphasis>pCb</emphasis> might be specified to get notified about events during command execution. Events are subscribed by the bit mask <emphasis>bmEvent</emphasis>. Valid event flags are specified in <ref refid="_r_f_8h_1RF_Core_Events" kindref="member">RF_Core_Events</ref> and <ref refid="_r_f_8h_1RF_Driver_Events" kindref="member">RF_Driver_Events</ref>. If no callback is set, <ref refid="_r_f_8h_1a91c1cb2508311f822acbc08ace568a83" kindref="member">RF_pendCmd()</ref> can be used to synchronize the current task to command execution. For this it is necessary to subscribe all relevant events. The termination events <ref refid="_r_f_8h_1a2d60db886271cf8e08c7b6b2f5e534f1" kindref="member">RF_EventLastCmdDone</ref>, <ref refid="_r_f_8h_1ae6d21f9806a7482a0f324f98bb83aac0" kindref="member">RF_EventCmdCancelled</ref>, <ref refid="_r_f_8h_1a95a0bf832c19fbdce2c164144ad265ee" kindref="member">RF_EventCmdAborted</ref> and <ref refid="_r_f_8h_1ac68cfb0f9c26d275ad990f5da9e6b91f" kindref="member">RF_EventCmdStopped</ref> are always implicitly subscribed.</para><para>The following limitations apply to the execution of command chains:</para><para><itemizedlist>
<listitem><para>If TRIG_ABSTIME is used as a start trigger for the first command, TRIG_REL_FIRST_START can not be used for any other command. This is because the RF driver may insert a frequency-select command (CMD_FS) at the front of the chain when it performs an automatic power-up.</para></listitem><listitem><para>Having more than one CMD_FS in a chain may lead to unexpected behavior. If a chain contains a CMD_FS and the command can be reached by iterating over the pNextOp field, then RF driver will always update the cached CMD_FS with the new settings. On the next automatic power-up, the RF driver will use the updated frequency.</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>Calling context : Task/SWI</para></simplesect>
<simplesect kind="see"><para><ref refid="_r_f_8h_1a91c1cb2508311f822acbc08ace568a83" kindref="member">RF_pendCmd()</ref>, <ref refid="_r_f_8h_1a248bebdd1d0bd6e0812cf18116987e54" kindref="member">RF_runCmd()</ref>, <ref refid="_r_f_8h_1a5e7f25943b5f3942bf4c09cb87f9aa76" kindref="member">RF_scheduleCmd()</ref>, RF_RF_cancelCmd(), <ref refid="_r_f_8h_1ae3ff5c614f4a63cb4e79c90f9229149a" kindref="member">RF_flushCmd()</ref>, <ref refid="_r_f_8h_1abdde833057385980d0ae1b2c844b97b7" kindref="member">RF_getCmdOp()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver handle previously returned by <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the RF operation command. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ePri</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority of this RF command (used for arbitration in multi-client systems) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pCb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function called during command execution and upon completion. If <ref refid="_r_f_8h_1a2b0ee444fcb74917df94eefea804ecbb" kindref="member">RF_postCmd()</ref> fails, no callback is made. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bmEvent</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask of events that will trigger the callback or that can be pended on. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A handle to the RF command. Return value of RF_ALLOC_ERROR indicates error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1775" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1a9ffe098f1c3a174e225ac88f6e1574ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RF_ScheduleCmdParams_init</definition>
        <argsstring>(RF_ScheduleCmdParams *pSchParams)</argsstring>
        <name>RF_ScheduleCmdParams_init</name>
        <param>
          <type><ref refid="struct_r_f___schedule_cmd_params" kindref="compound">RF_ScheduleCmdParams</ref> *</type>
          <declname>pSchParams</declname>
        </param>
        <briefdescription>
<para>Initialize the configuration structure to default values to be used with the <ref refid="_r_f_8h_1a5e7f25943b5f3942bf4c09cb87f9aa76" kindref="member">RF_scheduleCmd()</ref> API. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Calling context : Task/SWI/HWI</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pSchParams</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the configuration structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1785" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1a5e7f25943b5f3942bf4c09cb87f9aa76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_r_f_8h_1acab1f56c62a9fd1ad0a91a46b6da23f1" kindref="member">RF_CmdHandle</ref></type>
        <definition>RF_CmdHandle RF_scheduleCmd</definition>
        <argsstring>(RF_Handle h, RF_Op *pOp, RF_ScheduleCmdParams *pSchParams, RF_Callback pCb, RF_EventMask bmEvent)</argsstring>
        <name>RF_scheduleCmd</name>
        <param>
          <type><ref refid="_r_f_8h_1a5e8ab7fc87fb818f435d9b6226ee573f" kindref="member">RF_Handle</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="_r_f_8h_1a47ea3dea78019340e8f8ceb854de5f02" kindref="member">RF_Op</ref> *</type>
          <declname>pOp</declname>
        </param>
        <param>
          <type><ref refid="struct_r_f___schedule_cmd_params" kindref="compound">RF_ScheduleCmdParams</ref> *</type>
          <declname>pSchParams</declname>
        </param>
        <param>
          <type><ref refid="_r_f_8h_1a4d2ce6dc70b0f329dc5e249ec10c574a" kindref="member">RF_Callback</ref></type>
          <declname>pCb</declname>
        </param>
        <param>
          <type><ref refid="_r_f_8h_1a128c46e18dbbaa781abb7abafc35233a" kindref="member">RF_EventMask</ref></type>
          <declname>bmEvent</declname>
        </param>
        <briefdescription>
<para>Schedule an RF operation (chain) to the command queue. </para>        </briefdescription>
        <detaileddescription>
<para>Schedule an <ref refid="_r_f_8h_1a47ea3dea78019340e8f8ceb854de5f02" kindref="member">RF_Op</ref> to the RF command queue of the client with handle h. <linebreak/>
 The command can be the first in a chain of RF operations or a standalone RF operation. If a chain of operations are posted they are treated atomically, i.e. either all or none of the chained operations are run. <linebreak/>
 All operations must be posted in strictly increasing chronological order. Function returns immediately. <linebreak/>
</para><para>Limitations apply to the operations posted:<itemizedlist>
<listitem><para>The operation must be in the set supported in the chosen radio mode when <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref> was called</para></listitem><listitem><para>Only a subset of radio operations are supported</para></listitem><listitem><para>Only some of the trigger modes are supported with potential power saving (TRIG_NOW, TRIG_ABSTIME)</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>Calling context : Task/SWI</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle previously returned by <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="_r_f_8h_1a47ea3dea78019340e8f8ceb854de5f02" kindref="member">RF_Op</ref>. Must normally be in persistent and writeable memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pSchParams</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the schedule command parameter structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pCb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function called upon command completion (and some other events). If <ref refid="_r_f_8h_1a5e7f25943b5f3942bf4c09cb87f9aa76" kindref="member">RF_scheduleCmd()</ref> fails no callback is made </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bmEvent</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask of events that will trigger the callback. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A handle to the RF command. Return value of RF_ALLOC_ERROR indicates error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1813" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1a91c1cb2508311f822acbc08ace568a83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_r_f_8h_1a128c46e18dbbaa781abb7abafc35233a" kindref="member">RF_EventMask</ref></type>
        <definition>RF_EventMask RF_pendCmd</definition>
        <argsstring>(RF_Handle h, RF_CmdHandle ch, RF_EventMask bmEvent)</argsstring>
        <name>RF_pendCmd</name>
        <param>
          <type><ref refid="_r_f_8h_1a5e8ab7fc87fb818f435d9b6226ee573f" kindref="member">RF_Handle</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="_r_f_8h_1acab1f56c62a9fd1ad0a91a46b6da23f1" kindref="member">RF_CmdHandle</ref></type>
          <declname>ch</declname>
        </param>
        <param>
          <type><ref refid="_r_f_8h_1a128c46e18dbbaa781abb7abafc35233a" kindref="member">RF_EventMask</ref></type>
          <declname>bmEvent</declname>
        </param>
        <briefdescription>
<para>Synchronizes the calling task to an RF operation command <emphasis>ch</emphasis> and returns accumulated event flags. </para>        </briefdescription>
        <detaileddescription>
<para>After having dispatched an RF operation represented by <emphasis>ch</emphasis> with <ref refid="_r_f_8h_1a2b0ee444fcb74917df94eefea804ecbb" kindref="member">RF_postCmd()</ref>, the command is running in parallel on the RF core. Thus, it might be desirable to synchronize the calling task to the execution of the command. With <ref refid="_r_f_8h_1a91c1cb2508311f822acbc08ace568a83" kindref="member">RF_pendCmd()</ref>, the application can block until one of the events specified in <emphasis>bmEvent</emphasis> occurs or until the command finishes. The function consumes and returns all accumulated event flags that occured during execution if they have been previously subscribed by <ref refid="_r_f_8h_1a2b0ee444fcb74917df94eefea804ecbb" kindref="member">RF_postCmd()</ref>. Possible events are specified in <ref refid="_r_f_8h_1RF_Core_Events" kindref="member">RF_Core_Events</ref> and <ref refid="_r_f_8h_1RF_Driver_Events" kindref="member">RF_Driver_Events</ref>. The termination events <ref refid="_r_f_8h_1a2d60db886271cf8e08c7b6b2f5e534f1" kindref="member">RF_EventLastCmdDone</ref>, <ref refid="_r_f_8h_1ae6d21f9806a7482a0f324f98bb83aac0" kindref="member">RF_EventCmdCancelled</ref>, <ref refid="_r_f_8h_1a95a0bf832c19fbdce2c164144ad265ee" kindref="member">RF_EventCmdAborted</ref> and <ref refid="_r_f_8h_1ac68cfb0f9c26d275ad990f5da9e6b91f" kindref="member">RF_EventCmdStopped</ref> are always implicitly subscribed and can not be masked.</para><para><ref refid="_r_f_8h_1a91c1cb2508311f822acbc08ace568a83" kindref="member">RF_pendCmd()</ref> may be called multiple times for the same command.</para><para>If <ref refid="_r_f_8h_1a91c1cb2508311f822acbc08ace568a83" kindref="member">RF_pendCmd()</ref> is called for a command handle representing a finished command, then only the <ref refid="_r_f_8h_1a2d60db886271cf8e08c7b6b2f5e534f1" kindref="member">RF_EventLastCmdDone</ref> flag is returned, regardless of how the command finished.</para><para>If the command has also a callback set, the callback is executed before <ref refid="_r_f_8h_1a91c1cb2508311f822acbc08ace568a83" kindref="member">RF_pendCmd()</ref> returns.</para><para>Example: <programlisting><codeline><highlight class="normal">//<sp/>Dispatch<sp/>a<sp/>command<sp/>to<sp/>the<sp/>RF<sp/>driver&apos;s<sp/>command<sp/>queue</highlight></codeline>
<codeline><highlight class="normal">RF_CmdHandle<sp/>ch<sp/>=<sp/>RF_postCmd(driver,<sp/>(RF_Op*)&amp;CMD_PROP_RX,<sp/>RF_PriorityNormal,<sp/>NULL,<sp/>RF_EventRxEntryDone);</highlight></codeline>
<codeline><highlight class="normal">assert(ch<sp/>!=<sp/>RF_ALLOC_ERROR);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">bool<sp/>finished<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(finished<sp/>==<sp/>false)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Synchronize<sp/>to<sp/>events<sp/>during<sp/>command<sp/>execution.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>events<sp/>=<sp/>RF_pendCmd(driver,<sp/>ch,<sp/>RF_EventRxEntryDone);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Check<sp/>events<sp/>that<sp/>happen<sp/>during<sp/>execution</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(events<sp/>&amp;<sp/>RF_EventRxEntryDone)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Process<sp/>packet</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(events<sp/>&amp;<sp/>(RF_EventLastCmdDone<sp/>|<sp/>RF_EventCmdStopped<sp/>|<sp/>RF_EventCmdAborted<sp/>|<sp/>RF_EventCmdCancelled))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para>Calling context : Task</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver handle previously returned by <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch</parametername>
</parameternamelist>
<parameterdescription>
<para>Command handle previously returned by <ref refid="_r_f_8h_1a2b0ee444fcb74917df94eefea804ecbb" kindref="member">RF_postCmd()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bmEvent</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask of events that make <ref refid="_r_f_8h_1a91c1cb2508311f822acbc08ace568a83" kindref="member">RF_pendCmd()</ref> return. Termination events are always implicitly subscribed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Event flags accumulated during command execution.</para></simplesect>
<simplesect kind="see"><para><ref refid="_r_f_8h_1a2b0ee444fcb74917df94eefea804ecbb" kindref="member">RF_postCmd()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1874" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1a248bebdd1d0bd6e0812cf18116987e54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_r_f_8h_1a128c46e18dbbaa781abb7abafc35233a" kindref="member">RF_EventMask</ref></type>
        <definition>RF_EventMask RF_runCmd</definition>
        <argsstring>(RF_Handle h, RF_Op *pOp, RF_Priority ePri, RF_Callback pCb, RF_EventMask bmEvent)</argsstring>
        <name>RF_runCmd</name>
        <param>
          <type><ref refid="_r_f_8h_1a5e8ab7fc87fb818f435d9b6226ee573f" kindref="member">RF_Handle</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="_r_f_8h_1a47ea3dea78019340e8f8ceb854de5f02" kindref="member">RF_Op</ref> *</type>
          <declname>pOp</declname>
        </param>
        <param>
          <type><ref refid="_r_f_8h_1ae5f9a893d178e64e6d0a7a783ea06e32" kindref="member">RF_Priority</ref></type>
          <declname>ePri</declname>
        </param>
        <param>
          <type><ref refid="_r_f_8h_1a4d2ce6dc70b0f329dc5e249ec10c574a" kindref="member">RF_Callback</ref></type>
          <declname>pCb</declname>
        </param>
        <param>
          <type><ref refid="_r_f_8h_1a128c46e18dbbaa781abb7abafc35233a" kindref="member">RF_EventMask</ref></type>
          <declname>bmEvent</declname>
        </param>
        <briefdescription>
<para>Runs synchronously an RF operation command or a chain of commands and returns the termination reason. </para>        </briefdescription>
        <detaileddescription>
<para>This function appends an RF operation command or a chain of commands to the RF driver&apos;s command queue and then waits for it to complete. A command is completed if one of the termination events <ref refid="_r_f_8h_1a2d60db886271cf8e08c7b6b2f5e534f1" kindref="member">RF_EventLastCmdDone</ref>, <ref refid="_r_f_8h_1ae6d21f9806a7482a0f324f98bb83aac0" kindref="member">RF_EventCmdCancelled</ref>, <ref refid="_r_f_8h_1a95a0bf832c19fbdce2c164144ad265ee" kindref="member">RF_EventCmdAborted</ref>, <ref refid="_r_f_8h_1ac68cfb0f9c26d275ad990f5da9e6b91f" kindref="member">RF_EventCmdStopped</ref> occured.</para><para>This function is a combination of <ref refid="_r_f_8h_1a2b0ee444fcb74917df94eefea804ecbb" kindref="member">RF_postCmd()</ref> and <ref refid="_r_f_8h_1a91c1cb2508311f822acbc08ace568a83" kindref="member">RF_pendCmd()</ref>. All options and limitations for <ref refid="_r_f_8h_1a2b0ee444fcb74917df94eefea804ecbb" kindref="member">RF_postCmd()</ref> apply here as well.</para><para>An application should always ensure that the command completed in the expected way and with an expected status code.</para><para><simplesect kind="note"><para>Calling context : Task</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver handle previously returned by <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the RF operation command. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ePri</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority of this RF command (used for arbitration in multi-client systems) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pCb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function called during command execution and upon completion. If <ref refid="_r_f_8h_1a248bebdd1d0bd6e0812cf18116987e54" kindref="member">RF_runCmd()</ref> fails, no callback is made. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bmEvent</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask of events that will trigger the callback or that can be pended on. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The relevant termination event.</para></simplesect>
<simplesect kind="see"><para><ref refid="_r_f_8h_1a2b0ee444fcb74917df94eefea804ecbb" kindref="member">RF_postCmd()</ref>, <ref refid="_r_f_8h_1a91c1cb2508311f822acbc08ace568a83" kindref="member">RF_pendCmd()</ref>, <ref refid="_r_f_8h_1aabe22ceae13a372be4ba135318aa849a" kindref="member">RF_cancelCmd()</ref>, <ref refid="_r_f_8h_1ae3ff5c614f4a63cb4e79c90f9229149a" kindref="member">RF_flushCmd()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1903" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1a5042591ca75f04c60fa0f7e7a9e1aac8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_r_f_8h_1a128c46e18dbbaa781abb7abafc35233a" kindref="member">RF_EventMask</ref></type>
        <definition>RF_EventMask RF_runScheduleCmd</definition>
        <argsstring>(RF_Handle h, RF_Op *pOp, RF_ScheduleCmdParams *pSchParams, RF_Callback pCb, RF_EventMask bmEvent)</argsstring>
        <name>RF_runScheduleCmd</name>
        <param>
          <type><ref refid="_r_f_8h_1a5e8ab7fc87fb818f435d9b6226ee573f" kindref="member">RF_Handle</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="_r_f_8h_1a47ea3dea78019340e8f8ceb854de5f02" kindref="member">RF_Op</ref> *</type>
          <declname>pOp</declname>
        </param>
        <param>
          <type><ref refid="struct_r_f___schedule_cmd_params" kindref="compound">RF_ScheduleCmdParams</ref> *</type>
          <declname>pSchParams</declname>
        </param>
        <param>
          <type><ref refid="_r_f_8h_1a4d2ce6dc70b0f329dc5e249ec10c574a" kindref="member">RF_Callback</ref></type>
          <declname>pCb</declname>
        </param>
        <param>
          <type><ref refid="_r_f_8h_1a128c46e18dbbaa781abb7abafc35233a" kindref="member">RF_EventMask</ref></type>
          <declname>bmEvent</declname>
        </param>
        <briefdescription>
<para>Runs synchronously a (chain of) RF operation(s) for dual or single-mode. </para>        </briefdescription>
        <detaileddescription>
<para>Allows a (chain of) operation(s) to be scheduled to the command queue and then waits for it to complete. <linebreak/>
 A command is completed if one of the RF_EventLastCmdDone, RF_EventCmdCancelled, RF_EventCmdAborted, RF_EventCmdStopped occured.</para><para><simplesect kind="note"><para>Calling context : Task </para></simplesect>
<simplesect kind="note"><para>Only one call to <ref refid="_r_f_8h_1a91c1cb2508311f822acbc08ace568a83" kindref="member">RF_pendCmd()</ref> or <ref refid="_r_f_8h_1a5042591ca75f04c60fa0f7e7a9e1aac8" kindref="member">RF_runScheduleCmd()</ref> can be made at a time for each client</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle previously returned by <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pOp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="_r_f_8h_1a47ea3dea78019340e8f8ceb854de5f02" kindref="member">RF_Op</ref>. Must normally be in persistent and writeable memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pSchParams</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the schedule command parameter structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pCb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function called upon command completion (and some other events). If <ref refid="_r_f_8h_1a5042591ca75f04c60fa0f7e7a9e1aac8" kindref="member">RF_runScheduleCmd()</ref> fails, no callback is made. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bmEvent</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask of events that will trigger the callback. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The relevant commmand completed event. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1924" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1aabe22ceae13a372be4ba135318aa849a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988f" kindref="member">RF_Stat</ref></type>
        <definition>RF_Stat RF_cancelCmd</definition>
        <argsstring>(RF_Handle h, RF_CmdHandle ch, uint8_t mode)</argsstring>
        <name>RF_cancelCmd</name>
        <param>
          <type><ref refid="_r_f_8h_1a5e8ab7fc87fb818f435d9b6226ee573f" kindref="member">RF_Handle</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="_r_f_8h_1acab1f56c62a9fd1ad0a91a46b6da23f1" kindref="member">RF_CmdHandle</ref></type>
          <declname>ch</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Abort/stop/cancel single command in command queue. </para>        </briefdescription>
        <detaileddescription>
<para>If command is running, aborts/stops it and posts callback for the aborted/stopped command. <linebreak/>
 If command has not yet run, cancels it it and posts callback for the cancelled command. <linebreak/>
 If command has already run or been aborted/stopped/cancelled, has no effect.<linebreak/>
 If RF_cancelCmd is called from a Swi context with same or higher priority than RF Driver Swi, when the RF core is powered OFF -&gt; the cancel callback will be delayed until the next power-up cycle.<linebreak/>
</para><para><simplesect kind="note"><para>Calling context : Task/SWI</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle previously returned by <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch</parametername>
</parameternamelist>
<parameterdescription>
<para>Command handle previously returned by <ref refid="_r_f_8h_1a2b0ee444fcb74917df94eefea804ecbb" kindref="member">RF_postCmd()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>1: Stop gracefully, 0: abort abruptly </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RF_Stat indicates if command was successfully completed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1945" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1ae3ff5c614f4a63cb4e79c90f9229149a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988f" kindref="member">RF_Stat</ref></type>
        <definition>RF_Stat RF_flushCmd</definition>
        <argsstring>(RF_Handle h, RF_CmdHandle ch, uint8_t mode)</argsstring>
        <name>RF_flushCmd</name>
        <param>
          <type><ref refid="_r_f_8h_1a5e8ab7fc87fb818f435d9b6226ee573f" kindref="member">RF_Handle</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="_r_f_8h_1acab1f56c62a9fd1ad0a91a46b6da23f1" kindref="member">RF_CmdHandle</ref></type>
          <declname>ch</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Abort/stop/cancel command and any subsequent commands in command queue. </para>        </briefdescription>
        <detaileddescription>
<para>If command is running, aborts/stops it and then cancels all later commands in queue.<linebreak/>
 If command has not yet run, cancels it and all later commands in queue.<linebreak/>
 If command has already run or been aborted/stopped/cancelled, has no effect.<linebreak/>
 The callbacks for all cancelled commands are issued in chronological order.<linebreak/>
 If RF_flushCmd is called from a Swi context with same or higher priority than RF Driver Swi, when the RF core is powered OFF -&gt; the cancel callback will be delayed until the next power-up cycle.<linebreak/>
</para><para><simplesect kind="note"><para>Calling context : Task/SWI</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle previously returned by <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch</parametername>
</parameternamelist>
<parameterdescription>
<para>Command handle previously returned by <ref refid="_r_f_8h_1a2b0ee444fcb74917df94eefea804ecbb" kindref="member">RF_postCmd()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>1: Stop gracefully, 0: abort abruptly </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RF_Stat indicates if command was successfully completed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1966" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1a6159b409f8d99954529a8ebf6f98cd85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988f" kindref="member">RF_Stat</ref></type>
        <definition>RF_Stat RF_runImmediateCmd</definition>
        <argsstring>(RF_Handle h, uint32_t *pCmdStruct)</argsstring>
        <name>RF_runImmediateCmd</name>
        <param>
          <type><ref refid="_r_f_8h_1a5e8ab7fc87fb818f435d9b6226ee573f" kindref="member">RF_Handle</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>pCmdStruct</declname>
        </param>
        <briefdescription>
<para>Send any Immediate command. <linebreak/>
 </para>        </briefdescription>
        <detaileddescription>
<para>Immediate Comamnd is send to RDBELL, if radio is active and the RF_Handle points to the current client. <linebreak/>
 In other appropriate RF_Stat values are returned. <linebreak/>
</para><para><simplesect kind="note"><para>Calling context : Task/SWI/HWI</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle previously returned by <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pCmdStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the immediate command structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RF_Stat indicates if command was successfully completed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1981" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1aafce617271300f2bee1a52ebda6d654e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988f" kindref="member">RF_Stat</ref></type>
        <definition>RF_Stat RF_runDirectCmd</definition>
        <argsstring>(RF_Handle h, uint32_t cmd)</argsstring>
        <name>RF_runDirectCmd</name>
        <param>
          <type><ref refid="_r_f_8h_1a5e8ab7fc87fb818f435d9b6226ee573f" kindref="member">RF_Handle</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>cmd</declname>
        </param>
        <briefdescription>
<para>Send any Direct command. <linebreak/>
 </para>        </briefdescription>
        <detaileddescription>
<para>Direct Comamnd value is send to RDBELL immediately, if radio is active and the RF_Handle point to the current client. <linebreak/>
 In other appropriate RF_Stat values are returned. <linebreak/>
</para><para><simplesect kind="note"><para>Calling context : Task/SWI/HWI</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle previously returned by <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>Direct command value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RF_Stat indicates if command was successfully completed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="1996" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1a299ada7963c727a40466d7d1bb7296a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RF_yield</definition>
        <argsstring>(RF_Handle h)</argsstring>
        <name>RF_yield</name>
        <param>
          <type><ref refid="_r_f_8h_1a5e8ab7fc87fb818f435d9b6226ee573f" kindref="member">RF_Handle</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Signal that radio client is not going to issue more commands in a while. <linebreak/>
 </para>        </briefdescription>
        <detaileddescription>
<para>Hint to RF driver that, irrespective of inactivity timeout, no new further commands will be issued for a while and thus the radio can be powered down at the earliest convenience. In case the <ref refid="_r_f_8h_1a299ada7963c727a40466d7d1bb7296a3" kindref="member">RF_yield()</ref> is called within a callback, the callback will need to finish and return before the power down sequence is initiated. Posting new commands to the queue will cancel any pending <ref refid="_r_f_8h_1a299ada7963c727a40466d7d1bb7296a3" kindref="member">RF_yield()</ref> request. <linebreak/>
</para><para><simplesect kind="note"><para>Calling context : Task</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle previously returned by <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="2012" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1ab956de3745437cb7a69c4edfb006434e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RF_Params_init</definition>
        <argsstring>(RF_Params *params)</argsstring>
        <name>RF_Params_init</name>
        <param>
          <type><ref refid="struct_r_f___params" kindref="compound">RF_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to initialize the <ref refid="struct_r_f___params" kindref="compound">RF_Params</ref> struct to its defaults. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>An pointer to <ref refid="struct_r_f___params" kindref="compound">RF_Params</ref> structure for initialization</para></parameterdescription>
</parameteritem>
</parameterlist>
Defaults values are: nInactivityTimeout = BIOS_WAIT_FOREVER nPowerUpDuration = RF_DEFAULT_POWER_UP_TIME </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="2024" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1a4bd7985a3e0c5ad2b9f5e94aa945db63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988f" kindref="member">RF_Stat</ref></type>
        <definition>RF_Stat RF_getInfo</definition>
        <argsstring>(RF_Handle h, RF_InfoType type, RF_InfoVal *pValue)</argsstring>
        <name>RF_getInfo</name>
        <param>
          <type><ref refid="_r_f_8h_1a5e8ab7fc87fb818f435d9b6226ee573f" kindref="member">RF_Handle</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="_r_f_8h_1a22596109459422a7a4d4f386dffbb8fa" kindref="member">RF_InfoType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="union_r_f___info_val" kindref="compound">RF_InfoVal</ref> *</type>
          <declname>pValue</declname>
        </param>
        <briefdescription>
<para>Get value for some RF driver parameters. <linebreak/>
 </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Calling context : Task/SWI/HWI</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle previously returned by <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Request value paramter defined by RF_InfoType </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to return parameter values specified by <ref refid="union_r_f___info_val" kindref="compound">RF_InfoVal</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RF_Stat indicates if command was successfully completed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="2036" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1ac3fe0d39243fb6bbefe0216d958a6779" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t RF_getRssi</definition>
        <argsstring>(RF_Handle h)</argsstring>
        <name>RF_getRssi</name>
        <param>
          <type><ref refid="_r_f_8h_1a5e8ab7fc87fb818f435d9b6226ee573f" kindref="member">RF_Handle</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Get RSSI value. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Calling context : Task/SWI/HWI</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle previously returned by <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RSSI value. Return value of RF_GET_RSSI_ERROR_VAL indicates error case. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="2046" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1abdde833057385980d0ae1b2c844b97b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_r_f_8h_1a47ea3dea78019340e8f8ceb854de5f02" kindref="member">RF_Op</ref> *</type>
        <definition>RF_Op* RF_getCmdOp</definition>
        <argsstring>(RF_Handle h, RF_CmdHandle cmdHnd)</argsstring>
        <name>RF_getCmdOp</name>
        <param>
          <type><ref refid="_r_f_8h_1a5e8ab7fc87fb818f435d9b6226ee573f" kindref="member">RF_Handle</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="_r_f_8h_1acab1f56c62a9fd1ad0a91a46b6da23f1" kindref="member">RF_CmdHandle</ref></type>
          <declname>cmdHnd</declname>
        </param>
        <briefdescription>
<para>Get command structure pointer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Calling context : Task/SWI/HWI</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle previously returned by <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmdHnd</parametername>
</parameternamelist>
<parameterdescription>
<para>Command handle returned by <ref refid="_r_f_8h_1a2b0ee444fcb74917df94eefea804ecbb" kindref="member">RF_postCmd()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the command structure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="2057" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1a33af74f29f9d987cd64871ccd041d8a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RF_RatConfigCompare_init</definition>
        <argsstring>(RF_RatConfigCompare *channelConfig)</argsstring>
        <name>RF_RatConfigCompare_init</name>
        <param>
          <type><ref refid="struct_r_f___rat_config_compare" kindref="compound">RF_RatConfigCompare</ref> *</type>
          <declname>channelConfig</declname>
        </param>
        <briefdescription>
<para>Initialize the configuration structure to be used to set up a RAT compare event. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Calling context : Task/SWI/HWI</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channelConfig</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the compare configuration structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="2067" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1a9770b153e83093f834988b9da6b49aa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RF_RatConfigCapture_init</definition>
        <argsstring>(RF_RatConfigCapture *channelConfig)</argsstring>
        <name>RF_RatConfigCapture_init</name>
        <param>
          <type><ref refid="struct_r_f___rat_config_capture" kindref="compound">RF_RatConfigCapture</ref> *</type>
          <declname>channelConfig</declname>
        </param>
        <briefdescription>
<para>Initialize the configuration structure to be used to set up a RAT capture event. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Calling context : Task/SWI/HWI</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channelConfig</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the capture configuration structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="2077" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1adc076482a56613d62f1ec2a18b137b12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RF_RatConfigOutput_init</definition>
        <argsstring>(RF_RatConfigOutput *ioConfig)</argsstring>
        <name>RF_RatConfigOutput_init</name>
        <param>
          <type><ref refid="struct_r_f___rat_config_output" kindref="compound">RF_RatConfigOutput</ref> *</type>
          <declname>ioConfig</declname>
        </param>
        <briefdescription>
<para>Initialize the configuration structure to be used to set up a RAT IO. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Calling context : Task/SWI/HWI</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ioConfig</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the IO configuration structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="2087" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1af26945dca21f0742e7e978af6e176fea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_r_f_8h_1a58de86ad0b6cfcb04548a776976c0a7c" kindref="member">RF_RatHandle</ref></type>
        <definition>RF_RatHandle RF_ratCompare</definition>
        <argsstring>(RF_Handle rfHandle, RF_RatConfigCompare *channelConfig, RF_RatConfigOutput *ioConfig)</argsstring>
        <name>RF_ratCompare</name>
        <param>
          <type><ref refid="_r_f_8h_1a5e8ab7fc87fb818f435d9b6226ee573f" kindref="member">RF_Handle</ref></type>
          <declname>rfHandle</declname>
        </param>
        <param>
          <type><ref refid="struct_r_f___rat_config_compare" kindref="compound">RF_RatConfigCompare</ref> *</type>
          <declname>channelConfig</declname>
        </param>
        <param>
          <type><ref refid="struct_r_f___rat_config_output" kindref="compound">RF_RatConfigOutput</ref> *</type>
          <declname>ioConfig</declname>
        </param>
        <briefdescription>
<para>Setup a Radio Timer (RAT) channel in compare mode. </para>        </briefdescription>
        <detaileddescription>
<para>The RF_ratCompare() API sets up one of the three available RAT channels in compare mode. When the compare event happens at the given compare time, the registered callback is invoked.</para><para>The RF driver handles power management. If the provided compare time is far into the future (and there is no other constraint set i.e. due to radio command execution), the RF core will be powered OFF and the device will enter the lowest possible power state. The RF core will be automatically powered ON just before the registered compare event. The callback function is served upon expiration of the allocated channel. The function is invoked with event type <ref refid="_r_f_8h_1ab0302093e17c587cc4bf2c928c79960e" kindref="member">RF_EventRatCh</ref> and runs in SWI context.</para><para>The API generates a &quot;one-shot&quot; compare event. Since the channel is automatically freed before the callback is served, the same channel can be reallocated from the callback itself through a new API call.</para><para>In case there were no available channels at the time of API call, the function returns with <ref refid="_r_f_8h_1ad2e517d9efabde3a1868a274ed0f683b" kindref="member">RF_ALLOC_ERROR</ref> and no callback is invoked.</para><para>In case a runtime error occurs after the API succesfully allocated a channel, the registered callback is invoked with event type <ref refid="_r_f_8h_1aa6b858b8b383210049fa3f17dcd95fac" kindref="member">RF_EventError</ref>. A typical example is when the provided compare time is in the past and rejected by the RF core itself.</para><para>The events issued by the RAT timer can be output from the timer module through the RAT_GPO interface, and can be interconnected with other parts of the system through the RFC_GPO or the Event Fabric. The mapping between the allocated RAT channel and the selected RAT_GPO can be controlled through the optional ioConfig argument of RF_ratCompare(). The possible RAT_GPO[x] are defined in <ref refid="_r_f_8h_1aae197f40cee9a7f1582c7562e0288998" kindref="member">RF_RatOutputSelect</ref>.</para><para><simplesect kind="note"><para>Calling context : Task/SWI</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rfHandle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle previously returned by <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channelConfig</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to configuration structure needed to set up a channel in compare mode. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ioConfig</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a configuration structure to set up the RAT_GPOs for the allocated channel (optional). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Allocated RAT channel. If allocation fails, <ref refid="_r_f_8h_1ad2e517d9efabde3a1868a274ed0f683b" kindref="member">RF_ALLOC_ERROR</ref> is returned.</para></simplesect>
<simplesect kind="see"><para><ref refid="_r_f_8h_1a33af74f29f9d987cd64871ccd041d8a7" kindref="member">RF_RatConfigCompare_init()</ref>, <ref refid="_r_f_8h_1adc076482a56613d62f1ec2a18b137b12" kindref="member">RF_RatConfigOutput_init()</ref>, <ref refid="_r_f_8h_1a8376a652a71c112b1028a1f02860ad60" kindref="member">RF_ratDisableChannel()</ref>, <ref refid="_r_f_8h_1a513fd2cb2616e901d9f7a638ae9b7772" kindref="member">RF_ratCapture()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="2130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1a513fd2cb2616e901d9f7a638ae9b7772" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_r_f_8h_1a58de86ad0b6cfcb04548a776976c0a7c" kindref="member">RF_RatHandle</ref></type>
        <definition>RF_RatHandle RF_ratCapture</definition>
        <argsstring>(RF_Handle rfHandle, RF_RatConfigCapture *channelConfig, RF_RatConfigOutput *ioConfig)</argsstring>
        <name>RF_ratCapture</name>
        <param>
          <type><ref refid="_r_f_8h_1a5e8ab7fc87fb818f435d9b6226ee573f" kindref="member">RF_Handle</ref></type>
          <declname>rfHandle</declname>
        </param>
        <param>
          <type><ref refid="struct_r_f___rat_config_capture" kindref="compound">RF_RatConfigCapture</ref> *</type>
          <declname>channelConfig</declname>
        </param>
        <param>
          <type><ref refid="struct_r_f___rat_config_output" kindref="compound">RF_RatConfigOutput</ref> *</type>
          <declname>ioConfig</declname>
        </param>
        <briefdescription>
<para>Setup a Radio Timer (RAT) channel in capture mode. </para>        </briefdescription>
        <detaileddescription>
<para>The RF_ratCapture() API sets up one of the three avaialble RAT channels in capture mode. The registered callback is invoked on the capture event.</para><para>The RF driver handles power management. If the RF core is OFF when the RF_ratCapture() is called, it will be powered ON immediately and the RAT channel will be configured to capture mode. As long as at least one of the three RAT channels are in capture mode, the RF core will be kept ON. The callback function is served upon a capture event occurs. The function is invoked with event type RF_EventRatCh and runs in SWI context.</para><para>In case the channel is configured into single capture mode, the channel is automatically freed before the callback is called. In repeated capture mode, the channel remains allocated and automatically rearmed.</para><para>In case there were no available channels at the time of API call, the function returns with <ref refid="_r_f_8h_1ad2e517d9efabde3a1868a274ed0f683b" kindref="member">RF_ALLOC_ERROR</ref> and no callback is invoked.</para><para>In case a runtime error occurs after the API succesfully allocated a channel, the registered callback is invoked with event type <ref refid="_r_f_8h_1aa6b858b8b383210049fa3f17dcd95fac" kindref="member">RF_EventError</ref>. A typical example is when the provided compare time is in the past and rejected by the RF core itself.</para><para>The events issued by the RAT timer can be output from the timer module through the RAT_GPO interface, and can be interconnected with other parts of the system through the RFC_GPO or the Event Fabric. The mapping between the allocated RAT channel and the selected RAT_GPO can be controlled through the optional ioConfig argument of RF_ratCapture(). The possible RAT_GPO[x] are defined in <ref refid="_r_f_8h_1aae197f40cee9a7f1582c7562e0288998" kindref="member">RF_RatOutputSelect</ref>. Note that this configuration is independent of the source signal of the capture event.</para><para><simplesect kind="note"><para>Calling context : Task/SWI</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rfHandle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle previously returned by <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channelConfig</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to configuration structure needed to set up a channel in compare mode. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ioConfig</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a configuration structure to set up the RAT_GPO for the allocated channel (optional). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Allocated RAT channel. If allocation fails, <ref refid="_r_f_8h_1ad2e517d9efabde3a1868a274ed0f683b" kindref="member">RF_ALLOC_ERROR</ref> is returned.</para></simplesect>
<simplesect kind="see"><para><ref refid="_r_f_8h_1a9770b153e83093f834988b9da6b49aa1" kindref="member">RF_RatConfigCapture_init()</ref>, <ref refid="_r_f_8h_1adc076482a56613d62f1ec2a18b137b12" kindref="member">RF_RatConfigOutput_init()</ref> , <ref refid="_r_f_8h_1a8376a652a71c112b1028a1f02860ad60" kindref="member">RF_ratDisableChannel()</ref>, <ref refid="_r_f_8h_1af26945dca21f0742e7e978af6e176fea" kindref="member">RF_ratCompare()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="2171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1a8376a652a71c112b1028a1f02860ad60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988f" kindref="member">RF_Stat</ref></type>
        <definition>RF_Stat RF_ratDisableChannel</definition>
        <argsstring>(RF_Handle rfHandle, RF_RatHandle ratHandle)</argsstring>
        <name>RF_ratDisableChannel</name>
        <param>
          <type><ref refid="_r_f_8h_1a5e8ab7fc87fb818f435d9b6226ee573f" kindref="member">RF_Handle</ref></type>
          <declname>rfHandle</declname>
        </param>
        <param>
          <type><ref refid="_r_f_8h_1a58de86ad0b6cfcb04548a776976c0a7c" kindref="member">RF_RatHandle</ref></type>
          <declname>ratHandle</declname>
        </param>
        <briefdescription>
<para>Disable a RAT channel. </para>        </briefdescription>
        <detaileddescription>
<para>The <ref refid="_r_f_8h_1a58de86ad0b6cfcb04548a776976c0a7c" kindref="member">RF_RatHandle</ref> returned by the <ref refid="_r_f_8h_1af26945dca21f0742e7e978af6e176fea" kindref="member">RF_ratCompare()</ref> or <ref refid="_r_f_8h_1a513fd2cb2616e901d9f7a638ae9b7772" kindref="member">RF_ratCapture()</ref> APIs can be used for further interaction with the Radio Timer. Passing the handle to RF_ratDisableChannel() will abort a compare/capture event, and the provided channel is deallocated. No callback is invoked. This API can be called both if the RF core is ON or OFF. After the channel is freed, the next radio event will be rescheduled. A typical use case if a channel is configured in repeated capture mode, and the application decides to abort this operation.</para><para><simplesect kind="note"><para>Calling context : Task/SWI</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rfHandle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle previously returned by <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratHandle</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="_r_f_8h_1a58de86ad0b6cfcb04548a776976c0a7c" kindref="member">RF_RatHandle</ref> returned by <ref refid="_r_f_8h_1af26945dca21f0742e7e978af6e176fea" kindref="member">RF_ratCompare()</ref> or <ref refid="_r_f_8h_1a513fd2cb2616e901d9f7a638ae9b7772" kindref="member">RF_ratCapture()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988f" kindref="member">RF_Stat</ref> indicates if command was successfully completed.</para></simplesect>
<simplesect kind="see"><para><ref refid="_r_f_8h_1af26945dca21f0742e7e978af6e176fea" kindref="member">RF_ratCompare()</ref>, <ref refid="_r_f_8h_1a513fd2cb2616e901d9f7a638ae9b7772" kindref="member">RF_ratCapture()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="2190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1aa31772d56afb197fd812d24aa6f07f1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988f" kindref="member">RF_Stat</ref></type>
        <definition>RF_Stat RF_control</definition>
        <argsstring>(RF_Handle h, int8_t ctrl, void *args)</argsstring>
        <name>RF_control</name>
        <param>
          <type><ref refid="_r_f_8h_1a5e8ab7fc87fb818f435d9b6226ee573f" kindref="member">RF_Handle</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>ctrl</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Set RF control parameters. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Calling context : Task</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle previously returned by <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctrl</parametername>
</parameternamelist>
<parameterdescription>
<para>Control codes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to control arguments </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RF_Stat indicates if API call was successfully completed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="2202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1a40a5506c05a11a3cd9d379cedad5b5d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988f" kindref="member">RF_Stat</ref></type>
        <definition>RF_Stat RF_requestAccess</definition>
        <argsstring>(RF_Handle h, RF_AccessParams *pParams)</argsstring>
        <name>RF_requestAccess</name>
        <param>
          <type><ref refid="_r_f_8h_1a5e8ab7fc87fb818f435d9b6226ee573f" kindref="member">RF_Handle</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="struct_r_f___access_params" kindref="compound">RF_AccessParams</ref> *</type>
          <declname>pParams</declname>
        </param>
        <briefdescription>
<para>Request radio access. <linebreak/>
 </para>        </briefdescription>
        <detaileddescription>
<para>Scope:<orderedlist>
<listitem><para>Only suppports request access which start immediately.<linebreak/>
</para></listitem><listitem><para>The <ref refid="struct_r_f___access_params" kindref="compound">RF_AccessParams</ref> duration should be less than a pre-defined value RF_REQ_ACCESS_MAX_DUR_US in RFCC26XX_multiMode.c.<linebreak/>
</para></listitem><listitem><para>The <ref refid="struct_r_f___access_params" kindref="compound">RF_AccessParams</ref> priority should be set RF_PriorityHighest.<linebreak/>
</para></listitem><listitem><para>Single request for a client at anytime.<linebreak/>
</para></listitem><listitem><para>Command from different client are blocked untill the radio access period is completed.<linebreak/>
</para></listitem></orderedlist>
</para><para><simplesect kind="note"><para>Calling context : Task</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle previously returned by <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pParams</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to RF_AccessRequest parameters </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RF_Stat indicates if API call was successfully completed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="2222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1aed02cc74cc7da5d2be9c0fb68ab5efc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_r_f___tx_power_table___value" kindref="compound">RF_TxPowerTable_Value</ref></type>
        <definition>RF_TxPowerTable_Value RF_getTxPower</definition>
        <argsstring>(RF_Handle h)</argsstring>
        <name>RF_getTxPower</name>
        <param>
          <type><ref refid="_r_f_8h_1a5e8ab7fc87fb818f435d9b6226ee573f" kindref="member">RF_Handle</ref></type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Returns the currently configured transmit power configuration. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the currently configured transmit power configuration under the assumption that it has been previously set by <ref refid="_r_f_8h_1a45ae701a298b6f4cddbc845333e61ad5" kindref="member">RF_setTxPower()</ref>. The value might be used for reverse lookup in a TX power table. If no power has been programmed, it returns an invalid value.</para><para><programlisting><codeline><highlight class="normal">RF_TxPowerTable_Value<sp/>value<sp/>=<sp/>RF_getTxPower(handle);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(value.rawValue<sp/>==<sp/>RF_TxPowerTable_INVALID_VALUE)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>error,<sp/>value<sp/>not<sp/>valid</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle previously returned by <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PA configuration struct</para></simplesect>
<simplesect kind="see"><para><ref refid="_r_f_8h_1a45ae701a298b6f4cddbc845333e61ad5" kindref="member">RF_setTxPower()</ref>, <ref refid="_r_f_8h_1a93d89aa05a52d9427b5dd2a84cc2d3a3" kindref="member">RF_TxPowerTable_findPowerLevel()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="2243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1a45ae701a298b6f4cddbc845333e61ad5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988f" kindref="member">RF_Stat</ref></type>
        <definition>RF_Stat RF_setTxPower</definition>
        <argsstring>(RF_Handle h, RF_TxPowerTable_Value value)</argsstring>
        <name>RF_setTxPower</name>
        <param>
          <type><ref refid="_r_f_8h_1a5e8ab7fc87fb818f435d9b6226ee573f" kindref="member">RF_Handle</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type><ref refid="struct_r_f___tx_power_table___value" kindref="compound">RF_TxPowerTable_Value</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Updates the transmit power configuration of the RF core. </para>        </briefdescription>
        <detaileddescription>
<para>This function programs a new TX power <emphasis>value</emphasis> and returns a status code. If the RF core is active, it will be updated immediately with the new value. If the RF core is not active, only the configuration structures will be updated and the new TX power will become effective during the next power up.</para><para>Some devices provide a high-power PA. It is not allowed to switch between the a high-power PA value and default PA power level without re-running a setup command.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle previously returned by <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>TX power configuration value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988faa98bd78e437864464cdb2aca1d3e024d" kindref="member">RF_StatSuccess</ref> on success, otherwise <ref refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988fac071b8de44aabb8e2354432ce1146b86" kindref="member">RF_StatError</ref>.</para></simplesect>
<simplesect kind="see"><para><ref refid="_r_f_8h_1aed02cc74cc7da5d2be9c0fb68ab5efc3" kindref="member">RF_getTxPower()</ref>, <ref refid="struct_r_f___tx_power_table___value" kindref="compound">RF_TxPowerTable_Value</ref>, <ref refid="_r_f_8h_1a8b8022d01ade500a5cd6bd46b9bc8d26" kindref="member">RF_TxPowerTable_findValue()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="2262" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1a93d89aa05a52d9427b5dd2a84cc2d3a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t RF_TxPowerTable_findPowerLevel</definition>
        <argsstring>(RF_TxPowerTable_Entry table[], RF_TxPowerTable_Value value)</argsstring>
        <name>RF_TxPowerTable_findPowerLevel</name>
        <param>
          <type><ref refid="struct_r_f___tx_power_table___entry" kindref="compound">RF_TxPowerTable_Entry</ref></type>
          <declname>table</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="struct_r_f___tx_power_table___value" kindref="compound">RF_TxPowerTable_Value</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Retrieves a power level in dBm for a given power configuration value. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>RF_TxPowerTable_findPowerLevel</computeroutput>() searches in a lookup <emphasis>table</emphasis> for a given transmit power configuration <emphasis>value</emphasis> and returns the power level in dBm if a matching configuration is found. If <emphasis>value</emphasis> can not be found, <ref refid="_r_f_8h_1aeacd75e63906befa8ca215a9779da3c4" kindref="member">RF_TxPowerTable_INVALID_DBM</ref> is returned.</para><para>This function does a reverse lookup compared to <ref refid="_r_f_8h_1a8b8022d01ade500a5cd6bd46b9bc8d26" kindref="member">RF_TxPowerTable_findValue()</ref> and has O(n). It is assumed that <emphasis>table</emphasis> is terminated by a <ref refid="_r_f_8h_1a7c926278bbbb8d6559765dce2557489b" kindref="member">RF_TxPowerTable_TERMINATION_ENTRY</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>List of <ref refid="struct_r_f___tx_power_table___entry" kindref="compound">RF_TxPowerTable_Entry</ref> entries, terminated by <ref refid="_r_f_8h_1a7c926278bbbb8d6559765dce2557489b" kindref="member">RF_TxPowerTable_TERMINATION_ENTRY</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Power configuration value.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Human readable power level in dBm on success, otherwise <ref refid="_r_f_8h_1aeacd75e63906befa8ca215a9779da3c4" kindref="member">RF_TxPowerTable_INVALID_DBM</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="2282" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_r_f_8h_1a8b8022d01ade500a5cd6bd46b9bc8d26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_r_f___tx_power_table___value" kindref="compound">RF_TxPowerTable_Value</ref></type>
        <definition>RF_TxPowerTable_Value RF_TxPowerTable_findValue</definition>
        <argsstring>(RF_TxPowerTable_Entry table[], int8_t powerLevel)</argsstring>
        <name>RF_TxPowerTable_findValue</name>
        <param>
          <type><ref refid="struct_r_f___tx_power_table___entry" kindref="compound">RF_TxPowerTable_Entry</ref></type>
          <declname>table</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int8_t</type>
          <declname>powerLevel</declname>
        </param>
        <briefdescription>
<para>Retrieves a power configuration value for a given power level in dBm. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>RF_TxPowerTable_findValue</computeroutput>() searches in a lookup <emphasis>table</emphasis> for a given transmit power level <emphasis>powerLevel</emphasis> in dBm and returns a matching power configuration. If <emphasis>powerLevel</emphasis> can not be found, <ref refid="_r_f_8h_1a6a7214e79d17615ac34efbad207ca33f" kindref="member">RF_TxPowerTable_INVALID_VALUE</ref> is returned.</para><para>This function performs a linear search in <emphasis>table</emphasis> and has O(n). It is assumed that <emphasis>table</emphasis> is defined in ascending order and is terminated by a <ref refid="_r_f_8h_1a7c926278bbbb8d6559765dce2557489b" kindref="member">RF_TxPowerTable_TERMINATION_ENTRY</ref>.</para><para>The following special values for <emphasis>powerLevel</emphasis> are also accepted:</para><para><itemizedlist>
<listitem><para><ref refid="_r_f_8h_1aa3c3699366e0ac3271098ca9ec140002" kindref="member">RF_TxPowerTable_MIN_DBM</ref> which returns always the lowest power value in the table</para></listitem><listitem><para><ref refid="_r_f_8h_1a689c0791e8141ea53d814dde2e7e0217" kindref="member">RF_TxPowerTable_MAX_DBM</ref> which returns always the highest power value in the table</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>List of <ref refid="struct_r_f___tx_power_table___entry" kindref="compound">RF_TxPowerTable_Entry</ref> entries, terminated by <ref refid="_r_f_8h_1a7c926278bbbb8d6559765dce2557489b" kindref="member">RF_TxPowerTable_TERMINATION_ENTRY</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>powerLevel</parametername>
</parameternamelist>
<parameterdescription>
<para>Human-readable power level in dBm.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PA configuration value on success. otherwise <ref refid="_r_f_8h_1a6a7214e79d17615ac34efbad207ca33f" kindref="member">RF_TxPowerTable_INVALID_VALUE</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h" line="2308" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>RF core driver for the CC13xx/CC26xx device family. </para>    </briefdescription>
    <detaileddescription>
<para>To use the RF driver, ensure that the correct driver library for your device is linked in and include this header file as follows:</para><para><programlisting><codeline><highlight class="normal"><sp/>#include</highlight></codeline>
<codeline><highlight class="normal">&lt;ti/drivers/rf/RF.h&gt;</highlight></codeline>
</programlisting></para><para>The RF driver provides access to the radio core on the CC13xx/CC26xx device family. It offers a high-level interface for command execution and to the radio timer (RAT). The RF driver ensures the lowest possible power consumption by providing automatic power management that is fully transparent for the application.</para><para>This document describes the features and usage of the RF driver API. For a detailed explanation of the RF core, please refer to the Technical Reference Manual or the Proprietary RF user&apos;s guide. Key features are:</para><para><itemizedlist>
<listitem><para><ref refid="_r_f_8h_1rf_command_execution" kindref="member">Synchronous execution of direct and immediate radio commands</ref>,</para></listitem><listitem><para><ref refid="_r_f_8h_1rf_command_execution" kindref="member">Synchronous and asynchronous execution of radio operation commands</ref>,</para></listitem><listitem><para>Various <ref refid="_r_f_8h_1rf_event_callbacks" kindref="member">event hooks</ref> to interact with RF commands and the RF driver,</para></listitem><listitem><para>Automatic <ref refid="_r_f_8h_1rf_power_management" kindref="member">power management</ref>,</para></listitem><listitem><para><ref refid="_r_f_8h_1rf_scheduling" kindref="member">Preemptive scheduler for RF operations</ref> of different RF driver instances,</para></listitem><listitem><para>Convenient <ref refid="_r_f_8h_1rf_rat" kindref="member">Access to the radio timer</ref> (RAT).</para></listitem><listitem><para><ref refid="_r_f_8h_1rf_tx_power" kindref="member">Programming the TX power level</ref>.</para></listitem></itemizedlist>
</para><para><anchor id="_r_f_8h_1rf_setup_and_configuration"/><heading level="1">Setup and configuration </heading>
</para><para>The RF driver can be configured at 4 different places:</para><para><orderedlist>
<listitem><para>In the build configuration by chosing either the single-client or multi-client driver version.</para></listitem><listitem><para>At compile-time by setting hardware and software interrupt priorities in the board support file.</para></listitem><listitem><para>During run-time initialization by setting <ref refid="struct_r_f___params" kindref="compound">RF_Params</ref> when calling <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref>.</para></listitem><listitem><para>At run-time via <ref refid="_r_f_8h_1aa31772d56afb197fd812d24aa6f07f1b" kindref="member">RF_control()</ref>.</para></listitem></orderedlist>
</para><para><heading level="2">Build configuration </heading>
</para><para>The RF driver comes in two versions: single-client and multi-client. The single-client version allows only one driver instance to access the RF core at a time. The multi-client driver version allows concurrent access to the RF core with different RF settings. The multi-client driver has a slightly larger footprint and is not needed for many proprietary applications. The driver version can be selected in the build configuration by linking either against a RFCC26XX_singleMode or RFCC26XX_multiMode prebuilt library. When using the single-client driver, <computeroutput>RF_SINGLEMODE</computeroutput> has to be defined globally in the build configuration. The multi-client driver is the default configuration in the SimpleLink SDKs.</para><para><heading level="2">Board configuration </heading>
</para><para>The RF driver handles RF core hardware interrupts and uses software interrupts for its internal state machine. For managing the interrupt priorities, it expects the existance of a global <ref refid="struct_r_f_c_c26_x_x___h_w_attrs_v2" kindref="compound">RFCC26XX_HWAttrsV2</ref> object. This is usually defined in the board support file, for example <computeroutput>CC1310_LAUNCHXL.c</computeroutput>, but when developing on custom boards, it might be kept anywhere in the application. By default, the priorities are set to the lowest possible value:</para><para><programlisting><codeline><highlight class="normal">const<sp/>RFCC26XX_HWAttrsV2<sp/>RFCC26XX_hwAttrs<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.hwiPriority<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>INT_PRI_LEVEL7,<sp/><sp/>//<sp/>Lowest<sp/>HWI<sp/>priority:<sp/><sp/>INT_PRI_LEVEL7</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Highest<sp/>HWI<sp/>priority:<sp/>INT_PRI_LEVEL1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.swiPriority<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Lowest<sp/>SWI<sp/>priority:<sp/><sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Highest<sp/>SWI<sp/>priority:<sp/>Swi.numPriorities<sp/>-<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.xoscHfAlwaysNeeded<sp/>=<sp/>true<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Power<sp/>driver<sp/>always<sp/>starts<sp/>XOSC-HF:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>true</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>RF<sp/>driver<sp/>will<sp/>request<sp/>XOSC-HF<sp/>if<sp/>needed:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para><heading level="2">Initialization </heading>
</para><para>When initiating an RF driver instance, the function <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref> accepts a pointer to a <ref refid="struct_r_f___params" kindref="compound">RF_Params</ref> object which might set several driver parameters. In addition, it expects an <ref refid="struct_r_f___mode" kindref="compound">RF_Mode</ref> object and a setup command which is usually generated by SmartRF Studio:</para><para><programlisting><codeline><highlight class="normal">RF_Params<sp/>rfParams;</highlight></codeline>
<codeline><highlight class="normal">RF_Params_init(&amp;rfParams);</highlight></codeline>
<codeline><highlight class="normal">rfParams.nInactivityTimeout<sp/>=<sp/>2000;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">RF_Handle<sp/>rfHandle<sp/>=<sp/>RF_open(&amp;rfObject,<sp/>&amp;RF_prop,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(RF_RadioSetup*)&amp;RF_cmdPropRadioDivSetup,<sp/>&amp;rfParams);</highlight></codeline>
</programlisting></para><para>The function <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref> returns a driver handle that is used for accessing the correct driver instance. Please note that the first RF operation command before an RX or TX operation command must be a <computeroutput>CMD_FS</computeroutput> to set the synthesizer frequency. The RF driver caches both, the pointer to the setup command and the physical <computeroutput>CMD_FS</computeroutput> for automatic power management.</para><para><heading level="2">Run-time configuration </heading>
</para><para>While a driver instance is opened, it can be re-configured with the function <ref refid="_r_f_8h_1aa31772d56afb197fd812d24aa6f07f1b" kindref="member">RF_control()</ref>. Various configuration parameters <ref refid="_r_f_8h_1RF_CTRL" kindref="member">RF_CTRL</ref> are available. Example:</para><para><programlisting><codeline><highlight class="normal">uint32_t<sp/>timeoutUs<sp/>=<sp/>2000;</highlight></codeline>
<codeline><highlight class="normal">RF_control(rfHandle,<sp/>RF_CTRL_SET_INACTIVITY_TIMEOUT,<sp/>&amp;timeoutUs);</highlight></codeline>
</programlisting></para><para><anchor id="_r_f_8h_1rf_command_execution"/><heading level="1">Command execution </heading>
</para><para>The RF core supports 3 different kinds of commands:</para><para><orderedlist>
<listitem><para>Direct commands</para></listitem><listitem><para>Immediate commands</para></listitem><listitem><para>Radio operation commands</para></listitem></orderedlist>
</para><para>Direct and immediate commands are dispatched via <ref refid="_r_f_8h_1aafce617271300f2bee1a52ebda6d654e" kindref="member">RF_runDirectCmd()</ref> and <ref refid="_r_f_8h_1a6159b409f8d99954529a8ebf6f98cd85" kindref="member">RF_runImmediateCmd()</ref> respectively. These functions block until the command has completed and return a status code of the type <ref refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988f" kindref="member">RF_Stat</ref> when done.</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/devices/${DEVICE_FAMILY}/driverlib/rf_common_cmd.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">RF_Stat<sp/>status<sp/>=<sp/>RF_runDirectCmd(rfHandle,<sp/>CMD_ABORT);</highlight></codeline>
<codeline><highlight class="normal">assert(status<sp/>==<sp/>RF_StatCmdDoneSuccess);</highlight></codeline>
</programlisting></para><para>Radio operation commands are potentially long-running commands and support different triggers as well as conditional execution. Only one command can be executed at a time, but the RF driver provides an internal queue that stores commands until the RF core is free. Two interfaces are provided for radio operation commands:</para><para><orderedlist>
<listitem><para>Asynchronous: <ref refid="_r_f_8h_1a2b0ee444fcb74917df94eefea804ecbb" kindref="member">RF_postCmd()</ref> and <ref refid="_r_f_8h_1a91c1cb2508311f822acbc08ace568a83" kindref="member">RF_pendCmd()</ref></para></listitem><listitem><para>Synchronous: <ref refid="_r_f_8h_1a248bebdd1d0bd6e0812cf18116987e54" kindref="member">RF_runCmd()</ref></para></listitem></orderedlist>
</para><para>The asynchronous function <ref refid="_r_f_8h_1a2b0ee444fcb74917df94eefea804ecbb" kindref="member">RF_postCmd()</ref> posts a radio operation into the driver&apos;s internal command queue and returns a command handle of the type <ref refid="_r_f_8h_1acab1f56c62a9fd1ad0a91a46b6da23f1" kindref="member">RF_CmdHandle</ref> which is an index in the command queue. The command is dispatched as soon as the RF core has completed any previous radio operation command.</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/devices/${DEVICE_FAMILY}/driverlib/rf_common_cmd.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">RF_Callback<sp/>callback<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">RF_EventMask<sp/>subscribedEvents<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">RF_CmdHandle<sp/>rxCommandHandle<sp/>=<sp/>RF_postCmd(rfHandle,<sp/>(RF_Op*)&amp;RF_cmdRx,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RF_PriorityNormal,<sp/>callback,<sp/>subscribedEvents);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">assert(rxCommandHandle<sp/>!=<sp/>RF_ALLOC_ERROR);<sp/>//<sp/>The<sp/>command<sp/>queue<sp/>is<sp/>full.</highlight></codeline>
</programlisting></para><para>Command execution happens in background. The calling task may proceed with other work or execute direct and immediate commands to interact with the posted radio operation. But beware that the posted command might not have started, yet. By calling the function <ref refid="_r_f_8h_1a91c1cb2508311f822acbc08ace568a83" kindref="member">RF_pendCmd()</ref> and subscribing events of the type <ref refid="_r_f_8h_1a128c46e18dbbaa781abb7abafc35233a" kindref="member">RF_EventMask</ref>, it is possible to re-synchronize to a posted command:</para><para><programlisting><codeline><highlight class="normal">//<sp/>RF_EventRxEntryDone<sp/>must<sp/>have<sp/>been<sp/>subscribed<sp/>in<sp/>RF_postCmd().</highlight></codeline>
<codeline><highlight class="normal">RF_EventMask<sp/>events<sp/>=<sp/>RF_pendCmd(rfHandle,<sp/>rxCommandHandle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RF_EventRxEntryDone);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Program<sp/>proceeds<sp/>after<sp/>RF_EventRxEntryDone<sp/>or<sp/>after<sp/>a<sp/>termination<sp/>event.</highlight></codeline>
</programlisting></para><para>The function <ref refid="_r_f_8h_1a248bebdd1d0bd6e0812cf18116987e54" kindref="member">RF_runCmd()</ref> is a combination of both, <ref refid="_r_f_8h_1a2b0ee444fcb74917df94eefea804ecbb" kindref="member">RF_postCmd()</ref> and <ref refid="_r_f_8h_1a91c1cb2508311f822acbc08ace568a83" kindref="member">RF_pendCmd()</ref> and allows synchronous execution.</para><para>A pending or already running command might be aborted at any time by calling the function <ref refid="_r_f_8h_1aabe22ceae13a372be4ba135318aa849a" kindref="member">RF_cancelCmd()</ref> or <ref refid="_r_f_8h_1ae3ff5c614f4a63cb4e79c90f9229149a" kindref="member">RF_flushCmd()</ref>. These functions take command handles as parameters, but can also just abort anything in the RF driver&apos;s queue:</para><para><programlisting><codeline><highlight class="normal">uint8_t<sp/>abortGraceful<sp/>=<sp/>1;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Abort<sp/>a<sp/>single<sp/>command</highlight></codeline>
<codeline><highlight class="normal">RF_cancelCmd(rfHandle,<sp/>rxCommandHandle,<sp/>abortGraceful);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Abort<sp/>anything</highlight></codeline>
<codeline><highlight class="normal">RF_flushCmd(rfHandle,<sp/>RF_CMDHANDLE_FLUSH_ALL,<sp/>abortGraceful);</highlight></codeline>
</programlisting></para><para>When aborting a command, the return value of <ref refid="_r_f_8h_1a248bebdd1d0bd6e0812cf18116987e54" kindref="member">RF_runCmd()</ref> or <ref refid="_r_f_8h_1a91c1cb2508311f822acbc08ace568a83" kindref="member">RF_pendCmd()</ref> will contain the termination reason in form of event flags. If the command is in the RF driver queue, but has not yet start, the <ref refid="_r_f_8h_1ae6d21f9806a7482a0f324f98bb83aac0" kindref="member">RF_EventCmdCancelled</ref> event is raised.</para><para><anchor id="_r_f_8h_1rf_event_callbacks"/><heading level="1">Event callbacks </heading>
</para><para>The RF core generates multiple interrupts during command execution. The RF driver maps these interrupts 1:1 to callback events of the type <ref refid="_r_f_8h_1a128c46e18dbbaa781abb7abafc35233a" kindref="member">RF_EventMask</ref>. Hence, it is unnecessary to implement own interrupt handlers. Callback events are divided into 3 groups:</para><para><itemizedlist>
<listitem><para>Command-specific events, documented for each radio operation command. An example is the <ref refid="_r_f_8h_1a7051110a4a1fdd459866195be774a2b0" kindref="member">RF_EventRxEntryDone</ref> for the <computeroutput>CMD_PROP_RX</computeroutput>.</para></listitem><listitem><para>Generic events, defined for all radio operations and originating on the RF core. These are for instance <ref refid="_r_f_8h_1aa1534b443f03187f07f55b0198306a27" kindref="member">RF_EventCmdDone</ref> and <ref refid="_r_f_8h_1a2d60db886271cf8e08c7b6b2f5e534f1" kindref="member">RF_EventLastCmdDone</ref>. Both events indicate the termination of one or more RF operations.</para></listitem><listitem><para>Generic events, defined for all radio operations and originating in the RF driver, for instance <ref refid="_r_f_8h_1ae6d21f9806a7482a0f324f98bb83aac0" kindref="member">RF_EventCmdCancelled</ref>.</para></listitem></itemizedlist>
</para><para>See also <ref refid="_r_f_8h_1RF_Core_Events" kindref="member">RF_Core_Events</ref>, <ref refid="_r_f_8h_1RF_Driver_Events" kindref="member">RF_Driver_Events</ref>.</para><para>How callback events are subscribed was shown in the previous section. The following snippet shows a typical event handler callback for a proprietary RX operation:</para><para><programlisting><codeline><highlight class="normal">void<sp/>rxCallback(RF_Handle<sp/>handle,<sp/>RF_CmdHandle<sp/>command,<sp/>RF_EventMask<sp/>events)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(events<sp/>&amp;<sp/>RF_EventRxEntryDone)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Semaphore_post(rxPacketSemaphore);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(events<sp/>&amp;<sp/>RF_EventLastCmdDone)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>In addition, the RF driver can generate error and power-up events that do not relate directly to the execution of a radio command. Such events can be subscribed by specifying the callback function pointers <ref refid="struct_r_f___params_1ab7be231b23fab2503b8c54b474fba74d" kindref="member">RF_Params::pErrCb</ref> and <ref refid="struct_r_f___params_1ae683ebc129d40a11fb9ec7e371f1e11b" kindref="member">RF_Params::pPowerCb</ref>.</para><para>All callback functions run in software interrupt (SWI) context. Therefore, only a minimum amount of code should be executed. When using absolute timed commands with tight timing constraints, then it is recommended to set the RF driver SWIs to a high priority. See <ref refid="_r_f_8h_1rf_setup_and_configuration" kindref="member">Setup and configuration</ref> for more details.</para><para><anchor id="_r_f_8h_1rf_power_management"/><heading level="1">Power management </heading>
</para><para>The RF core is a hardware peripheral and can be switched on and off. The RF driver handles that automatically and provides the following power optimization features:</para><para><itemizedlist>
<listitem><para>Lazy power-up and radio setup caching</para></listitem><listitem><para>Power-down on inactivity</para></listitem><listitem><para>Deferred dispatching of commands with absolute timing</para></listitem></itemizedlist>
</para><para><heading level="2">Lazy power-up and radio setup caching </heading>
</para><para>The RF core optimizes the power consumption by enabling the RF core as late as possible. For instance does <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref> not power up the RF core immediately. Instead, it waits until the first radio operation command is dispatched by <ref refid="_r_f_8h_1a2b0ee444fcb74917df94eefea804ecbb" kindref="member">RF_postCmd()</ref> or <ref refid="_r_f_8h_1a248bebdd1d0bd6e0812cf18116987e54" kindref="member">RF_runCmd()</ref>.</para><para>The function <ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open()</ref> takes a radio setup command as parameter and expects a <computeroutput>CMD_FS</computeroutput> command to follow. The pointer to the radio setup command and the whole <computeroutput>CMD_FS</computeroutput> command are cached internally in the RF driver. They will be used for every proceeding power-up procedure. Whenever the client re-runs a setup command or a <computeroutput>CMD_FS</computeroutput> command, the driver updates its internal cache with the new settings.</para><para>By default, the RF driver measures the time that it needs for the power-up procedure and uses that as an estimate for the next power cycle. On the CC13x0/CC26x0 devices, power-up takes usually 1.6 ms. Automatic measurement can be suppressed by specifying a custom power-up time with <ref refid="struct_r_f___params_1a58dc682aa09acabe6411ea186dd3aebf" kindref="member">RF_Params::nPowerUpDuration</ref>. In addition, the client might set <ref refid="struct_r_f___params_1a848ebeabce42f87f6a1d4f51f908dbe4" kindref="member">RF_Params::nPowerUpDurationMargin</ref> to cover any uncertainity when doing automatic measurements. This is necessary in applications with a high hardware interrupt load which can delay the RF driver&apos;s internal state machine execution.</para><para><heading level="2">Power-down on inactivity </heading>
</para><para>Whenever a radio operation completes and there is no other radio operation in the queue, the RF core might be powered down. There are two options in the RF driver:</para><para><itemizedlist>
<listitem><para><bold>Automatic power-down</bold> by setting the parameter <ref refid="struct_r_f___params_1a01d3752799ea4318bbf9d1384cb49b97" kindref="member">RF_Params::nInactivityTimeout</ref>. The RF core will then start a timer after the last command in the queue has completed. The default timeout is &quot;forever&quot; and this feature is disabled.</para></listitem><listitem><para><bold>Manual power-down</bold> by calling <ref refid="_r_f_8h_1a299ada7963c727a40466d7d1bb7296a3" kindref="member">RF_yield()</ref>. The client should do this whenever it knows that no further radio operation will be executed for a couple of milliseconds.</para></listitem></itemizedlist>
</para><para>During the power-down procedure the RF driver stops the radio timer and saves a synchronization timestamp for the next power-up. This keeps the radio timer virtually in sync with the RTC even though it is not running all the time. The synchronization is done in hardware.</para><para><heading level="2">Deferred dispatching of commands with absolute timing </heading>
</para><para>When dispatching a radio operation command with an absolute start trigger that is ahead in the future, the RF driver defers the execution and powers the RF core down until the command is due. It does that only, when:</para><para><orderedlist>
<listitem><para><computeroutput>cmd.startTrigger.triggerType</computeroutput> is set to <computeroutput>TRIG_ABSTIME</computeroutput></para></listitem><listitem><para>The difference between <ref refid="_r_f_8h_1aedfdf0bdf0f64a071d50a6d78446fef4" kindref="member">RF_getCurrentTime()</ref> and <computeroutput>cmd.startTime</computeroutput> is at not more than 3/4 of a full RAT cycle. Otherwise the driver assumes that <computeroutput>cmd.startTime</computeroutput> is in the past.</para></listitem><listitem><para>There is enough time to run a full power cycle before <computeroutput>cmd.startTime</computeroutput> is due. That includes:<itemizedlist>
<listitem><para>the power-down time (fixed value, 1 ms) if the RF core is already powered up,</para></listitem><listitem><para>the measured power-up duration or the value specified by <ref refid="struct_r_f___params_1a58dc682aa09acabe6411ea186dd3aebf" kindref="member">RF_Params::nPowerUpDuration</ref>,</para></listitem><listitem><para>the power-up safety margin <ref refid="struct_r_f___params_1a848ebeabce42f87f6a1d4f51f908dbe4" kindref="member">RF_Params::nPowerUpDurationMargin</ref> (the default is 282 microseconds).</para></listitem></itemizedlist>
</para></listitem></orderedlist>
</para><para>If one of the conditions are not fullfilled, the RF core is kept up and running and the command is dispatched immediately. This ensures, that the command will execute on-time and not miss the configured start trigger.</para><para><anchor id="_r_f_8h_1rf_scheduling"/><heading level="1">Preemptive scheduling of RF commands in multi-client applications </heading>
</para><para>Schedule BLE and proprietary radio commands.</para><para><programlisting><codeline><highlight class="normal">RF_Object<sp/>rfObject_ble;</highlight></codeline>
<codeline><highlight class="normal">RF_Object<sp/>rfObject_prop;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">RF_Handle<sp/>rfHandle_ble,<sp/>rfHandle_prop;</highlight></codeline>
<codeline><highlight class="normal">RF_Params<sp/>rfParams_ble,<sp/>rfParams_prop;</highlight></codeline>
<codeline><highlight class="normal">RF_ScheduleCmdParams<sp/>schParams_ble,<sp/>schParams_prop;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">RF_Mode<sp/>rfMode_ble<sp/>=</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.rfMode<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RF_MODE_MULTIPLE,<sp/><sp/>//<sp/>rfMode<sp/>for<sp/>dual<sp/>mode</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.cpePatchFxn<sp/>=<sp/>&amp;rf_patch_cpe_ble,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.mcePatchFxn<sp/>=<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.rfePatchFxn<sp/>=<sp/>&amp;rf_patch_rfe_ble,</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">RF_Mode<sp/>rfMode_prop<sp/>=</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.rfMode<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RF_MODE_MULTIPLE,<sp/><sp/>//<sp/>rfMode<sp/>for<sp/>dual<sp/>mode</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.cpePatchFxn<sp/>=<sp/>&amp;rf_patch_cpe_genfsk,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.mcePatchFxn<sp/>=<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>.rfePatchFxn<sp/>=<sp/>0,</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Init<sp/>RF<sp/>and<sp/>specify<sp/>non-default<sp/>parameters</highlight></codeline>
<codeline><highlight class="normal">RF_Params_init(&amp;rfParams_ble);</highlight></codeline>
<codeline><highlight class="normal">rfParams_ble.nInactivityTimeout<sp/>=<sp/>200;<sp/><sp/><sp/><sp/><sp/>//<sp/>200us</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">RF_Params_init(&amp;rfParams_prop);</highlight></codeline>
<codeline><highlight class="normal">rfParams_prop.nInactivityTimeout<sp/>=<sp/>200;<sp/><sp/><sp/><sp/>//<sp/>200us</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Configure<sp/>RF<sp/>schedule<sp/>command<sp/>parameters<sp/>directly.</highlight></codeline>
<codeline><highlight class="normal">schParams_ble.priority<sp/><sp/><sp/><sp/>=<sp/>RF_PriorityNormal;</highlight></codeline>
<codeline><highlight class="normal">schParams_ble.endTime<sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">schParams_ble.allowDelay<sp/><sp/>=<sp/>RF_AllowDelayAny;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Alternatively,<sp/>use<sp/>the<sp/>helper<sp/>function<sp/>to<sp/>configure<sp/>the<sp/>default<sp/>behaviour</highlight></codeline>
<codeline><highlight class="normal">RF_ScheduleCmdParams_init(&amp;schParams_prop);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Open<sp/>BLE<sp/>and<sp/>proprietary<sp/>RF<sp/>handles</highlight></codeline>
<codeline><highlight class="normal">rfHandle_ble<sp/><sp/>=<sp/>RF_open(rfObj_ble,<sp/><sp/>&amp;rfMode_ble,<sp/><sp/>(RF_RadioSetup*)&amp;RF_cmdRadioSetup,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;rfParams_ble);</highlight></codeline>
<codeline><highlight class="normal">rfHandle_prop<sp/>=<sp/>RF_open(rfObj_prop,<sp/>&amp;rfMode_prop,<sp/>(RF_RadioSetup*)&amp;RF_cmdPropRadioDivSetup,<sp/>&amp;rfParams_prop);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Run<sp/>a<sp/>proprietary<sp/>Fs<sp/>command</highlight></codeline>
<codeline><highlight class="normal">RF_runCmd(rfHandle_pro,<sp/>(RF_Op*)&amp;RF_cmdFs,<sp/>RF_PriorityNormal,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Schedule<sp/>a<sp/>proprietary<sp/>RX<sp/>command</highlight></codeline>
<codeline><highlight class="normal">RF_scheduleCmd(rfHandle_pro,<sp/>(RF_Op*)&amp;RF_cmdPropRx,<sp/>&amp;schParams_prop,<sp/>&amp;prop_callback,<sp/>RF_EventRxOk);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Schedule<sp/>a<sp/>BLE<sp/>advertizer<sp/>command</highlight></codeline>
<codeline><highlight class="normal">RF_scheduleCmd(rfHandle_ble,<sp/>(RF_Op*)&amp;RF_cmdBleAdv,<sp/>&amp;schParams_ble,<sp/>&amp;ble_callback,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(RF_EventLastCmdDone<sp/>|<sp/>RF_EventRxEntryDone<sp/>|<sp/>RF_EventTxEntryDone));</highlight></codeline>
</programlisting></para><para>Get dual mode schedule map including timing and priority information for access requests and commands.</para><para><programlisting><codeline><highlight class="normal">RF_ScheduleMap<sp/>rfSheduleMap;</highlight></codeline>
<codeline><highlight class="normal">RF_InfoVal<sp/><sp/><sp/><sp/><sp/>rfGetInfoVal;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Get<sp/>schedule<sp/>map</highlight></codeline>
<codeline><highlight class="normal">rfGetInfoVal.pScheduleMap<sp/>=<sp/>&amp;rfScheduleMap;</highlight></codeline>
<codeline><highlight class="normal">RF_getInfo(NULL,<sp/>RF_GET_SCHEDULE_MAP,<sp/>&amp;rfGetInfoVal);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>RF_scheduleMap<sp/>includes<sp/>the<sp/>following<sp/>information:</highlight></codeline>
<codeline><highlight class="normal">//<sp/>(RF_NUM_SCHEDULE_ACCESS_ENTRIES<sp/>(default<sp/>=<sp/>2))<sp/>entries<sp/>of<sp/>access<sp/>request<sp/>information</highlight></codeline>
<codeline><highlight class="normal">//<sp/>(RF_NUM_SCHEDULE_COMMAND_ENTRIES<sp/>(default<sp/>=<sp/>8))<sp/>entries<sp/>of<sp/>radio<sp/>command<sp/>information</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Each<sp/>entry<sp/>has<sp/>the<sp/>type<sp/>of<sp/>RF_ScheduleMapElement.</highlight></codeline>
</programlisting></para><para><anchor id="_r_f_8h_1rf_rat"/><heading level="1">Accessing the Radio Timer (RAT) </heading>
</para><para>The Radio Timer on the RF core is an independent 32 bit timer running at a tick rate of 4 ticks per microsecond. It is only physically active while the RF core is on. But because the RF driver resynchronizes the RAT to the RTC on every power-up, it appears to the application as the timer is always running. The RAT accuracy depends on the system HF clock while the RF core is active and on the LF clock while the RF core is powered down.</para><para>The current RAT time stamp can be obtained by <ref refid="_r_f_8h_1aedfdf0bdf0f64a071d50a6d78446fef4" kindref="member">RF_getCurrentTime()</ref>:</para><para><programlisting><codeline><highlight class="normal">uint32_t<sp/>now<sp/>=<sp/>RF_getCurrentTime();</highlight></codeline>
</programlisting></para><para>The RAT has 8 independent channels that can be set up in capture and compare mode by <ref refid="_r_f_8h_1a513fd2cb2616e901d9f7a638ae9b7772" kindref="member">RF_ratCapture()</ref> and <ref refid="_r_f_8h_1af26945dca21f0742e7e978af6e176fea" kindref="member">RF_ratCompare()</ref> respectively. Three of these channels are accessible by the RF driver. Each channel may be connected to physical hardware signals for input and output or may trigger a callback function.</para><para>In order to allocate a RAT channel and trigger a callback function at a certain time stamp, use <ref refid="_r_f_8h_1af26945dca21f0742e7e978af6e176fea" kindref="member">RF_ratCompare()</ref>:</para><para><programlisting><codeline><highlight class="normal">RF_Handle<sp/>rfDriver;</highlight></codeline>
<codeline><highlight class="normal">RF_RatConfigCompare<sp/>config;</highlight></codeline>
<codeline><highlight class="normal">RF_RatConfigCompare_init(&amp;config);</highlight></codeline>
<codeline><highlight class="normal">config.callback<sp/>=<sp/>&amp;onRatTriggered;</highlight></codeline>
<codeline><highlight class="normal">config.channel<sp/>=<sp/>RF_RatChannelAny;</highlight></codeline>
<codeline><highlight class="normal">config.timeout<sp/>=<sp/>RF_getCurrentTime()<sp/>+<sp/>RF_convertMsToRatTicks(1701);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">RF_RatHandle<sp/>ratHandle<sp/>=<sp/>RF_ratCompare(rfDriver,<sp/>&amp;config,<sp/>nullptr);</highlight></codeline>
<codeline><highlight class="normal">assert(ratHandle<sp/>!=<sp/>RF_ALLOC_ERROR);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>onRatTriggered(RF_Handle<sp/>h,<sp/>RF_RatHandle<sp/>rh,<sp/>RF_EventMask<sp/>e,<sp/>uint32_t<sp/>compareCaptureTime)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(e<sp/>&amp;<sp/>RF_EventError)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>RF<sp/>driver<sp/>failed<sp/>to<sp/>trigger<sp/>the<sp/>callback<sp/>on<sp/>time.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;RAT<sp/>has<sp/>triggered<sp/>at<sp/>%u.&quot;,<sp/>compareCaptureTime);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Trigger<sp/>precisely<sp/>with<sp/>the<sp/>same<sp/>period<sp/>again</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>config.timeout<sp/>=<sp/>compareCaptureTime<sp/>+<sp/>RF_convertMsToRatTicks(1701);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ratHandle<sp/>=<sp/>RF_ratCompare(rfDriver,<sp/>&amp;config,<sp/>nullptr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ratHandle<sp/>!=<sp/>RF_ALLOC_ERROR);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>The RAT may be used to capture a time stamp on an edge of a physical pin. This can be achieved with <ref refid="_r_f_8h_1a513fd2cb2616e901d9f7a638ae9b7772" kindref="member">RF_ratCapture()</ref>.</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/pin/PINCC26XX.h&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Map<sp/>IO<sp/>26<sp/>to<sp/>RFC_GPI0</highlight></codeline>
<codeline><highlight class="normal">PINCC26XX_setMux(pinHandle,<sp/>IOID_26,<sp/>PINCC26XX_MUX_RFC_GPI0);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">RF_Handle<sp/>rfDriver;</highlight></codeline>
<codeline><highlight class="normal">RF_RatConfigCapture<sp/>config;</highlight></codeline>
<codeline><highlight class="normal">RF_RatConfigCapture_init(&amp;config);</highlight></codeline>
<codeline><highlight class="normal">config.callback<sp/>=<sp/>&amp;onSignalTriggered;</highlight></codeline>
<codeline><highlight class="normal">config.channel<sp/>=<sp/>RF_RatChannelAny;</highlight></codeline>
<codeline><highlight class="normal">config.source<sp/>=<sp/>RF_RatCaptureSourceRfcGpi0;</highlight></codeline>
<codeline><highlight class="normal">config.captureMode<sp/>=<sp/>RF_RatCaptureModeRising;</highlight></codeline>
<codeline><highlight class="normal">config.repeat<sp/>=<sp/>RF_RatCaptureRepeat;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">RF_RatHandle<sp/>ratHandle<sp/>=<sp/>RF_ratCapture(rfDriver,<sp/>&amp;config,<sp/>nullptr);</highlight></codeline>
<codeline><highlight class="normal">assert(ratHandle<sp/>!=<sp/>RF_ALLOC_ERROR);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>onSignalTriggered(RF_Handle<sp/>h,<sp/>RF_RatHandle<sp/>rh,<sp/>RF_EventMask<sp/>e,<sp/>uint32_t<sp/>compareCaptureTime)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(e<sp/>&amp;<sp/>RF_EventError)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>An<sp/>internal<sp/>error<sp/>has<sp/>occurred</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Rising<sp/>edge<sp/>detected<sp/>on<sp/>IO<sp/>26<sp/>at<sp/>%u.&quot;,<sp/>compareCaptureTime);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>In both cases, the RAT may generate an output signal when being triggered. The signal can be routed to a physical IO pin:</para><para><programlisting><codeline><highlight class="normal">//<sp/>Generate<sp/>a<sp/>pulse<sp/>on<sp/>an<sp/>internal<sp/>RAT<sp/>output<sp/>signal</highlight></codeline>
<codeline><highlight class="normal">RF_RatConfigOutput<sp/>output;</highlight></codeline>
<codeline><highlight class="normal">RF_RatConfigOutput_init(&amp;output);</highlight></codeline>
<codeline><highlight class="normal">output.mode<sp/>=<sp/>RF_RatOutputModePulse;</highlight></codeline>
<codeline><highlight class="normal">output.select<sp/>=<sp/>RF_RatOutputSelectRatGpo3;</highlight></codeline>
<codeline><highlight class="normal">RF_ratCompare(...);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Map<sp/>RatGpo3<sp/>to<sp/>one<sp/>of<sp/>four<sp/>intermediate<sp/>doorbell<sp/>signals.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>This<sp/>has<sp/>to<sp/>be<sp/>done<sp/>in<sp/>the<sp/>override<sp/>list<sp/>in<sp/>order<sp/>to<sp/>take<sp/>permanent<sp/>effect.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>override<sp/>list<sp/>can<sp/>be<sp/>found<sp/>in<sp/>the<sp/>RF<sp/>settings<sp/>.c<sp/>file<sp/>exported<sp/>from</highlight></codeline>
<codeline><highlight class="normal">//<sp/>SmartRF<sp/>Studio.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Attention:<sp/>This<sp/>will<sp/>change<sp/>the<sp/>default<sp/>mapping<sp/>of<sp/>the<sp/>PA<sp/>and<sp/>LNA<sp/>signal<sp/>as<sp/>well.</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/devices/[DEVICE_FAMILY]/inc/hw_rfc_dbell.h&gt;</highlight></codeline>
<codeline><highlight class="normal">static<sp/>uint32_t<sp/>pOverrides[]<sp/>=</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>HW_REG_OVERRIDE(0x1110,<sp/>RFC_DBELL_SYSGPOCTL_GPOCTL2_RATGPO3),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Finally,<sp/>route<sp/>the<sp/>intermediate<sp/>doorbell<sp/>signal<sp/>to<sp/>a<sp/>physical<sp/>pin.</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/pin/PINCC26XX.h&gt;</highlight></codeline>
<codeline><highlight class="normal">PINCC26XX_setMux(pinHandle,<sp/>IOID_17,<sp/>PINCC26XX_MUX_RFC_GPO2);</highlight></codeline>
</programlisting></para><para><anchor id="_r_f_8h_1rf_tx_power"/><heading level="1">Programming the TX power level </heading>
</para><para>The application can program a TX power level for each RF client with the function <ref refid="_r_f_8h_1a45ae701a298b6f4cddbc845333e61ad5" kindref="member">RF_setTxPower()</ref>. The new value takes immediate effect if the RF core is up and running. Otherwise, it is stored in the RF driver client configuration.</para><para>TX power may be stored in a lookup table in ascending order. This table is usually generated and exported from SmartRF Studio together with the rest of the PHY configuration. A typical power table my look as follows: <programlisting><codeline><highlight class="normal">RF_TxPowerTable_Entry<sp/>txPowerTable[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>.power<sp/>=<sp/>11,<sp/><sp/>.value<sp/>=<sp/>{<sp/>0x1233,<sp/>RF_TxPowerTable_DefaultPA<sp/>}},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>.power<sp/>=<sp/>13,<sp/><sp/>.value<sp/>=<sp/>{<sp/>0x1234,<sp/>RF_TxPowerTable_DefaultPA<sp/>}},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>RF_TxPowerTable_TERMINATION_ENTRY</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>Please note that some devices offer a high-power PA in addition to the default PA. A client must not mix configuration values in the same power table and must not hop from a default PA configuration to a high-power PA configuration unless it can guarantee that the RF setup command is re-executed in between.</para><para>Given this power table format, the application may program a new power level in multiple ways. It can use convenience functions to search a certain power level in the power table or may access the table index-based: <programlisting><codeline><highlight class="normal">//<sp/>Set<sp/>a<sp/>certain<sp/>power<sp/>level.<sp/>Search<sp/>a<sp/>matching<sp/>level.</highlight></codeline>
<codeline><highlight class="normal">RF_setTxPower(h,<sp/>RF_TxPowerTable_findValue(txPowerTable,<sp/>17));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>a<sp/>certain<sp/>power<sp/>level<sp/>with<sp/>a<sp/>known<sp/>level.</highlight></codeline>
<codeline><highlight class="normal">RF_setTxPower(h,<sp/>txPowerTable[3].value);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>a<sp/>certain<sp/>power<sp/>without<sp/>using<sp/>a<sp/>human<sp/>readable<sp/>level.</highlight></codeline>
<codeline><highlight class="normal">RF_setTxPower(h,<sp/>value);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>maximum<sp/>power.<sp/>Search<sp/>the<sp/>value.</highlight></codeline>
<codeline><highlight class="normal">RF_setTxPower(h,<sp/>RF_TxPowerTable_findValue(txPowerTable,<sp/>RF_TxPowerTable_MAX_DBM));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>minimum<sp/>power<sp/>without<sp/>searching.</highlight></codeline>
<codeline><highlight class="normal">RF_setTxPower(h,<sp/>txPowerTable[0].value);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>minimum<sp/>power.<sp/>Search<sp/>the<sp/>value.</highlight></codeline>
<codeline><highlight class="normal">RF_setTxPower(h,<sp/>RF_TxPowerTable_findValue(txPowerTable,<sp/>RF_TxPowerTable_MIN_DBM));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>maximum<sp/>power<sp/>without<sp/>searching.</highlight></codeline>
<codeline><highlight class="normal">int32_t<sp/>lastIndex<sp/>=<sp/>sizeof(txPowerTable)<sp/>/<sp/>sizeof(RF_TxPowerTable_Entry)<sp/>-<sp/>2;</highlight></codeline>
<codeline><highlight class="normal">RF_setTxPower(h,<sp/>txPowerTable[lastIndex].value);</highlight></codeline>
</programlisting></para><para>The current configured power level for a client can be retrieved by <ref refid="_r_f_8h_1aed02cc74cc7da5d2be9c0fb68ab5efc3" kindref="member">RF_getTxPower()</ref>. <programlisting><codeline><highlight class="normal">//<sp/>Get<sp/>the<sp/>current<sp/>configured<sp/>power<sp/>level.</highlight></codeline>
<codeline><highlight class="normal">int8_t<sp/>power<sp/>=<sp/>RF_TxPowerTable_findPowerLevel(txPowerTable,<sp/>RF_getTxPower(h));</highlight></codeline>
</programlisting></para><para><anchor id="_r_f_8h_1rf_convenience_features"/><heading level="1">Convenience features </heading>
</para><para>The RF driver simplifies often needed tasks and provides additional functions. For instance, it can read the RSSI while the RF core is in RX mode using the function :tidrivers_api:<computeroutput>RF_getRssi</computeroutput>:</para><para><programlisting><codeline><highlight class="normal">int8_t<sp/>rssi<sp/>=<sp/>RF_getRssi(rfHandle);</highlight></codeline>
<codeline><highlight class="normal">assert<sp/>(rssi<sp/>!=<sp/>RF_GET_RSSI_ERROR_VAL);<sp/>//<sp/>Could<sp/>not<sp/>read<sp/>the<sp/>RSSI</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016-2018,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="647"><highlight class="preprocessor">#ifndef<sp/>ti_drivers_rf__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_rf__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ti/drivers/dpl/ClockP.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ti/drivers/dpl/SemaphoreP.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ti/devices/DeviceFamily.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>DeviceFamily_constructPath(driverlib/rf_common_cmd.h)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>DeviceFamily_constructPath(driverlib/rf_prop_cmd.h)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>DeviceFamily_constructPath(driverlib/rf_ble_cmd.h)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="676" refid="_r_f_8h_1aa1534b443f03187f07f55b0198306a27" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventCmdDone<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>0)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="677" refid="_r_f_8h_1a2d60db886271cf8e08c7b6b2f5e534f1" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventLastCmdDone<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>1)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="678" refid="_r_f_8h_1a735a67f18008c9748b1abc23f8d8aa31" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventFGCmdDone<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>2)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="679" refid="_r_f_8h_1aa5bab6ef487e169803c147e47211a7b2" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventLastFGCmdDone<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>3)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="680" refid="_r_f_8h_1a4e8f8b70a9cd745561251d61940880f6" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventTxDone<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>4)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="681" refid="_r_f_8h_1ab1ab01acc148654e8b3dfe42d64785b1" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventTXAck<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>5)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="682" refid="_r_f_8h_1a8421bd3a69743f088ac534f85b099a8d" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventTxCtrl<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>6)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="683" refid="_r_f_8h_1af15e72a260f7c2d3d659ad76cb876f9a" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventTxCtrlAck<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>7)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="684" refid="_r_f_8h_1a00c6a2c502c6b73310d7168d65134728" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventTxCtrlAckAck<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>8)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="685" refid="_r_f_8h_1a2c71299952c2e6f95973f15cd1910012" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventTxRetrans<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>9)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="686" refid="_r_f_8h_1a2fe4925d81a1b1cf0f081801ccdea5c5" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventTxEntryDone<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>10)<sp/><sp/></highlight></codeline>
<codeline lineno="687" refid="_r_f_8h_1a595798fcb9995769a5887839567c8ca7" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventTxBufferChange<sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>11)<sp/><sp/></highlight></codeline>
<codeline lineno="688" refid="_r_f_8h_1a8096e854b7ba95ee45054acf8c5d36e4" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventRxOk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>16)<sp/><sp/></highlight></codeline>
<codeline lineno="689" refid="_r_f_8h_1a0c295aa9a2851efa0ec6309ebab52dc8" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventRxNOk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>17)<sp/><sp/></highlight></codeline>
<codeline lineno="690" refid="_r_f_8h_1a2dbeb507eec591b320a4b06f36ce8814" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventRxIgnored<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>18)<sp/><sp/></highlight></codeline>
<codeline lineno="691" refid="_r_f_8h_1a4df2d5bf213600e1bce1c03a1ea950dd" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventRxEmpty<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>19)<sp/><sp/></highlight></codeline>
<codeline lineno="692" refid="_r_f_8h_1afee6f48a825ba7e030ece03eb242e6c2" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventRxCtrl<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>20)<sp/><sp/></highlight></codeline>
<codeline lineno="693" refid="_r_f_8h_1a3c29608b6caa9e380407ee0b3df371b8" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventRxCtrlAck<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>21)<sp/><sp/></highlight></codeline>
<codeline lineno="694" refid="_r_f_8h_1a8ddaa54ac8e8721e7e1cee7f0c07c3c1" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventRxBufFull<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>22)<sp/><sp/></highlight></codeline>
<codeline lineno="695" refid="_r_f_8h_1a7051110a4a1fdd459866195be774a2b0" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventRxEntryDone<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>23)<sp/><sp/></highlight></codeline>
<codeline lineno="696" refid="_r_f_8h_1a8ac187c129b68b4311898a5464aa87e5" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventDataWritten<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>24)<sp/><sp/></highlight></codeline>
<codeline lineno="697" refid="_r_f_8h_1aa9c1eb19ce791f4f9c4b917e10fbabdd" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventNDataWritten<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>25)<sp/><sp/></highlight></codeline>
<codeline lineno="698" refid="_r_f_8h_1af2db331d93e28cdafc4367497a2f6f89" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventRxAborted<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>26)<sp/><sp/></highlight></codeline>
<codeline lineno="699" refid="_r_f_8h_1aaba4e22e27b9ac26244b02c7cfd657d0" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventRxCollisionDetected<sp/>(1<sp/>&lt;&lt;<sp/>27)<sp/><sp/></highlight></codeline>
<codeline lineno="700" refid="_r_f_8h_1ae5cb277f5a7a23bf1d7e6405f3e2253e" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventModulesUnlocked<sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>29)<sp/><sp/></highlight></codeline>
<codeline lineno="701" refid="_r_f_8h_1af872a5a1a47d7401499d7826eea8da98" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventInternalError<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)(1<sp/>&lt;&lt;<sp/>31)<sp/></highlight></codeline>
<codeline lineno="702" refid="_r_f_8h_1a83edee28803f1b2addc0f8458d0cc657" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventMdmSoft<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0000002000000000<sp/><sp/></highlight></codeline>
<codeline lineno="703"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="712" refid="_r_f_8h_1ae6d21f9806a7482a0f324f98bb83aac0" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventCmdCancelled<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x1000000000000000<sp/><sp/></highlight></codeline>
<codeline lineno="713" refid="_r_f_8h_1a95a0bf832c19fbdce2c164144ad265ee" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventCmdAborted<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x2000000000000000<sp/><sp/></highlight></codeline>
<codeline lineno="714" refid="_r_f_8h_1ac68cfb0f9c26d275ad990f5da9e6b91f" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventCmdStopped<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x4000000000000000<sp/><sp/></highlight></codeline>
<codeline lineno="715" refid="_r_f_8h_1ab0302093e17c587cc4bf2c928c79960e" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventRatCh<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0800000000000000<sp/><sp/></highlight></codeline>
<codeline lineno="716" refid="_r_f_8h_1a0e6d5e7d3760a65ba37d8f26823e9a0a" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventPowerUp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0400000000000000<sp/><sp/></highlight></codeline>
<codeline lineno="717" refid="_r_f_8h_1aa6b858b8b383210049fa3f17dcd95fac" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventError<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0200000000000000<sp/><sp/></highlight></codeline>
<codeline lineno="718" refid="_r_f_8h_1a267ffc8a08c3ce6ffa82b704dba641be" refkind="member"><highlight class="preprocessor">#define<sp/><sp/><sp/>RF_EventCmdPreempted<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0100000000000000<sp/><sp/></highlight></codeline>
<codeline lineno="719"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="737" refid="_r_f_8h_1a24096530a8da4bde84275bc9c76b2cee" refkind="member"><highlight class="preprocessor">#define<sp/>RF_CTRL_SET_INACTIVITY_TIMEOUT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="747" refid="_r_f_8h_1a74d367afdca187785b17c59b31d1e89a" refkind="member"><highlight class="preprocessor">#define<sp/>RF_CTRL_UPDATE_SETUP_CMD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="753" refid="_r_f_8h_1a32bd63d8617c2fde41bbc30d1e8f0db5" refkind="member"><highlight class="preprocessor">#define<sp/>RF_CTRL_SET_POWERUP_DURATION_MARGIN<sp/><sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="761" refid="_r_f_8h_1adaa68f9c55d604a2228c897fd08b075c" refkind="member"><highlight class="preprocessor">#define<sp/>RF_CTRL_SET_RAT_RTC_ERR_TOL_VAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="773" refid="_r_f_8h_1a5b7345d53c66e3168216234046359823" refkind="member"><highlight class="preprocessor">#define<sp/>RF_CTRL_SET_POWER_MGMT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="795" refid="_r_f_8h_1a428377f902e968efba9f506376c09740" refkind="member"><highlight class="preprocessor">#define<sp/>RF_CTRL_SET_HWI_PRIORITY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="817" refid="_r_f_8h_1a325d55f02f7e3acddce7e44bab71e2de" refkind="member"><highlight class="preprocessor">#define<sp/>RF_CTRL_SET_SWI_PRIORITY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="827" refid="_r_f_8h_1ae58d79d3513ee745bcbeffae50731107" refkind="member"><highlight class="preprocessor">#define<sp/>RF_CTRL_SET_AVAILABLE_RAT_CHANNELS_MASK<sp/><sp/><sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="841" refid="_r_f_8h_1aa3c3699366e0ac3271098ca9ec140002" refkind="member"><highlight class="preprocessor">#define<sp/>RF_TxPowerTable_MIN_DBM<sp/><sp/><sp/>-128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="849" refid="_r_f_8h_1a689c0791e8141ea53d814dde2e7e0217" refkind="member"><highlight class="preprocessor">#define<sp/>RF_TxPowerTable_MAX_DBM<sp/><sp/><sp/>126</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="856" refid="_r_f_8h_1aeacd75e63906befa8ca215a9779da3c4" refkind="member"><highlight class="preprocessor">#define<sp/>RF_TxPowerTable_INVALID_DBM<sp/><sp/><sp/>127</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="875" refid="_r_f_8h_1a6a7214e79d17615ac34efbad207ca33f" refkind="member"><highlight class="preprocessor">#define<sp/>RF_TxPowerTable_INVALID_VALUE<sp/>0x3fffff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="892" refid="_r_f_8h_1a7c926278bbbb8d6559765dce2557489b" refkind="member"><highlight class="preprocessor">#define<sp/>RF_TxPowerTable_TERMINATION_ENTRY<sp/>\</highlight></codeline>
<codeline lineno="893"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>.power<sp/>=<sp/>RF_TxPowerTable_INVALID_DBM,<sp/>.value<sp/>=<sp/>{<sp/>.rawValue<sp/>=<sp/>RF_TxPowerTable_INVALID_VALUE,<sp/>.paType<sp/>=<sp/>RF_TxPowerTable_DefaultPA<sp/>}<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="901" refid="_r_f_8h_1a3065b167970585be2df0e92fc8a74c5d" refkind="member"><highlight class="preprocessor">#define<sp/>RF_TxPowerTable_DEFAULT_PA_ENTRY(bias,<sp/>gain,<sp/>boost,<sp/>coefficient)<sp/>\</highlight></codeline>
<codeline lineno="902"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>.rawValue<sp/>=<sp/>((bias)<sp/>&lt;&lt;<sp/>0)<sp/>|<sp/>((gain)<sp/>&lt;&lt;<sp/>6)<sp/>|<sp/>((boost)<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>((coefficient)<sp/>&lt;&lt;<sp/>9),<sp/>.paType<sp/>=<sp/>RF_TxPowerTable_DefaultPA<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="910" refid="_r_f_8h_1a7369eba160dd93c59f8d8a287780125a" refkind="member"><highlight class="preprocessor">#define<sp/>RF_TxPowerTable_HIGH_PA_ENTRY(bias,<sp/>ibboost,<sp/>boost,<sp/>coefficient,<sp/>ldotrim)<sp/>\</highlight></codeline>
<codeline lineno="911"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>.rawValue<sp/>=<sp/>((bias)<sp/>&lt;&lt;<sp/>0)<sp/>|<sp/>((ibboost)<sp/>&lt;&lt;<sp/>6)<sp/>|<sp/>((boost)<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>((coefficient)<sp/>&lt;&lt;<sp/>9)<sp/>|<sp/>((ldotrim)<sp/>&lt;&lt;<sp/>16),<sp/>.paType<sp/>=<sp/>RF_TxPowerTable_HighPA<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="920" refid="_r_f_8h_1a40e933adc8b5b1c03133451361c5505b" refkind="member"><highlight class="preprocessor">#define<sp/>RF_GET_RSSI_ERROR_VAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-128)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="921" refid="_r_f_8h_1aacfd2e3e3a2596605cc8b182df438b2f" refkind="member"><highlight class="preprocessor">#define<sp/>RF_CMDHANDLE_FLUSH_ALL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-1)<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="922" refid="_r_f_8h_1ad2e517d9efabde3a1868a274ed0f683b" refkind="member"><highlight class="preprocessor">#define<sp/>RF_ALLOC_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-2)<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="923" refid="_r_f_8h_1a6986912a3081f0df9873a9b953e363ee" refkind="member"><highlight class="preprocessor">#define<sp/>RF_SCHEDULE_CMD_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-3)<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="924" refid="_r_f_8h_1a96593487f5b6bc397d3986a195ecd52f" refkind="member"><highlight class="preprocessor">#define<sp/>RF_ERROR_RAT_PROG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-255)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="925" refid="_r_f_8h_1a86f899115073dc30d7b528cb0e12a9f1" refkind="member"><highlight class="preprocessor">#define<sp/>RF_ERROR_INVALID_RFMODE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-256)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="926" refid="_r_f_8h_1a40a0b1b81a2bebefb91b952d750634dc" refkind="member"><highlight class="preprocessor">#define<sp/>RF_ERROR_CMDFS_SYNTH_PROG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-257)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="927"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928" refid="_r_f_8h_1a37a38c0dc13a2ce547335e861f70d051" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RF_NUM_SCHEDULE_ACCESS_ENTRIES<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="929" refid="_r_f_8h_1af6c29118d59b89ae5fe77128943034ac" refkind="member"><highlight class="preprocessor">#define<sp/>RF_NUM_SCHEDULE_COMMAND_ENTRIES<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="930" refid="_r_f_8h_1a00c51d569ca050a4ca082b524bbfb924" refkind="member"><highlight class="preprocessor">#define<sp/>RF_NUM_SCHEDULE_MAP_ENTRIES<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(RF_NUM_SCHEDULE_ACCESS_ENTRIES<sp/>+<sp/>RF_NUM_SCHEDULE_COMMAND_ENTRIES)<sp/></highlight></codeline>
<codeline lineno="931" refid="_r_f_8h_1a5afbf118199c4d690ca365f8f10ce303" refkind="member"><highlight class="preprocessor">#define<sp/>RF_SCH_MAP_CURRENT_CMD_OFFSET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RF_NUM_SCHEDULE_ACCESS_ENTRIES<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="932" refid="_r_f_8h_1ae47095b012cc1b8135736b1df8f3bb8f" refkind="member"><highlight class="preprocessor">#define<sp/>RF_SCH_MAP_PENDING_CMD_OFFSET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(RF_SCH_MAP_CURRENT_CMD_OFFSET<sp/>+<sp/>1)<sp/></highlight></codeline>
<codeline lineno="933"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934" refid="_r_f_8h_1a4585d547dce0622e2407fea2d2a4bb4f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RF_ABORT_PREEMPTION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;2)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="935" refid="_r_f_8h_1a8357151872adc734a1e9ef74999b8710" refkind="member"><highlight class="preprocessor">#define<sp/>RF_ABORT_GRACEFULLY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1&lt;&lt;0)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="936"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937" refid="_r_f_8h_1a0bc9d4802427e91001d40cec7e20164f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RF_SCH_CMD_EXECUTION_TIME_UNKNOWN<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="938"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939" refid="_r_f_8h_1a59a68b973702e21f5a0f30f357f1e247" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RF_RAT_ANY_CHANNEL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-1)<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="940" refid="_r_f_8h_1a3cf51703068e6f00d46f78ef14a6b7ff" refkind="member"><highlight class="preprocessor">#define<sp/>RF_RAT_TICKS_PER_US<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="941"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="945" refid="_r_f_8h_1af0fbfd98528830da6556b8a8c6d60bd8" refkind="member"><highlight class="preprocessor">#define<sp/>RF_convertUsToRatTicks(microseconds)<sp/>\</highlight></codeline>
<codeline lineno="946"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((microseconds)<sp/>*<sp/>(RF_RAT_TICKS_PER_US))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="951" refid="_r_f_8h_1aabead042beafa5e5347f1e7b003202f2" refkind="member"><highlight class="preprocessor">#define<sp/>RF_convertMsToRatTicks(milliseconds)<sp/>\</highlight></codeline>
<codeline lineno="952"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((milliseconds)<sp/>*<sp/>1000<sp/>*<sp/>(RF_RAT_TICKS_PER_US))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="957" refid="_r_f_8h_1af3e94acb7fe950698e19e5c07775cee0" refkind="member"><highlight class="preprocessor">#define<sp/>RF_convertRatTicksToUs(ticks)<sp/>\</highlight></codeline>
<codeline lineno="958"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((ticks)<sp/>/<sp/>(RF_RAT_TICKS_PER_US))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="963" refid="_r_f_8h_1a8c812053bf4dfc87370d92157ea3878d" refkind="member"><highlight class="preprocessor">#define<sp/>RF_convertRatTicksToMs(ticks)<sp/>\</highlight></codeline>
<codeline lineno="964"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((ticks)<sp/>/<sp/>(1000<sp/>*<sp/>(RF_RAT_TICKS_PER_US)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="978" refid="struct_r_f___tx_power_table___value" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="979" refid="struct_r_f___tx_power_table___value_1a8636d2f86a74329740cd19242ebae1b4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>rawValue:22;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>__dummy:9;</highlight></codeline>
<codeline lineno="984" refid="struct_r_f___tx_power_table___value_1a6a14d4aba3c660a461c4c4d16384307d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>paType:1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="985"><highlight class="normal">}<sp/><ref refid="struct_r_f___tx_power_table___value" kindref="compound">RF_TxPowerTable_Value</ref>;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008" refid="struct_r_f___tx_power_table___entry" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1010" refid="struct_r_f___tx_power_table___entry_1a81d77b34e43baf03283895487bdc983d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int8_t<sp/><ref refid="struct_r_f___tx_power_table___entry_1a81d77b34e43baf03283895487bdc983d" kindref="member">power</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013" refid="struct_r_f___tx_power_table___entry_1ab48bd443e251a47fc554caf5ab7976ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_r_f___tx_power_table___value" kindref="compound">RF_TxPowerTable_Value</ref><sp/><ref refid="struct_r_f___tx_power_table___entry_1ab48bd443e251a47fc554caf5ab7976ca" kindref="member">value</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="1014"><highlight class="normal">}<sp/>__attribute__((packed))<sp/><ref refid="struct_r_f___tx_power_table___entry" kindref="compound">RF_TxPowerTable_Entry</ref>;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023" refid="_r_f_8h_1ac51c0cef00a3f230e4e73ccd00a503b8" refkind="member"><highlight class="normal">typedef<sp/>enum<sp/>{</highlight></codeline>
<codeline lineno="1024" refid="_r_f_8h_1ac51c0cef00a3f230e4e73ccd00a503b8aecb8f811a5580e7156d0059686e0ea7f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1ac51c0cef00a3f230e4e73ccd00a503b8aecb8f811a5580e7156d0059686e0ea7f" kindref="member">RF_TxPowerTable_DefaultPA</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="1025" refid="_r_f_8h_1ac51c0cef00a3f230e4e73ccd00a503b8af828b6a1f4d544e598912b10f8ce9954" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1ac51c0cef00a3f230e4e73ccd00a503b8af828b6a1f4d544e598912b10f8ce9954" kindref="member">RF_TxPowerTable_HighPA</ref><sp/>=<sp/>1,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1026"><highlight class="normal">}<sp/><ref refid="_r_f_8h_1ac51c0cef00a3f230e4e73ccd00a503b8" kindref="member">RF_TxPowerTable_PAType</ref>;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042" refid="_r_f_8h_1a47ea3dea78019340e8f8ceb854de5f02" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>rfc_radioOp_t<sp/><ref refid="_r_f_8h_1a47ea3dea78019340e8f8ceb854de5f02" kindref="member">RF_Op</ref>;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053" refid="struct_r_f___mode" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1054" refid="struct_r_f___mode_1a4d6945bf75c2af234159e60ae6ef843a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="struct_r_f___mode_1a4d6945bf75c2af234159e60ae6ef843a" kindref="member">rfMode</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1055" refid="struct_r_f___mode_1a2bd4297cca8b9f0fb38aae44d0ae93a5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*cpePatchFxn)(void);<sp/><sp/></highlight></codeline>
<codeline lineno="1056" refid="struct_r_f___mode_1ae3fe98ef86a6b3e1b0729288c4e8e94a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*mcePatchFxn)(void);<sp/><sp/></highlight></codeline>
<codeline lineno="1057" refid="struct_r_f___mode_1a9ce1fcc0fc102f664127d8f8f21f01b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*rfePatchFxn)(void);<sp/><sp/></highlight></codeline>
<codeline lineno="1058"><highlight class="normal">}<sp/><ref refid="struct_r_f___mode" kindref="compound">RF_Mode</ref>;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071" refid="_r_f_8h_1ae5f9a893d178e64e6d0a7a783ea06e32" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1072" refid="_r_f_8h_1ae5f9a893d178e64e6d0a7a783ea06e32a5d716915abbe5a6fad3469c339f4db15" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1ae5f9a893d178e64e6d0a7a783ea06e32a5d716915abbe5a6fad3469c339f4db15" kindref="member">RF_PriorityHighest</ref><sp/>=<sp/>2,<sp/></highlight></codeline>
<codeline lineno="1073" refid="_r_f_8h_1ae5f9a893d178e64e6d0a7a783ea06e32a8d14673dbb643f2e9571fb5e34aad23d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1ae5f9a893d178e64e6d0a7a783ea06e32a8d14673dbb643f2e9571fb5e34aad23d" kindref="member">RF_PriorityHigh</ref><sp/><sp/><sp/><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="1074" refid="_r_f_8h_1ae5f9a893d178e64e6d0a7a783ea06e32a301d2e5af295d52039b52709952a1c47" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1ae5f9a893d178e64e6d0a7a783ea06e32a301d2e5af295d52039b52709952a1c47" kindref="member">RF_PriorityNormal</ref><sp/><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="1075"><highlight class="normal">}<sp/><ref refid="_r_f_8h_1ae5f9a893d178e64e6d0a7a783ea06e32" kindref="member">RF_Priority</ref>;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085" refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1086" refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988faa79a13241903199d3bc25c8f06407de9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988faa79a13241903199d3bc25c8f06407de9" kindref="member">RF_StatBusyError</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1087" refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988fa80848b887667038bbfa4a2d14e83b193" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988fa80848b887667038bbfa4a2d14e83b193" kindref="member">RF_StatRadioInactiveError</ref>,<sp/></highlight></codeline>
<codeline lineno="1088" refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988fa612e247f325ff085321b8e243f6b1d3d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988fa612e247f325ff085321b8e243f6b1d3d" kindref="member">RF_StatCmdDoneError</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1089" refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988face124dc75bad005452467d6f29351301" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988face124dc75bad005452467d6f29351301" kindref="member">RF_StatInvalidParamsError</ref>,<sp/></highlight></codeline>
<codeline lineno="1090" refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988fadaf0ab5384fae480d81dcd10a13ef1b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988fadaf0ab5384fae480d81dcd10a13ef1b5" kindref="member">RF_StatCmdEnded</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1091" refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988fac071b8de44aabb8e2354432ce1146b86" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988fac071b8de44aabb8e2354432ce1146b86" kindref="member">RF_StatError</ref><sp/><sp/><sp/>=<sp/>0x80,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1092" refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988faa110d04edae5a85a12906d729f97de87" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988faa110d04edae5a85a12906d729f97de87" kindref="member">RF_StatCmdDoneSuccess</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1093" refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988fabf33d4930fd89cd5ca80220da258d31c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988fabf33d4930fd89cd5ca80220da258d31c" kindref="member">RF_StatCmdSch</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1094" refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988faa98bd78e437864464cdb2aca1d3e024d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988faa98bd78e437864464cdb2aca1d3e024d" kindref="member">RF_StatSuccess</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1095"><highlight class="normal">}<sp/><ref refid="_r_f_8h_1afdc219ddabc8427ecd552a6c78d9988f" kindref="member">RF_Stat</ref>;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101" refid="_r_f_8h_1a128c46e18dbbaa781abb7abafc35233a" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="_r_f_8h_1a128c46e18dbbaa781abb7abafc35233a" kindref="member">RF_EventMask</ref>;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112" refid="union_r_f___radio_setup" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1113" refid="union_r_f___radio_setup_1a7849a5bb5dc28c798cc55793f6c347dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>rfc_command_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="union_r_f___radio_setup_1a7849a5bb5dc28c798cc55793f6c347dd" kindref="member">commandId</ref>;<sp/></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116" refid="union_r_f___radio_setup_1afd03d9690df15d5cca3e82c4ff25ba58" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>rfc_CMD_RADIO_SETUP_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="union_r_f___radio_setup_1afd03d9690df15d5cca3e82c4ff25ba58" kindref="member">common</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1117" refid="union_r_f___radio_setup_1add11d56e4882de38a71bc75c3d38cb18" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>rfc_CMD_BLE5_RADIO_SETUP_t<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="union_r_f___radio_setup_1add11d56e4882de38a71bc75c3d38cb18" kindref="member">ble5</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1118" refid="union_r_f___radio_setup_1afd693ac0735adf77800aa285124bd03a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>rfc_CMD_PROP_RADIO_SETUP_t<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="union_r_f___radio_setup_1afd693ac0735adf77800aa285124bd03a" kindref="member">prop</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1119" refid="union_r_f___radio_setup_1ae5b63db8408d7cd3cc773f7c38ea0545" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>rfc_CMD_PROP_RADIO_DIV_SETUP_t<sp/><sp/><ref refid="union_r_f___radio_setup_1ae5b63db8408d7cd3cc773f7c38ea0545" kindref="member">prop_div</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="1120"><highlight class="normal">}<sp/><ref refid="union_r_f___radio_setup" kindref="compound">RF_RadioSetup</ref>;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151" refid="_r_f_8h_1acfa72a48f45abb7ea8e1595ce6606b7a" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1152" refid="_r_f_8h_1acfa72a48f45abb7ea8e1595ce6606b7aa931a28d9524188efd2f45aa1e09dca0a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1acfa72a48f45abb7ea8e1595ce6606b7aa931a28d9524188efd2f45aa1e09dca0a" kindref="member">RF_ClientEventPowerUpFinished</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>0),<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1153" refid="_r_f_8h_1acfa72a48f45abb7ea8e1595ce6606b7aa5c502a8582be79f38917d0d464da2e5d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1acfa72a48f45abb7ea8e1595ce6606b7aa5c502a8582be79f38917d0d464da2e5d" kindref="member">RF_ClientEventRadioFree</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>1),<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157" refid="_r_f_8h_1acfa72a48f45abb7ea8e1595ce6606b7aabb9b5b80366b32eb566b45b1526d7c12" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1acfa72a48f45abb7ea8e1595ce6606b7aabb9b5b80366b32eb566b45b1526d7c12" kindref="member">RF_ClientEventSwitchClientEntered</ref><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>2)<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1158"><highlight class="normal">}<sp/><ref refid="_r_f_8h_1acfa72a48f45abb7ea8e1595ce6606b7a" kindref="member">RF_ClientEvent</ref>;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197" refid="_r_f_8h_1ad40e352daa020429c2aa1cd49283c5e8" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1198" refid="_r_f_8h_1ad40e352daa020429c2aa1cd49283c5e8a389b9776e29c420ef575c1b06eea7e73" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1ad40e352daa020429c2aa1cd49283c5e8a389b9776e29c420ef575c1b06eea7e73" kindref="member">RF_GlobalEventRadioSetup</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>0),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1202" refid="_r_f_8h_1ad40e352daa020429c2aa1cd49283c5e8a54ffbc9af1f9b3be0ca2cb9062090a57" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1ad40e352daa020429c2aa1cd49283c5e8a54ffbc9af1f9b3be0ca2cb9062090a57" kindref="member">RF_GlobalEventRadioPowerDown</ref><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>1),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1203"><highlight class="normal">}<sp/><ref refid="_r_f_8h_1ad40e352daa020429c2aa1cd49283c5e8" kindref="member">RF_GlobalEvent</ref>;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211" refid="_r_f_8h_1a25948ff7cdce9e54404c1301e82a3568" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="_r_f_8h_1a25948ff7cdce9e54404c1301e82a3568" kindref="member">RF_ClientEventMask</ref>;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216" refid="_r_f_8h_1a4894c55ea8160f852fc224f9073cf38e" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="_r_f_8h_1a4894c55ea8160f852fc224f9073cf38e" kindref="member">RF_GlobalEventMask</ref>;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230" refid="_r_f_8h_1acab1f56c62a9fd1ad0a91a46b6da23f1" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int16_t<sp/><ref refid="_r_f_8h_1acab1f56c62a9fd1ad0a91a46b6da23f1" kindref="member">RF_CmdHandle</ref>;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="preprocessor">#if<sp/>defined<sp/>(RF_SINGLEMODE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">RF_ObjectSingleMode<sp/><sp/><ref refid="struct_r_f___object" kindref="compound">RF_Object</ref>;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">RF_ObjectMultiMode<sp/><sp/><sp/><ref refid="struct_r_f___object" kindref="compound">RF_Object</ref>;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>Definition<sp/>of<sp/>the<sp/>RF_Object<sp/>structure<sp/>for<sp/>single-mode<sp/>applications.</highlight></codeline>
<codeline lineno="1259"><highlight class="comment"><sp/>*<sp/><sp/>It<sp/>is<sp/>applicable<sp/>with<sp/>the<sp/>single-mode<sp/>RF<sp/>driver<sp/>through<sp/>the<sp/>#RF_Object<sp/>common<sp/>type.</highlight></codeline>
<codeline lineno="1260"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">RF_ObjectSingleMode{</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nInactivityTimeout;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_r_f___mode" kindref="compound">RF_Mode</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pRfMode;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="union_r_f___radio_setup" kindref="compound">RF_RadioSetup</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>pOpSetup;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nPowerUpDuration;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bMeasurePowerUpDuration;<sp/></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bUpdateSetup;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nPowerUpDurationMargin;<sp/><sp/></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pPowerCb;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pErrCb;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>clientConfig;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rfc_CMD_FS_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmdFs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>mode_state;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SemaphoreP_Struct<sp/><sp/><sp/><sp/><sp/><sp/><sp/>semSync;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RF_EventMask<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><sp/><sp/>eventSync;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pCbSync;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RF_EventMask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unpendCause;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ClockP_Struct<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clkInactivity;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bYielded;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>state;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">RF_ObjectMultiMode{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nInactivityTimeout;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_r_f___mode" kindref="compound">RF_Mode</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pRfMode;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="union_r_f___radio_setup" kindref="compound">RF_RadioSetup</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>pOpSetup;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nPowerUpDuration;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bMeasurePowerUpDuration;<sp/></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bUpdateSetup;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nPowerUpDurationMargin;<sp/><sp/></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pPowerCb;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pErrCb;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pClientEventCb;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RF_ClientEventMask<sp/><sp/>nClientEventMask;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>clientConfig;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rfc_CMD_FS_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmdFs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>mode_state;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SemaphoreP_Struct<sp/><sp/><sp/><sp/><sp/><sp/><sp/>semSync;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RF_EventMask<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><sp/><sp/>eventSync;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pCbSync;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RF_EventMask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unpendCause;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ClockP_Struct<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clkInactivity;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ClockP_Struct<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clkReqAccess;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bYielded;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>state;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight></codeline>
<codeline lineno="1328" refid="_r_f_8h_1a5e8ab7fc87fb818f435d9b6226ee573f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="struct_r_f___object" kindref="compound">RF_Object</ref>*<sp/><ref refid="_r_f_8h_1a5e8ab7fc87fb818f435d9b6226ee573f" kindref="member">RF_Handle</ref>;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339" refid="_r_f_8h_1a58de86ad0b6cfcb04548a776976c0a7c" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int8_t<sp/><ref refid="_r_f_8h_1a58de86ad0b6cfcb04548a776976c0a7c" kindref="member">RF_RatHandle</ref>;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344" refid="_r_f_8h_1a22596109459422a7a4d4f386dffbb8fa" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1345" refid="_r_f_8h_1a22596109459422a7a4d4f386dffbb8faa4a4b88384acfaa135421ad57557140e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a22596109459422a7a4d4f386dffbb8faa4a4b88384acfaa135421ad57557140e6" kindref="member">RF_GET_CURR_CMD</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1346" refid="_r_f_8h_1a22596109459422a7a4d4f386dffbb8faa19ebdcf12bef1328ce40fec49c0f6864" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a22596109459422a7a4d4f386dffbb8faa19ebdcf12bef1328ce40fec49c0f6864" kindref="member">RF_GET_AVAIL_RAT_CH</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1347" refid="_r_f_8h_1a22596109459422a7a4d4f386dffbb8faa51ac83691ed47bb591818e2e34e49d44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a22596109459422a7a4d4f386dffbb8faa51ac83691ed47bb591818e2e34e49d44" kindref="member">RF_GET_RADIO_STATE</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1348" refid="_r_f_8h_1a22596109459422a7a4d4f386dffbb8faac08f2876adac275a8cf5f36cb47e3b52" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a22596109459422a7a4d4f386dffbb8faac08f2876adac275a8cf5f36cb47e3b52" kindref="member">RF_GET_SCHEDULE_MAP</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1349" refid="_r_f_8h_1a22596109459422a7a4d4f386dffbb8faa9c8ebff9d2070ac7b6cd6c6f498c65a8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a22596109459422a7a4d4f386dffbb8faa9c8ebff9d2070ac7b6cd6c6f498c65a8" kindref="member">RF_GET_CLIENT_LIST</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1350" refid="_r_f_8h_1a22596109459422a7a4d4f386dffbb8faa0394a33587673701b205811e2a0790e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a22596109459422a7a4d4f386dffbb8faa0394a33587673701b205811e2a0790e4" kindref="member">RF_GET_CLIENT_SWITCHING_TIME</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1351"><highlight class="normal">}<sp/><ref refid="_r_f_8h_1a22596109459422a7a4d4f386dffbb8fa" kindref="member">RF_InfoType</ref>;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358" refid="union_r_f___info_val" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1359" refid="union_r_f___info_val_1a19bf3d8f9d5a9d3b3ec34fd6238f6564" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RF_CmdHandle<sp/><ref refid="union_r_f___info_val_1a19bf3d8f9d5a9d3b3ec34fd6238f6564" kindref="member">ch</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1360" refid="union_r_f___info_val_1ae380eea33c0f34396c006a85e97baa71" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><ref refid="union_r_f___info_val_1ae380eea33c0f34396c006a85e97baa71" kindref="member">availRatCh</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1361" refid="union_r_f___info_val_1ae8142037b3833868a4e6b7498c4a631c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="union_r_f___info_val_1ae8142037b3833868a4e6b7498c4a631c" kindref="member">bRadioState</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1362" refid="union_r_f___info_val_1a1ca81db912d2929d27726ae29eb65c79" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RF_Handle<sp/><sp/><sp/><sp/>pClientList[2];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1363" refid="union_r_f___info_val_1a3593c8e569ae4cb95561fc47e587817f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/>phySwitchingTimeInUs[2];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1364" refid="union_r_f___info_val_1ae33dc7b74020dfde9708504e46ac634c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="union_r_f___info_val_1ae33dc7b74020dfde9708504e46ac634c" kindref="member">pScheduleMap</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1365"><highlight class="normal">}<sp/><ref refid="union_r_f___info_val" kindref="compound">RF_InfoVal</ref>;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370" refid="struct_r_f___schedule_map_element" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1371" refid="struct_r_f___schedule_map_element_1a8c96b7655968eea04187f2f864c7dd93" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RF_CmdHandle<sp/><ref refid="struct_r_f___schedule_map_element_1a8c96b7655968eea04187f2f864c7dd93" kindref="member">ch</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1372" refid="struct_r_f___schedule_map_element_1aaba31f986c1826ab3a44fba106caca4c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RF_Handle<sp/><sp/><sp/><sp/><ref refid="struct_r_f___schedule_map_element_1aaba31f986c1826ab3a44fba106caca4c" kindref="member">pClient</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1373" refid="struct_r_f___schedule_map_element_1a114e912b54edf47b1ae5b02c36a91f3e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><ref refid="struct_r_f___schedule_map_element_1a114e912b54edf47b1ae5b02c36a91f3e" kindref="member">startTime</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1374" refid="struct_r_f___schedule_map_element_1a615ed3c74407996016f69a2d01a66ff6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><ref refid="struct_r_f___schedule_map_element_1a615ed3c74407996016f69a2d01a66ff6" kindref="member">endTime</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1375" refid="struct_r_f___schedule_map_element_1aec3c01a661e746e18a525d5516c88498" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1ae5f9a893d178e64e6d0a7a783ea06e32" kindref="member">RF_Priority</ref><sp/><sp/><ref refid="struct_r_f___schedule_map_element_1aec3c01a661e746e18a525d5516c88498" kindref="member">priority</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1376"><highlight class="normal">}<sp/><ref refid="struct_r_f___schedule_map_element" kindref="compound">RF_ScheduleMapElement</ref>;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381" refid="struct_r_f___schedule_map" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1382" refid="struct_r_f___schedule_map_1a62346d847edaeb55eba3288013fe69bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_r_f___schedule_map_element" kindref="compound">RF_ScheduleMapElement</ref><sp/><sp/>accessMap[<ref refid="_r_f_8h_1a37a38c0dc13a2ce547335e861f70d051" kindref="member">RF_NUM_SCHEDULE_ACCESS_ENTRIES</ref>];<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1383" refid="struct_r_f___schedule_map_1a3ed09257f9e0ed0eeb3d7ac9f511a9fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_r_f___schedule_map_element" kindref="compound">RF_ScheduleMapElement</ref><sp/><sp/>commandMap[<ref refid="_r_f_8h_1af6c29118d59b89ae5fe77128943034ac" kindref="member">RF_NUM_SCHEDULE_COMMAND_ENTRIES</ref>];<sp/><sp/></highlight></codeline>
<codeline lineno="1384"><highlight class="normal">}<sp/><ref refid="struct_r_f___schedule_map" kindref="compound">RF_ScheduleMap</ref>;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1411" refid="_r_f_8h_1a4d2ce6dc70b0f329dc5e249ec10c574a" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_r_f_8h_1a4d2ce6dc70b0f329dc5e249ec10c574a" kindref="member">RF_Callback</ref>)(RF_Handle<sp/>h,<sp/>RF_CmdHandle<sp/>ch,<sp/>RF_EventMask<sp/>e);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1426" refid="_r_f_8h_1afbf75555f36dd8e45a3a932de62b2c68" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_r_f_8h_1afbf75555f36dd8e45a3a932de62b2c68" kindref="member">RF_RatCallback</ref>)(RF_Handle<sp/>h,<sp/>RF_RatHandle<sp/>rh,<sp/>RF_EventMask<sp/>e,<sp/>uint32_t<sp/>compareCaptureTime);</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1443" refid="_r_f_8h_1ab6bf8da299cd0c975c61fe2e450c0734" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_r_f_8h_1ab6bf8da299cd0c975c61fe2e450c0734" kindref="member">RF_ClientCallback</ref>)(RF_Handle<sp/>h,<sp/><ref refid="_r_f_8h_1acfa72a48f45abb7ea8e1595ce6606b7a" kindref="member">RF_ClientEvent</ref><sp/>event,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arg);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1458" refid="_r_f_8h_1a72192434157b0de3de648456bc221f07" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_r_f_8h_1a72192434157b0de3de648456bc221f07" kindref="member">RF_GlobalCallback</ref>)(RF_Handle<sp/>h,<sp/><ref refid="_r_f_8h_1ad40e352daa020429c2aa1cd49283c5e8" kindref="member">RF_GlobalEvent</ref><sp/>event,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arg);</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468" refid="struct_r_f___params" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1469" refid="struct_r_f___params_1a01d3752799ea4318bbf9d1384cb49b97" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_r_f___params_1a01d3752799ea4318bbf9d1384cb49b97" kindref="member">nInactivityTimeout</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight></codeline>
<codeline lineno="1472" refid="struct_r_f___params_1a58dc682aa09acabe6411ea186dd3aebf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_r_f___params_1a58dc682aa09acabe6411ea186dd3aebf" kindref="member">nPowerUpDuration</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight></codeline>
<codeline lineno="1476" refid="struct_r_f___params_1ae683ebc129d40a11fb9ec7e371f1e11b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a4d2ce6dc70b0f329dc5e249ec10c574a" kindref="member">RF_Callback</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_r_f___params_1ae683ebc129d40a11fb9ec7e371f1e11b" kindref="member">pPowerCb</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479" refid="struct_r_f___params_1ab7be231b23fab2503b8c54b474fba74d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a4d2ce6dc70b0f329dc5e249ec10c574a" kindref="member">RF_Callback</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_r_f___params_1ab7be231b23fab2503b8c54b474fba74d" kindref="member">pErrCb</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481" refid="struct_r_f___params_1a848ebeabce42f87f6a1d4f51f908dbe4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_r_f___params_1a848ebeabce42f87f6a1d4f51f908dbe4" kindref="member">nPowerUpDurationMargin</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486" refid="struct_r_f___params_1a23e520f0583d79783f8bf54a491fc26e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1ab6bf8da299cd0c975c61fe2e450c0734" kindref="member">RF_ClientCallback</ref><sp/><sp/><sp/><ref refid="struct_r_f___params_1a23e520f0583d79783f8bf54a491fc26e" kindref="member">pClientEventCb</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489" refid="struct_r_f___params_1ac63730611b6c615fe40a17b4dc5eb021" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RF_ClientEventMask<sp/><sp/><ref refid="struct_r_f___params_1ac63730611b6c615fe40a17b4dc5eb021" kindref="member">nClientEventMask</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1490"><highlight class="normal">}<sp/><ref refid="struct_r_f___params" kindref="compound">RF_Params</ref>;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1498" refid="struct_r_f_c_c26_x_x___h_w_attrs_v2" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1499" refid="struct_r_f_c_c26_x_x___h_w_attrs_v2_1a552a6992c1d1e8ff3e5f0876d80b734f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_r_f_c_c26_x_x___h_w_attrs_v2_1a552a6992c1d1e8ff3e5f0876d80b734f" kindref="member">hwiPriority</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1500" refid="struct_r_f_c_c26_x_x___h_w_attrs_v2_1adcb29352c7c6db61035bb34242175d9b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_r_f_c_c26_x_x___h_w_attrs_v2_1adcb29352c7c6db61035bb34242175d9b" kindref="member">swiPriority</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1501" refid="struct_r_f_c_c26_x_x___h_w_attrs_v2_1a0332f985284e8397667e477605bb1bab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_r_f_c_c26_x_x___h_w_attrs_v2_1a0332f985284e8397667e477605bb1bab" kindref="member">xoscHfAlwaysNeeded</ref>;<sp/></highlight></codeline>
<codeline lineno="1502" refid="struct_r_f_c_c26_x_x___h_w_attrs_v2_1a7b47cefffa594a19d5f45d676fa09491" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a72192434157b0de3de648456bc221f07" kindref="member">RF_GlobalCallback</ref><sp/><sp/><sp/><ref refid="struct_r_f_c_c26_x_x___h_w_attrs_v2_1a7b47cefffa594a19d5f45d676fa09491" kindref="member">globalCallback</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1503" refid="struct_r_f_c_c26_x_x___h_w_attrs_v2_1a43e0d7e59ef95cfad107009deef20c30" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RF_GlobalEventMask<sp/><sp/><ref refid="struct_r_f_c_c26_x_x___h_w_attrs_v2_1a43e0d7e59ef95cfad107009deef20c30" kindref="member">globalEventMask</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1504"><highlight class="normal">}<sp/><ref refid="struct_r_f_c_c26_x_x___h_w_attrs_v2" kindref="compound">RFCC26XX_HWAttrsV2</ref>;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509" refid="_r_f_8h_1a00f0a82597a56910cacf3f943b4a91a4" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1510" refid="_r_f_8h_1a00f0a82597a56910cacf3f943b4a91a4a88ec56d363dd432a0854935aea89e58d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a00f0a82597a56910cacf3f943b4a91a4a88ec56d363dd432a0854935aea89e58d" kindref="member">RF_AllowDelayNone</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1511" refid="_r_f_8h_1a00f0a82597a56910cacf3f943b4a91a4ab260570ce0ae8fc9152d012162d9258e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a00f0a82597a56910cacf3f943b4a91a4ab260570ce0ae8fc9152d012162d9258e" kindref="member">RF_AllowDelayAny</ref><sp/><sp/>=<sp/>UINT32_MAX</highlight></codeline>
<codeline lineno="1512"><highlight class="normal">}<sp/><ref refid="_r_f_8h_1a00f0a82597a56910cacf3f943b4a91a4" kindref="member">RF_AllowDelay</ref>;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>@brief<sp/>RF<sp/>schedule<sp/>command<sp/>parameter<sp/>struct</highlight></codeline>
<codeline lineno="1515"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1516"><highlight class="comment"><sp/>*<sp/>RF<sp/>schedule<sp/>command<sp/>parameters<sp/>are<sp/>used<sp/>with<sp/>the<sp/>RF_scheduleCmd()<sp/>call.</highlight></codeline>
<codeline lineno="1517"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518" refid="struct_r_f___schedule_cmd_params" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1519" refid="struct_r_f___schedule_cmd_params_1ae4244a807352c8c93def2d39bbbd080e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_r_f___schedule_cmd_params_1ae4244a807352c8c93def2d39bbbd080e" kindref="member">endTime</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1520" refid="struct_r_f___schedule_cmd_params_1a809078fc59bdf91f81ef390da0047537" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1ae5f9a893d178e64e6d0a7a783ea06e32" kindref="member">RF_Priority</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_r_f___schedule_cmd_params_1a809078fc59bdf91f81ef390da0047537" kindref="member">priority</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1521" refid="struct_r_f___schedule_cmd_params_1aa52c58bb63181c248966b0bd67c76975" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_r_f___schedule_cmd_params_1aa52c58bb63181c248966b0bd67c76975" kindref="member">allowDelay</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1522"><highlight class="normal">}<sp/><ref refid="struct_r_f___schedule_cmd_params" kindref="compound">RF_ScheduleCmdParams</ref>;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight></codeline>
<codeline lineno="1531" refid="struct_r_f___access_params" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1532" refid="struct_r_f___access_params_1a0d6adb1c309962431a8b777a44325ade" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_r_f___access_params_1a0d6adb1c309962431a8b777a44325ade" kindref="member">duration</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1533" refid="struct_r_f___access_params_1a4ec6ddde388c80d5e2d4b3d8311fcaaf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_r_f___access_params_1a4ec6ddde388c80d5e2d4b3d8311fcaaf" kindref="member">startTime</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1534" refid="struct_r_f___access_params_1a9ed4a1af207a7f63beb8cfebdd940894" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1ae5f9a893d178e64e6d0a7a783ea06e32" kindref="member">RF_Priority</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_r_f___access_params_1a9ed4a1af207a7f63beb8cfebdd940894" kindref="member">priority</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1535"><highlight class="normal">}<sp/><ref refid="struct_r_f___access_params" kindref="compound">RF_AccessParams</ref>;</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight></codeline>
<codeline lineno="1543" refid="_r_f_8h_1a90ce11f016f50739ded9a5afd417d404" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1544" refid="_r_f_8h_1a90ce11f016f50739ded9a5afd417d404aa6be170e55da07a1960996aa99d47f23" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a90ce11f016f50739ded9a5afd417d404aa6be170e55da07a1960996aa99d47f23" kindref="member">RF_RatChannelAny</ref><sp/>=<sp/>-1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1545" refid="_r_f_8h_1a90ce11f016f50739ded9a5afd417d404ae7b02ff7b22f3651c3860af31fcda357" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a90ce11f016f50739ded9a5afd417d404ae7b02ff7b22f3651c3860af31fcda357" kindref="member">RF_RatChannel0</ref><sp/><sp/><sp/>=<sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1546" refid="_r_f_8h_1a90ce11f016f50739ded9a5afd417d404a17f39920b827e139c9f457bc3a90f285" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a90ce11f016f50739ded9a5afd417d404a17f39920b827e139c9f457bc3a90f285" kindref="member">RF_RatChannel1</ref><sp/><sp/><sp/>=<sp/><sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1547" refid="_r_f_8h_1a90ce11f016f50739ded9a5afd417d404aa1675308a8fe8c68223a4b458c3521f2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a90ce11f016f50739ded9a5afd417d404aa1675308a8fe8c68223a4b458c3521f2" kindref="member">RF_RatChannel2</ref><sp/><sp/><sp/>=<sp/><sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1548"><highlight class="normal">}<sp/><ref refid="_r_f_8h_1a90ce11f016f50739ded9a5afd417d404" kindref="member">RF_RatSelectChannel</ref>;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight></codeline>
<codeline lineno="1555" refid="_r_f_8h_1a2df66c68b4216d2835915c9a240152b9" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1556" refid="_r_f_8h_1a2df66c68b4216d2835915c9a240152b9aaf3502be2ed158963579a088e9839a3e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a2df66c68b4216d2835915c9a240152b9aaf3502be2ed158963579a088e9839a3e" kindref="member">RF_RatCaptureSourceRtcUpdate</ref><sp/><sp/><sp/><sp/>=<sp/>20,<sp/></highlight></codeline>
<codeline lineno="1557" refid="_r_f_8h_1a2df66c68b4216d2835915c9a240152b9a5048e0046b442ada45022171d6a4c2b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a2df66c68b4216d2835915c9a240152b9a5048e0046b442ada45022171d6a4c2b5" kindref="member">RF_RatCaptureSourceEventGeneric</ref><sp/>=<sp/>21,<sp/></highlight></codeline>
<codeline lineno="1558" refid="_r_f_8h_1a2df66c68b4216d2835915c9a240152b9a8d257508fc1a912b9eac8ed8f296fb2b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a2df66c68b4216d2835915c9a240152b9a8d257508fc1a912b9eac8ed8f296fb2b" kindref="member">RF_RatCaptureSourceRfcGpi0</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>22,<sp/></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a2df66c68b4216d2835915c9a240152b9a273b1645a7e7e9e6534c8edccde986d3" kindref="member">RF_RatCaptureSourceRfcGpi1</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>23<sp/><sp/></highlight></codeline>
<codeline lineno="1562"><highlight class="normal">}<sp/><ref refid="_r_f_8h_1a2df66c68b4216d2835915c9a240152b9" kindref="member">RF_RatCaptureSource</ref>;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1571" refid="_r_f_8h_1a696a994a1c4cc105cdf7d775b5b8f49e" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1572" refid="_r_f_8h_1a696a994a1c4cc105cdf7d775b5b8f49ea418153f81b4fd93cc70c3838c3633e50" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a696a994a1c4cc105cdf7d775b5b8f49ea418153f81b4fd93cc70c3838c3633e50" kindref="member">RF_RatCaptureModeRising</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1573" refid="_r_f_8h_1a696a994a1c4cc105cdf7d775b5b8f49ea045f8eaea856976ad615b6dee90f7eca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a696a994a1c4cc105cdf7d775b5b8f49ea045f8eaea856976ad615b6dee90f7eca" kindref="member">RF_RatCaptureModeFalling</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1574" refid="_r_f_8h_1a696a994a1c4cc105cdf7d775b5b8f49eae9e5af867013f557ba3b0765afb3e1fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a696a994a1c4cc105cdf7d775b5b8f49eae9e5af867013f557ba3b0765afb3e1fe" kindref="member">RF_RatCaptureModeBoth</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1575"><highlight class="normal">}<sp/><ref refid="_r_f_8h_1a696a994a1c4cc105cdf7d775b5b8f49e" kindref="member">RF_RatCaptureMode</ref>;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"></highlight></codeline>
<codeline lineno="1584" refid="_r_f_8h_1ab26f46757c3fe1533a0ad1e299a6972d" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1585" refid="_r_f_8h_1ab26f46757c3fe1533a0ad1e299a6972da9085567badb3963d673716578d584f91" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1ab26f46757c3fe1533a0ad1e299a6972da9085567badb3963d673716578d584f91" kindref="member">RF_RatCaptureSingle</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1586" refid="_r_f_8h_1ab26f46757c3fe1533a0ad1e299a6972da872d8bb2a69982689b67ca30c85bfd84" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1ab26f46757c3fe1533a0ad1e299a6972da872d8bb2a69982689b67ca30c85bfd84" kindref="member">RF_RatCaptureRepeat</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1587"><highlight class="normal">}<sp/><ref refid="_r_f_8h_1ab26f46757c3fe1533a0ad1e299a6972d" kindref="member">RF_RatCaptureRepetition</ref>;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight></codeline>
<codeline lineno="1603" refid="_r_f_8h_1a9e9327d42a6943ea9324a1c8b547b5d9" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1604" refid="_r_f_8h_1a9e9327d42a6943ea9324a1c8b547b5d9aebd67f05684e2832b745b099e7c88486" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a9e9327d42a6943ea9324a1c8b547b5d9aebd67f05684e2832b745b099e7c88486" kindref="member">RF_RatOutputModePulse</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1605" refid="_r_f_8h_1a9e9327d42a6943ea9324a1c8b547b5d9afac232ab3d38f7087b877777c86b1262" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a9e9327d42a6943ea9324a1c8b547b5d9afac232ab3d38f7087b877777c86b1262" kindref="member">RF_RatOutputModeSet</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1606" refid="_r_f_8h_1a9e9327d42a6943ea9324a1c8b547b5d9a764e233e4caacfb4eed3f5b8e6777f2d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a9e9327d42a6943ea9324a1c8b547b5d9a764e233e4caacfb4eed3f5b8e6777f2d" kindref="member">RF_RatOutputModeClear</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1607" refid="_r_f_8h_1a9e9327d42a6943ea9324a1c8b547b5d9aceed850a718e8b4a89f0ced3495143b4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a9e9327d42a6943ea9324a1c8b547b5d9aceed850a718e8b4a89f0ced3495143b4" kindref="member">RF_RatOutputModeToggle</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>3,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1608" refid="_r_f_8h_1a9e9327d42a6943ea9324a1c8b547b5d9afe9d62943ead37d9f42aa8b9ba8ce272" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a9e9327d42a6943ea9324a1c8b547b5d9afe9d62943ead37d9f42aa8b9ba8ce272" kindref="member">RF_RatOutputModeAlwaysZero</ref><sp/><sp/><sp/><sp/>=<sp/>4,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1609" refid="_r_f_8h_1a9e9327d42a6943ea9324a1c8b547b5d9a359e117a34de1f2d5e18020a51953d01" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a9e9327d42a6943ea9324a1c8b547b5d9a359e117a34de1f2d5e18020a51953d01" kindref="member">RF_RatOutputModeAlwaysOne</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>5,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1610"><highlight class="normal">}<sp/><ref refid="_r_f_8h_1a9e9327d42a6943ea9324a1c8b547b5d9" kindref="member">RF_RatOutputMode</ref>;</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight></codeline>
<codeline lineno="1621" refid="_r_f_8h_1aae197f40cee9a7f1582c7562e0288998" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1622" refid="_r_f_8h_1aae197f40cee9a7f1582c7562e0288998a7db4a52061e981c8d2cb16c191929980" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1aae197f40cee9a7f1582c7562e0288998a7db4a52061e981c8d2cb16c191929980" kindref="member">RF_RatOutputSelectRatGpo1</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1623" refid="_r_f_8h_1aae197f40cee9a7f1582c7562e0288998ab7e16a49d10636da78c0f7caf2e9f3cb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1aae197f40cee9a7f1582c7562e0288998ab7e16a49d10636da78c0f7caf2e9f3cb" kindref="member">RF_RatOutputSelectRatGpo2</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1624" refid="_r_f_8h_1aae197f40cee9a7f1582c7562e0288998a4c9e7b401e0de9bb9097c6d8e6e308f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1aae197f40cee9a7f1582c7562e0288998a4c9e7b401e0de9bb9097c6d8e6e308f3" kindref="member">RF_RatOutputSelectRatGpo3</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>3,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1625" refid="_r_f_8h_1aae197f40cee9a7f1582c7562e0288998aaaa1f147cf872631855f7c9de0adfbdc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1aae197f40cee9a7f1582c7562e0288998aaaa1f147cf872631855f7c9de0adfbdc" kindref="member">RF_RatOutputSelectRatGpo4</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>4,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1626" refid="_r_f_8h_1aae197f40cee9a7f1582c7562e0288998aab31fed8d5373d5be3b38b00b7e228bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1aae197f40cee9a7f1582c7562e0288998aab31fed8d5373d5be3b38b00b7e228bc" kindref="member">RF_RatOutputSelectRatGpo5</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>5,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1627" refid="_r_f_8h_1aae197f40cee9a7f1582c7562e0288998a17d6ba08cefb8d01b3591ab88027dea7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1aae197f40cee9a7f1582c7562e0288998a17d6ba08cefb8d01b3591ab88027dea7" kindref="member">RF_RatOutputSelectRatGpo6</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>6,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1628" refid="_r_f_8h_1aae197f40cee9a7f1582c7562e0288998a44e78ff0b3bb6353e46d27869db75ba3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1aae197f40cee9a7f1582c7562e0288998a44e78ff0b3bb6353e46d27869db75ba3" kindref="member">RF_RatOutputSelectRatGpo7</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>7,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1629"><highlight class="normal">}<sp/><ref refid="_r_f_8h_1aae197f40cee9a7f1582c7562e0288998" kindref="member">RF_RatOutputSelect</ref>;</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight></codeline>
<codeline lineno="1635" refid="struct_r_f___rat_config_capture" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1636" refid="struct_r_f___rat_config_capture_1a3570c9f346bd87a6f81b59b70e8de0e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1afbf75555f36dd8e45a3a932de62b2c68" kindref="member">RF_RatCallback</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_r_f___rat_config_capture_1a3570c9f346bd87a6f81b59b70e8de0e8" kindref="member">callback</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1637" refid="struct_r_f___rat_config_capture_1a7a46abf1a585b215f7e62087cdb9c901" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RF_RatHandle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_r_f___rat_config_capture_1a7a46abf1a585b215f7e62087cdb9c901" kindref="member">channel</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1638" refid="struct_r_f___rat_config_capture_1a97d47066ca0bac9c5aab53a7c0424e87" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a2df66c68b4216d2835915c9a240152b9" kindref="member">RF_RatCaptureSource</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_r_f___rat_config_capture_1a97d47066ca0bac9c5aab53a7c0424e87" kindref="member">source</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1639" refid="struct_r_f___rat_config_capture_1adff5ee83e863f7a23f288b3c229b12eb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a696a994a1c4cc105cdf7d775b5b8f49e" kindref="member">RF_RatCaptureMode</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_r_f___rat_config_capture_1adff5ee83e863f7a23f288b3c229b12eb" kindref="member">captureMode</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1640" refid="struct_r_f___rat_config_capture_1ac655323156a5d790d30dd4d2879a0d5e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1ab26f46757c3fe1533a0ad1e299a6972d" kindref="member">RF_RatCaptureRepetition</ref><sp/><sp/><sp/><ref refid="struct_r_f___rat_config_capture_1ac655323156a5d790d30dd4d2879a0d5e" kindref="member">repeat</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1641"><highlight class="normal">}<sp/><ref refid="struct_r_f___rat_config_capture" kindref="compound">RF_RatConfigCapture</ref>;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight></codeline>
<codeline lineno="1647" refid="struct_r_f___rat_config_compare" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1648" refid="struct_r_f___rat_config_compare_1a07cbf5e6902c168024921db4d520d231" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1afbf75555f36dd8e45a3a932de62b2c68" kindref="member">RF_RatCallback</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_r_f___rat_config_compare_1a07cbf5e6902c168024921db4d520d231" kindref="member">callback</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1649" refid="struct_r_f___rat_config_compare_1ac9d3979d011cb7554280d0a03f5f6929" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RF_RatHandle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_r_f___rat_config_compare_1ac9d3979d011cb7554280d0a03f5f6929" kindref="member">channel</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1650" refid="struct_r_f___rat_config_compare_1a28b5f51f9aa9b8c61e2cf9205ffc97eb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_r_f___rat_config_compare_1a28b5f51f9aa9b8c61e2cf9205ffc97eb" kindref="member">timeout</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1651"><highlight class="normal">}<sp/><ref refid="struct_r_f___rat_config_compare" kindref="compound">RF_RatConfigCompare</ref>;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight></codeline>
<codeline lineno="1658" refid="struct_r_f___rat_config_output" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1659" refid="struct_r_f___rat_config_output_1acba02cc8bff8335605565dcee641a7f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1a9e9327d42a6943ea9324a1c8b547b5d9" kindref="member">RF_RatOutputMode</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_r_f___rat_config_output_1acba02cc8bff8335605565dcee641a7f4" kindref="member">mode</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1660" refid="struct_r_f___rat_config_output_1acf115f92f8c930f3964fda9ae5b50bca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_r_f_8h_1aae197f40cee9a7f1582c7562e0288998" kindref="member">RF_RatOutputSelect</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_r_f___rat_config_output_1acf115f92f8c930f3964fda9ae5b50bca" kindref="member">select</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1661"><highlight class="normal">}<sp/><ref refid="struct_r_f___rat_config_output" kindref="compound">RF_RatConfigOutput</ref>;</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_Handle<sp/><ref refid="_r_f_8h_1a13a7c6f5a2b797e0aac18fecfaba6f64" kindref="member">RF_open</ref>(<ref refid="struct_r_f___object" kindref="compound">RF_Object</ref><sp/>*pObj,<sp/><ref refid="struct_r_f___mode" kindref="compound">RF_Mode</ref><sp/>*pRfMode,<sp/><ref refid="union_r_f___radio_setup" kindref="compound">RF_RadioSetup</ref><sp/>*pOpSetup,<sp/><ref refid="struct_r_f___params" kindref="compound">RF_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_r_f_8h_1a9ff7e64561f7aa5526837521bceb5f88" kindref="member">RF_close</ref>(RF_Handle<sp/>h);</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="_r_f_8h_1aedfdf0bdf0f64a071d50a6d78446fef4" kindref="member">RF_getCurrentTime</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_CmdHandle<sp/><ref refid="_r_f_8h_1a2b0ee444fcb74917df94eefea804ecbb" kindref="member">RF_postCmd</ref>(RF_Handle<sp/>h,<sp/>RF_Op*<sp/>pOp,<sp/><ref refid="_r_f_8h_1ae5f9a893d178e64e6d0a7a783ea06e32" kindref="member">RF_Priority</ref><sp/>ePri,<sp/><ref refid="_r_f_8h_1a4d2ce6dc70b0f329dc5e249ec10c574a" kindref="member">RF_Callback</ref><sp/>pCb,<sp/>RF_EventMask<sp/>bmEvent);</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_r_f_8h_1a9ffe098f1c3a174e225ac88f6e1574ed" kindref="member">RF_ScheduleCmdParams_init</ref>(<ref refid="struct_r_f___schedule_cmd_params" kindref="compound">RF_ScheduleCmdParams</ref><sp/>*pSchParams);</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_CmdHandle<sp/><ref refid="_r_f_8h_1a5e7f25943b5f3942bf4c09cb87f9aa76" kindref="member">RF_scheduleCmd</ref>(RF_Handle<sp/>h,<sp/>RF_Op*<sp/>pOp,<sp/><ref refid="struct_r_f___schedule_cmd_params" kindref="compound">RF_ScheduleCmdParams</ref><sp/>*pSchParams,<sp/><ref refid="_r_f_8h_1a4d2ce6dc70b0f329dc5e249ec10c574a" kindref="member">RF_Callback</ref><sp/>pCb,<sp/>RF_EventMask<sp/>bmEvent);</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_EventMask<sp/><ref refid="_r_f_8h_1a91c1cb2508311f822acbc08ace568a83" kindref="member">RF_pendCmd</ref>(RF_Handle<sp/>h,<sp/>RF_CmdHandle<sp/>ch,<sp/>RF_EventMask<sp/>bmEvent);</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_EventMask<sp/><ref refid="_r_f_8h_1a248bebdd1d0bd6e0812cf18116987e54" kindref="member">RF_runCmd</ref>(RF_Handle<sp/>h,<sp/>RF_Op*<sp/>pOp,<sp/><ref refid="_r_f_8h_1ae5f9a893d178e64e6d0a7a783ea06e32" kindref="member">RF_Priority</ref><sp/>ePri,<sp/><ref refid="_r_f_8h_1a4d2ce6dc70b0f329dc5e249ec10c574a" kindref="member">RF_Callback</ref><sp/>pCb,<sp/>RF_EventMask<sp/>bmEvent);</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_EventMask<sp/><ref refid="_r_f_8h_1a5042591ca75f04c60fa0f7e7a9e1aac8" kindref="member">RF_runScheduleCmd</ref>(RF_Handle<sp/>h,<sp/>RF_Op*<sp/>pOp,<sp/><ref refid="struct_r_f___schedule_cmd_params" kindref="compound">RF_ScheduleCmdParams</ref><sp/>*pSchParams,<sp/><ref refid="_r_f_8h_1a4d2ce6dc70b0f329dc5e249ec10c574a" kindref="member">RF_Callback</ref><sp/>pCb,<sp/>RF_EventMask<sp/>bmEvent);</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"></highlight></codeline>
<codeline lineno="1945"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_Stat<sp/><ref refid="_r_f_8h_1aabe22ceae13a372be4ba135318aa849a" kindref="member">RF_cancelCmd</ref>(RF_Handle<sp/>h,<sp/>RF_CmdHandle<sp/>ch,<sp/>uint8_t<sp/>mode);</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_Stat<sp/><ref refid="_r_f_8h_1ae3ff5c614f4a63cb4e79c90f9229149a" kindref="member">RF_flushCmd</ref>(RF_Handle<sp/>h,<sp/>RF_CmdHandle<sp/>ch,<sp/>uint8_t<sp/>mode);</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_Stat<sp/><ref refid="_r_f_8h_1a6159b409f8d99954529a8ebf6f98cd85" kindref="member">RF_runImmediateCmd</ref>(RF_Handle<sp/>h,<sp/>uint32_t*<sp/>pCmdStruct);</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_Stat<sp/><ref refid="_r_f_8h_1aafce617271300f2bee1a52ebda6d654e" kindref="member">RF_runDirectCmd</ref>(RF_Handle<sp/>h,<sp/>uint32_t<sp/>cmd);</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_r_f_8h_1a299ada7963c727a40466d7d1bb7296a3" kindref="member">RF_yield</ref>(RF_Handle<sp/>h);</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_r_f_8h_1ab956de3745437cb7a69c4edfb006434e" kindref="member">RF_Params_init</ref>(<ref refid="struct_r_f___params" kindref="compound">RF_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_Stat<sp/><ref refid="_r_f_8h_1a4bd7985a3e0c5ad2b9f5e94aa945db63" kindref="member">RF_getInfo</ref>(RF_Handle<sp/>h,<sp/>RF_InfoType<sp/>type,<sp/><ref refid="union_r_f___info_val" kindref="compound">RF_InfoVal</ref><sp/>*pValue);</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"></highlight></codeline>
<codeline lineno="2046"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int8_t<sp/><ref refid="_r_f_8h_1ac3fe0d39243fb6bbefe0216d958a6779" kindref="member">RF_getRssi</ref>(RF_Handle<sp/>h);</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_Op*<sp/><ref refid="_r_f_8h_1abdde833057385980d0ae1b2c844b97b7" kindref="member">RF_getCmdOp</ref>(RF_Handle<sp/>h,<sp/>RF_CmdHandle<sp/>cmdHnd);</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"></highlight></codeline>
<codeline lineno="2067"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_r_f_8h_1a33af74f29f9d987cd64871ccd041d8a7" kindref="member">RF_RatConfigCompare_init</ref>(<ref refid="struct_r_f___rat_config_compare" kindref="compound">RF_RatConfigCompare</ref>*<sp/>channelConfig);</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_r_f_8h_1a9770b153e83093f834988b9da6b49aa1" kindref="member">RF_RatConfigCapture_init</ref>(<ref refid="struct_r_f___rat_config_capture" kindref="compound">RF_RatConfigCapture</ref>*<sp/>channelConfig);</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_r_f_8h_1adc076482a56613d62f1ec2a18b137b12" kindref="member">RF_RatConfigOutput_init</ref>(<ref refid="struct_r_f___rat_config_output" kindref="compound">RF_RatConfigOutput</ref>*<sp/>ioConfig);</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_RatHandle<sp/><ref refid="_r_f_8h_1af26945dca21f0742e7e978af6e176fea" kindref="member">RF_ratCompare</ref>(RF_Handle<sp/>rfHandle,<sp/><ref refid="struct_r_f___rat_config_compare" kindref="compound">RF_RatConfigCompare</ref>*<sp/>channelConfig,<sp/><ref refid="struct_r_f___rat_config_output" kindref="compound">RF_RatConfigOutput</ref>*<sp/>ioConfig);</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_RatHandle<sp/><ref refid="_r_f_8h_1a513fd2cb2616e901d9f7a638ae9b7772" kindref="member">RF_ratCapture</ref>(RF_Handle<sp/>rfHandle,<sp/><ref refid="struct_r_f___rat_config_capture" kindref="compound">RF_RatConfigCapture</ref>*<sp/>channelConfig,<sp/><ref refid="struct_r_f___rat_config_output" kindref="compound">RF_RatConfigOutput</ref>*<sp/>ioConfig);</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"></highlight></codeline>
<codeline lineno="2190"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_Stat<sp/><ref refid="_r_f_8h_1a8376a652a71c112b1028a1f02860ad60" kindref="member">RF_ratDisableChannel</ref>(RF_Handle<sp/>rfHandle,<sp/>RF_RatHandle<sp/>ratHandle);</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_Stat<sp/><ref refid="_r_f_8h_1aa31772d56afb197fd812d24aa6f07f1b" kindref="member">RF_control</ref>(RF_Handle<sp/>h,<sp/>int8_t<sp/>ctrl,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*args);</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"></highlight></codeline>
<codeline lineno="2222"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_Stat<sp/><ref refid="_r_f_8h_1a40a5506c05a11a3cd9d379cedad5b5d0" kindref="member">RF_requestAccess</ref>(RF_Handle<sp/>h,<sp/><ref refid="struct_r_f___access_params" kindref="compound">RF_AccessParams</ref><sp/>*pParams);</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_r_f___tx_power_table___value" kindref="compound">RF_TxPowerTable_Value</ref><sp/><ref refid="_r_f_8h_1aed02cc74cc7da5d2be9c0fb68ab5efc3" kindref="member">RF_getTxPower</ref>(RF_Handle<sp/>h);</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"></highlight></codeline>
<codeline lineno="2262"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RF_Stat<sp/><ref refid="_r_f_8h_1a45ae701a298b6f4cddbc845333e61ad5" kindref="member">RF_setTxPower</ref>(RF_Handle<sp/>h,<sp/><ref refid="struct_r_f___tx_power_table___value" kindref="compound">RF_TxPowerTable_Value</ref><sp/>value);</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"></highlight></codeline>
<codeline lineno="2282"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int8_t<sp/><ref refid="_r_f_8h_1a93d89aa05a52d9427b5dd2a84cc2d3a3" kindref="member">RF_TxPowerTable_findPowerLevel</ref>(<ref refid="struct_r_f___tx_power_table___entry" kindref="compound">RF_TxPowerTable_Entry</ref><sp/>table[],<sp/><ref refid="struct_r_f___tx_power_table___value" kindref="compound">RF_TxPowerTable_Value</ref><sp/>value);</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_r_f___tx_power_table___value" kindref="compound">RF_TxPowerTable_Value</ref><sp/><ref refid="_r_f_8h_1a8b8022d01ade500a5cd6bd46b9bc8d26" kindref="member">RF_TxPowerTable_findValue</ref>(<ref refid="struct_r_f___tx_power_table___entry" kindref="compound">RF_TxPowerTable_Entry</ref><sp/>table[],<sp/>int8_t<sp/>powerLevel);</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"></highlight></codeline>
<codeline lineno="2310"><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2314"><highlight class="normal"></highlight></codeline>
<codeline lineno="2315"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_rf__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="exports/tidrivers_cc13xx_cc26xx_3_60_01_00/source/ti/drivers/rf/RF.h"/>
  </compounddef>
</doxygen>
